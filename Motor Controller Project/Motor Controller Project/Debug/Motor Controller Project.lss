
Motor Controller Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000008e6  0000097a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800112  00800112  0000098c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001992  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e83  00000000  00000000  0000258a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa1  00000000  00000000  0000340d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00003eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9a  00000000  00000000  000041d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036a  00000000  00000000  00004c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00004fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_13>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_35>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 ee       	ldi	r30, 0xE6	; 230
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 31       	cpi	r26, 0x12	; 18
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e1       	ldi	r26, 0x12	; 18
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	aa 31       	cpi	r26, 0x1A	; 26
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  ea:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <system_init>
  f6:	08 95       	ret

000000f8 <USART0_Print>:
//OUTPUT on PB2
volatile PWM_0_register_t PWM_0_duty = STOPPED;
volatile PWM_1_register_t PWM_1_duty = STOPPED;


void USART0_Print(const char* variable){ // Function to write a string to USART0
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	7c 01       	movw	r14, r24
	
	for (int i=0; i<strlen(variable); i++) // Loops to print character array pointed to by received string
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	06 c0       	rjmp	.+12     	; 0x11a <USART0_Print+0x22>
	{
		USART_0_write(variable[i]);
 10e:	f7 01       	movw	r30, r14
 110:	81 91       	ld	r24, Z+
 112:	7f 01       	movw	r14, r30
 114:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART_0_write>
volatile PWM_1_register_t PWM_1_duty = STOPPED;


void USART0_Print(const char* variable){ // Function to write a string to USART0
	
	for (int i=0; i<strlen(variable); i++) // Loops to print character array pointed to by received string
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	f8 01       	movw	r30, r16
 11c:	01 90       	ld	r0, Z+
 11e:	00 20       	and	r0, r0
 120:	e9 f7       	brne	.-6      	; 0x11c <USART0_Print+0x24>
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	e0 1b       	sub	r30, r16
 126:	f1 0b       	sbc	r31, r17
 128:	ce 17       	cp	r28, r30
 12a:	df 07       	cpc	r29, r31
 12c:	80 f3       	brcs	.-32     	; 0x10e <USART0_Print+0x16>
	{
		USART_0_write(variable[i]);
	}
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <main>:




int main(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	1f 92       	push	r1
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
 146:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	// DO NOT DELETE
	//==========================================
	DDRC |= 0x01;
 14a:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= 0x01;
 14c:	40 9a       	sbi	0x08, 0	; 8
	
	char rxnum[] = "";
 14e:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		//USART0_Print("Starting...");
		if(USART_0_is_rx_ready()){
			while(USART_0_is_rx_ready()){
				rxraw = USART_0_read();
				sprintf(rxnum,"%u",rxraw);
 150:	0e e0       	ldi	r16, 0x0E	; 14
 152:	11 e0       	ldi	r17, 0x01	; 1
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	7c 01       	movw	r14, r24
 15a:	c8 2e       	mov	r12, r24
 15c:	df 2c       	mov	r13, r15
	char rxnum[] = "";
	uint8_t rxraw;

	while(1){
		//USART0_Print("Starting...");
		if(USART_0_is_rx_ready()){
 15e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <USART_0_is_rx_ready>
 162:	88 23       	and	r24, r24
 164:	e1 f3       	breq	.-8      	; 0x15e <main+0x22>
 166:	17 c0       	rjmp	.+46     	; 0x196 <main+0x5a>
			while(USART_0_is_rx_ready()){
				rxraw = USART_0_read();
 168:	0e 94 72 01 	call	0x2e4	; 0x2e4 <USART_0_read>
				sprintf(rxnum,"%u",rxraw);
 16c:	1f 92       	push	r1
 16e:	8f 93       	push	r24
 170:	1f 93       	push	r17
 172:	0f 93       	push	r16
 174:	ff 92       	push	r15
 176:	ef 92       	push	r14
 178:	0e 94 87 01 	call	0x30e	; 0x30e <sprintf>
				USART0_Print(rxnum);
 17c:	8c 2d       	mov	r24, r12
 17e:	9d 2d       	mov	r25, r13
 180:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
				USART_0_write(10);
 184:	8a e0       	ldi	r24, 0x0A	; 10
 186:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART_0_write>
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
	uint8_t rxraw;

	while(1){
		//USART0_Print("Starting...");
		if(USART_0_is_rx_ready()){
			while(USART_0_is_rx_ready()){
 196:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <USART_0_is_rx_ready>
 19a:	81 11       	cpse	r24, r1
 19c:	e5 cf       	rjmp	.-54     	; 0x168 <main+0x2c>
 19e:	df cf       	rjmp	.-66     	; 0x15e <main+0x22>

000001a0 <PWM_0_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 1a0:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 1a2:	29 98       	cbi	0x05, 1	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PWM_0_init();
 1a4:	0e 94 11 01 	call	0x222	; 0x222 <PWM_0_init>
 1a8:	08 95       	ret

000001aa <PWM_1_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 1aa:	52 9a       	sbi	0x0a, 2	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 1ac:	5a 98       	cbi	0x0b, 2	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PWM_1_init();
 1ae:	0e 94 33 01 	call	0x266	; 0x266 <PWM_1_init>
 1b2:	08 95       	ret

000001b4 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 1b4:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 1b6:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 1b8:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 1ba:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 1bc:	0e 94 55 01 	call	0x2aa	; 0x2aa <USART_0_init>
 1c0:	08 95       	ret

000001c2 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 1c2:	8d e3       	ldi	r24, 0x3D	; 61
 1c4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 1ce:	94 b1       	in	r25, 0x04	; 4
 1d0:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 1d2:	95 b1       	in	r25, 0x05	; 5
 1d4:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 1d6:	97 b1       	in	r25, 0x07	; 7
 1d8:	90 78       	andi	r25, 0x80	; 128
 1da:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 1dc:	98 b1       	in	r25, 0x08	; 8
 1de:	9f 67       	ori	r25, 0x7F	; 127
 1e0:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 1e2:	9a b1       	in	r25, 0x0a	; 10
 1e4:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 1e6:	9b b1       	in	r25, 0x0b	; 11
 1e8:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 1ea:	8d b1       	in	r24, 0x0d	; 13
 1ec:	80 7f       	andi	r24, 0xF0	; 240
 1ee:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 1f0:	8e b1       	in	r24, 0x0e	; 14
 1f2:	8f 60       	ori	r24, 0x0F	; 15
 1f4:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	60 e8       	ldi	r22, 0x80	; 128
 1fa:	81 e6       	ldi	r24, 0x61	; 97
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 0a 01 	call	0x214	; 0x214 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 202:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 204:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	PWM_0_initialization();
 206:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <PWM_0_initialization>

	PWM_1_initialization();
 20a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PWM_1_initialization>

	USART_0_initialization();
 20e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_0_initialization>
 212:	08 95       	ret

00000214 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 214:	2f b7       	in	r18, 0x3f	; 63
	cli
 216:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 218:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 21a:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 21c:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 21e:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 220:	08 95       	ret

00000222 <PWM_0_init>:
 *
 * \return Nothing.
 */
void PWM_1_register_callback(pwm_irq_cb_t f)
{
	PWM_1_cb = f;
 222:	e4 e6       	ldi	r30, 0x64	; 100
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	87 7f       	andi	r24, 0xF7	; 247
 22a:	80 83       	st	Z, r24
 22c:	83 e2       	ldi	r24, 0x23	; 35
 22e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 232:	81 e1       	ldi	r24, 0x11	; 17
 234:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	08 95       	ret

00000242 <__vector_13>:
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	8f 93       	push	r24
 24e:	16 ba       	out	0x16, r1	; 22
 250:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <callback_count.1842>
 254:	8f 5f       	subi	r24, 0xFF	; 255
 256:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <callback_count.1842>
 25a:	8f 91       	pop	r24
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <PWM_1_init>:
 266:	e5 e6       	ldi	r30, 0x65	; 101
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	8e 7f       	andi	r24, 0xFE	; 254
 26e:	80 83       	st	Z, r24
 270:	83 e2       	ldi	r24, 0x23	; 35
 272:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 276:	81 e1       	ldi	r24, 0x11	; 17
 278:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret

00000286 <__vector_35>:
}

ISR(TIMER3_OVF_vect)
{
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TIFR3 = TOV3;
 292:	18 ba       	out	0x18, r1	; 24

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_1_INTERRUPT_CB_RATE) && (PWM_1_INTERRUPT_CB_RATE != 0)) {
 294:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		if (PWM_1_cb != NULL) {
			PWM_1_cb();
		}
	}
}
 29e:	8f 91       	pop	r24
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <USART_0_init>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
	return (!(UCSR0A & (1 << TXC0)));
}
 2aa:	e4 e6       	ldi	r30, 0x64	; 100
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	8d 7f       	andi	r24, 0xFD	; 253
 2b2:	80 83       	st	Z, r24
 2b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2b8:	8c e0       	ldi	r24, 0x0C	; 12
 2ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2be:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2c2:	88 e9       	ldi	r24, 0x98	; 152
 2c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__iob+0x3>
 2d0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__iob+0x2>
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret

000002d8 <USART_0_is_rx_ready>:
 2d8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2dc:	88 1f       	adc	r24, r24
 2de:	88 27       	eor	r24, r24
 2e0:	88 1f       	adc	r24, r24
 2e2:	08 95       	ret

000002e4 <USART_0_read>:
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
 2e4:	e0 ec       	ldi	r30, 0xC0	; 192
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	88 23       	and	r24, r24
 2ec:	ec f7       	brge	.-6      	; 0x2e8 <USART_0_read+0x4>
		;
	return UDR0;
 2ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 2f2:	08 95       	ret

000002f4 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 2f4:	e0 ec       	ldi	r30, 0xC0	; 192
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	90 81       	ld	r25, Z
 2fa:	95 ff       	sbrs	r25, 5
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <USART_0_write+0x4>
		;
	UDR0 = data;
 2fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 302:	08 95       	ret

00000304 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 304:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART_0_write>
	return 0;
}
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	08 95       	ret

0000030e <sprintf>:
 30e:	ae e0       	ldi	r26, 0x0E	; 14
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	ed e8       	ldi	r30, 0x8D	; 141
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	0c 94 48 04 	jmp	0x890	; 0x890 <__prologue_saves__+0x1c>
 31a:	0d 89       	ldd	r16, Y+21	; 0x15
 31c:	1e 89       	ldd	r17, Y+22	; 0x16
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	8c 83       	std	Y+4, r24	; 0x04
 322:	1a 83       	std	Y+2, r17	; 0x02
 324:	09 83       	std	Y+1, r16	; 0x01
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	9f e7       	ldi	r25, 0x7F	; 127
 32a:	9e 83       	std	Y+6, r25	; 0x06
 32c:	8d 83       	std	Y+5, r24	; 0x05
 32e:	ae 01       	movw	r20, r28
 330:	47 5e       	subi	r20, 0xE7	; 231
 332:	5f 4f       	sbci	r21, 0xFF	; 255
 334:	6f 89       	ldd	r22, Y+23	; 0x17
 336:	78 8d       	ldd	r23, Y+24	; 0x18
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	0e 94 a9 01 	call	0x352	; 0x352 <vfprintf>
 340:	ef 81       	ldd	r30, Y+7	; 0x07
 342:	f8 85       	ldd	r31, Y+8	; 0x08
 344:	e0 0f       	add	r30, r16
 346:	f1 1f       	adc	r31, r17
 348:	10 82       	st	Z, r1
 34a:	2e 96       	adiw	r28, 0x0e	; 14
 34c:	e4 e0       	ldi	r30, 0x04	; 4
 34e:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__epilogue_restores__+0x1c>

00000352 <vfprintf>:
 352:	ab e0       	ldi	r26, 0x0B	; 11
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	ef ea       	ldi	r30, 0xAF	; 175
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	0c 94 3a 04 	jmp	0x874	; 0x874 <__prologue_saves__>
 35e:	6c 01       	movw	r12, r24
 360:	7b 01       	movw	r14, r22
 362:	8a 01       	movw	r16, r20
 364:	fc 01       	movw	r30, r24
 366:	17 82       	std	Z+7, r1	; 0x07
 368:	16 82       	std	Z+6, r1	; 0x06
 36a:	83 81       	ldd	r24, Z+3	; 0x03
 36c:	81 ff       	sbrs	r24, 1
 36e:	cc c1       	rjmp	.+920    	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 370:	ce 01       	movw	r24, r28
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	3c 01       	movw	r6, r24
 376:	f6 01       	movw	r30, r12
 378:	93 81       	ldd	r25, Z+3	; 0x03
 37a:	f7 01       	movw	r30, r14
 37c:	93 fd       	sbrc	r25, 3
 37e:	85 91       	lpm	r24, Z+
 380:	93 ff       	sbrs	r25, 3
 382:	81 91       	ld	r24, Z+
 384:	7f 01       	movw	r14, r30
 386:	88 23       	and	r24, r24
 388:	09 f4       	brne	.+2      	; 0x38c <vfprintf+0x3a>
 38a:	ba c1       	rjmp	.+884    	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 38c:	85 32       	cpi	r24, 0x25	; 37
 38e:	39 f4       	brne	.+14     	; 0x39e <vfprintf+0x4c>
 390:	93 fd       	sbrc	r25, 3
 392:	85 91       	lpm	r24, Z+
 394:	93 ff       	sbrs	r25, 3
 396:	81 91       	ld	r24, Z+
 398:	7f 01       	movw	r14, r30
 39a:	85 32       	cpi	r24, 0x25	; 37
 39c:	29 f4       	brne	.+10     	; 0x3a8 <vfprintf+0x56>
 39e:	b6 01       	movw	r22, r12
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 a0 03 	call	0x740	; 0x740 <fputc>
 3a6:	e7 cf       	rjmp	.-50     	; 0x376 <vfprintf+0x24>
 3a8:	91 2c       	mov	r9, r1
 3aa:	21 2c       	mov	r2, r1
 3ac:	31 2c       	mov	r3, r1
 3ae:	ff e1       	ldi	r31, 0x1F	; 31
 3b0:	f3 15       	cp	r31, r3
 3b2:	d8 f0       	brcs	.+54     	; 0x3ea <vfprintf+0x98>
 3b4:	8b 32       	cpi	r24, 0x2B	; 43
 3b6:	79 f0       	breq	.+30     	; 0x3d6 <vfprintf+0x84>
 3b8:	38 f4       	brcc	.+14     	; 0x3c8 <vfprintf+0x76>
 3ba:	80 32       	cpi	r24, 0x20	; 32
 3bc:	79 f0       	breq	.+30     	; 0x3dc <vfprintf+0x8a>
 3be:	83 32       	cpi	r24, 0x23	; 35
 3c0:	a1 f4       	brne	.+40     	; 0x3ea <vfprintf+0x98>
 3c2:	23 2d       	mov	r18, r3
 3c4:	20 61       	ori	r18, 0x10	; 16
 3c6:	1d c0       	rjmp	.+58     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3c8:	8d 32       	cpi	r24, 0x2D	; 45
 3ca:	61 f0       	breq	.+24     	; 0x3e4 <vfprintf+0x92>
 3cc:	80 33       	cpi	r24, 0x30	; 48
 3ce:	69 f4       	brne	.+26     	; 0x3ea <vfprintf+0x98>
 3d0:	23 2d       	mov	r18, r3
 3d2:	21 60       	ori	r18, 0x01	; 1
 3d4:	16 c0       	rjmp	.+44     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3d6:	83 2d       	mov	r24, r3
 3d8:	82 60       	ori	r24, 0x02	; 2
 3da:	38 2e       	mov	r3, r24
 3dc:	e3 2d       	mov	r30, r3
 3de:	e4 60       	ori	r30, 0x04	; 4
 3e0:	3e 2e       	mov	r3, r30
 3e2:	2a c0       	rjmp	.+84     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3e4:	f3 2d       	mov	r31, r3
 3e6:	f8 60       	ori	r31, 0x08	; 8
 3e8:	1d c0       	rjmp	.+58     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3ea:	37 fc       	sbrc	r3, 7
 3ec:	2d c0       	rjmp	.+90     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3ee:	20 ed       	ldi	r18, 0xD0	; 208
 3f0:	28 0f       	add	r18, r24
 3f2:	2a 30       	cpi	r18, 0x0A	; 10
 3f4:	40 f0       	brcs	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f6:	8e 32       	cpi	r24, 0x2E	; 46
 3f8:	b9 f4       	brne	.+46     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3fa:	36 fc       	sbrc	r3, 6
 3fc:	81 c1       	rjmp	.+770    	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 3fe:	23 2d       	mov	r18, r3
 400:	20 64       	ori	r18, 0x40	; 64
 402:	32 2e       	mov	r3, r18
 404:	19 c0       	rjmp	.+50     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 406:	36 fe       	sbrs	r3, 6
 408:	06 c0       	rjmp	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40a:	8a e0       	ldi	r24, 0x0A	; 10
 40c:	98 9e       	mul	r9, r24
 40e:	20 0d       	add	r18, r0
 410:	11 24       	eor	r1, r1
 412:	92 2e       	mov	r9, r18
 414:	11 c0       	rjmp	.+34     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 416:	ea e0       	ldi	r30, 0x0A	; 10
 418:	2e 9e       	mul	r2, r30
 41a:	20 0d       	add	r18, r0
 41c:	11 24       	eor	r1, r1
 41e:	22 2e       	mov	r2, r18
 420:	f3 2d       	mov	r31, r3
 422:	f0 62       	ori	r31, 0x20	; 32
 424:	3f 2e       	mov	r3, r31
 426:	08 c0       	rjmp	.+16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 428:	8c 36       	cpi	r24, 0x6C	; 108
 42a:	21 f4       	brne	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42c:	83 2d       	mov	r24, r3
 42e:	80 68       	ori	r24, 0x80	; 128
 430:	38 2e       	mov	r3, r24
 432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 434:	88 36       	cpi	r24, 0x68	; 104
 436:	41 f4       	brne	.+16     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 438:	f7 01       	movw	r30, r14
 43a:	93 fd       	sbrc	r25, 3
 43c:	85 91       	lpm	r24, Z+
 43e:	93 ff       	sbrs	r25, 3
 440:	81 91       	ld	r24, Z+
 442:	7f 01       	movw	r14, r30
 444:	81 11       	cpse	r24, r1
 446:	b3 cf       	rjmp	.-154    	; 0x3ae <vfprintf+0x5c>
 448:	98 2f       	mov	r25, r24
 44a:	9f 7d       	andi	r25, 0xDF	; 223
 44c:	95 54       	subi	r25, 0x45	; 69
 44e:	93 30       	cpi	r25, 0x03	; 3
 450:	28 f4       	brcc	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 452:	0c 5f       	subi	r16, 0xFC	; 252
 454:	1f 4f       	sbci	r17, 0xFF	; 255
 456:	9f e3       	ldi	r25, 0x3F	; 63
 458:	99 83       	std	Y+1, r25	; 0x01
 45a:	0d c0       	rjmp	.+26     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 45c:	83 36       	cpi	r24, 0x63	; 99
 45e:	31 f0       	breq	.+12     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 460:	83 37       	cpi	r24, 0x73	; 115
 462:	71 f0       	breq	.+28     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 464:	83 35       	cpi	r24, 0x53	; 83
 466:	09 f0       	breq	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	59 c0       	rjmp	.+178    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 46a:	21 c0       	rjmp	.+66     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 46c:	f8 01       	movw	r30, r16
 46e:	80 81       	ld	r24, Z
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	0e 5f       	subi	r16, 0xFE	; 254
 474:	1f 4f       	sbci	r17, 0xFF	; 255
 476:	88 24       	eor	r8, r8
 478:	83 94       	inc	r8
 47a:	91 2c       	mov	r9, r1
 47c:	53 01       	movw	r10, r6
 47e:	13 c0       	rjmp	.+38     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 480:	28 01       	movw	r4, r16
 482:	f2 e0       	ldi	r31, 0x02	; 2
 484:	4f 0e       	add	r4, r31
 486:	51 1c       	adc	r5, r1
 488:	f8 01       	movw	r30, r16
 48a:	a0 80       	ld	r10, Z
 48c:	b1 80       	ldd	r11, Z+1	; 0x01
 48e:	36 fe       	sbrs	r3, 6
 490:	03 c0       	rjmp	.+6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 492:	69 2d       	mov	r22, r9
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 498:	6f ef       	ldi	r22, 0xFF	; 255
 49a:	7f ef       	ldi	r23, 0xFF	; 255
 49c:	c5 01       	movw	r24, r10
 49e:	0e 94 95 03 	call	0x72a	; 0x72a <strnlen>
 4a2:	4c 01       	movw	r8, r24
 4a4:	82 01       	movw	r16, r4
 4a6:	f3 2d       	mov	r31, r3
 4a8:	ff 77       	andi	r31, 0x7F	; 127
 4aa:	3f 2e       	mov	r3, r31
 4ac:	16 c0       	rjmp	.+44     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ae:	28 01       	movw	r4, r16
 4b0:	22 e0       	ldi	r18, 0x02	; 2
 4b2:	42 0e       	add	r4, r18
 4b4:	51 1c       	adc	r5, r1
 4b6:	f8 01       	movw	r30, r16
 4b8:	a0 80       	ld	r10, Z
 4ba:	b1 80       	ldd	r11, Z+1	; 0x01
 4bc:	36 fe       	sbrs	r3, 6
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c0:	69 2d       	mov	r22, r9
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c6:	6f ef       	ldi	r22, 0xFF	; 255
 4c8:	7f ef       	ldi	r23, 0xFF	; 255
 4ca:	c5 01       	movw	r24, r10
 4cc:	0e 94 8a 03 	call	0x714	; 0x714 <strnlen_P>
 4d0:	4c 01       	movw	r8, r24
 4d2:	f3 2d       	mov	r31, r3
 4d4:	f0 68       	ori	r31, 0x80	; 128
 4d6:	3f 2e       	mov	r3, r31
 4d8:	82 01       	movw	r16, r4
 4da:	33 fc       	sbrc	r3, 3
 4dc:	1b c0       	rjmp	.+54     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4de:	82 2d       	mov	r24, r2
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	88 16       	cp	r8, r24
 4e4:	99 06       	cpc	r9, r25
 4e6:	b0 f4       	brcc	.+44     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4e8:	b6 01       	movw	r22, r12
 4ea:	80 e2       	ldi	r24, 0x20	; 32
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 a0 03 	call	0x740	; 0x740 <fputc>
 4f2:	2a 94       	dec	r2
 4f4:	f4 cf       	rjmp	.-24     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4f6:	f5 01       	movw	r30, r10
 4f8:	37 fc       	sbrc	r3, 7
 4fa:	85 91       	lpm	r24, Z+
 4fc:	37 fe       	sbrs	r3, 7
 4fe:	81 91       	ld	r24, Z+
 500:	5f 01       	movw	r10, r30
 502:	b6 01       	movw	r22, r12
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 a0 03 	call	0x740	; 0x740 <fputc>
 50a:	21 10       	cpse	r2, r1
 50c:	2a 94       	dec	r2
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	82 1a       	sub	r8, r18
 512:	91 08       	sbc	r9, r1
 514:	81 14       	cp	r8, r1
 516:	91 04       	cpc	r9, r1
 518:	71 f7       	brne	.-36     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 51a:	e8 c0       	rjmp	.+464    	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 51c:	84 36       	cpi	r24, 0x64	; 100
 51e:	11 f0       	breq	.+4      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 520:	89 36       	cpi	r24, 0x69	; 105
 522:	41 f5       	brne	.+80     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 524:	f8 01       	movw	r30, r16
 526:	37 fe       	sbrs	r3, 7
 528:	07 c0       	rjmp	.+14     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 52a:	60 81       	ld	r22, Z
 52c:	71 81       	ldd	r23, Z+1	; 0x01
 52e:	82 81       	ldd	r24, Z+2	; 0x02
 530:	93 81       	ldd	r25, Z+3	; 0x03
 532:	0c 5f       	subi	r16, 0xFC	; 252
 534:	1f 4f       	sbci	r17, 0xFF	; 255
 536:	08 c0       	rjmp	.+16     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 538:	60 81       	ld	r22, Z
 53a:	71 81       	ldd	r23, Z+1	; 0x01
 53c:	07 2e       	mov	r0, r23
 53e:	00 0c       	add	r0, r0
 540:	88 0b       	sbc	r24, r24
 542:	99 0b       	sbc	r25, r25
 544:	0e 5f       	subi	r16, 0xFE	; 254
 546:	1f 4f       	sbci	r17, 0xFF	; 255
 548:	f3 2d       	mov	r31, r3
 54a:	ff 76       	andi	r31, 0x6F	; 111
 54c:	3f 2e       	mov	r3, r31
 54e:	97 ff       	sbrs	r25, 7
 550:	09 c0       	rjmp	.+18     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 552:	90 95       	com	r25
 554:	80 95       	com	r24
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	f0 68       	ori	r31, 0x80	; 128
 562:	3f 2e       	mov	r3, r31
 564:	2a e0       	ldi	r18, 0x0A	; 10
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	a3 01       	movw	r20, r6
 56a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__ultoa_invert>
 56e:	88 2e       	mov	r8, r24
 570:	86 18       	sub	r8, r6
 572:	45 c0       	rjmp	.+138    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 574:	85 37       	cpi	r24, 0x75	; 117
 576:	31 f4       	brne	.+12     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 578:	23 2d       	mov	r18, r3
 57a:	2f 7e       	andi	r18, 0xEF	; 239
 57c:	b2 2e       	mov	r11, r18
 57e:	2a e0       	ldi	r18, 0x0A	; 10
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	25 c0       	rjmp	.+74     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 584:	93 2d       	mov	r25, r3
 586:	99 7f       	andi	r25, 0xF9	; 249
 588:	b9 2e       	mov	r11, r25
 58a:	8f 36       	cpi	r24, 0x6F	; 111
 58c:	c1 f0       	breq	.+48     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 58e:	18 f4       	brcc	.+6      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 590:	88 35       	cpi	r24, 0x58	; 88
 592:	79 f0       	breq	.+30     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 594:	b5 c0       	rjmp	.+362    	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 596:	80 37       	cpi	r24, 0x70	; 112
 598:	19 f0       	breq	.+6      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 59a:	88 37       	cpi	r24, 0x78	; 120
 59c:	21 f0       	breq	.+8      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 59e:	b0 c0       	rjmp	.+352    	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 5a0:	e9 2f       	mov	r30, r25
 5a2:	e0 61       	ori	r30, 0x10	; 16
 5a4:	be 2e       	mov	r11, r30
 5a6:	b4 fe       	sbrs	r11, 4
 5a8:	0d c0       	rjmp	.+26     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5aa:	fb 2d       	mov	r31, r11
 5ac:	f4 60       	ori	r31, 0x04	; 4
 5ae:	bf 2e       	mov	r11, r31
 5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5b2:	34 fe       	sbrs	r3, 4
 5b4:	0a c0       	rjmp	.+20     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5b6:	29 2f       	mov	r18, r25
 5b8:	26 60       	ori	r18, 0x06	; 6
 5ba:	b2 2e       	mov	r11, r18
 5bc:	06 c0       	rjmp	.+12     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5be:	28 e0       	ldi	r18, 0x08	; 8
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	05 c0       	rjmp	.+10     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c4:	20 e1       	ldi	r18, 0x10	; 16
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5ca:	20 e1       	ldi	r18, 0x10	; 16
 5cc:	32 e0       	ldi	r19, 0x02	; 2
 5ce:	f8 01       	movw	r30, r16
 5d0:	b7 fe       	sbrs	r11, 7
 5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5d4:	60 81       	ld	r22, Z
 5d6:	71 81       	ldd	r23, Z+1	; 0x01
 5d8:	82 81       	ldd	r24, Z+2	; 0x02
 5da:	93 81       	ldd	r25, Z+3	; 0x03
 5dc:	0c 5f       	subi	r16, 0xFC	; 252
 5de:	1f 4f       	sbci	r17, 0xFF	; 255
 5e0:	06 c0       	rjmp	.+12     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5e2:	60 81       	ld	r22, Z
 5e4:	71 81       	ldd	r23, Z+1	; 0x01
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 5f       	subi	r16, 0xFE	; 254
 5ec:	1f 4f       	sbci	r17, 0xFF	; 255
 5ee:	a3 01       	movw	r20, r6
 5f0:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__ultoa_invert>
 5f4:	88 2e       	mov	r8, r24
 5f6:	86 18       	sub	r8, r6
 5f8:	fb 2d       	mov	r31, r11
 5fa:	ff 77       	andi	r31, 0x7F	; 127
 5fc:	3f 2e       	mov	r3, r31
 5fe:	36 fe       	sbrs	r3, 6
 600:	0d c0       	rjmp	.+26     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 602:	23 2d       	mov	r18, r3
 604:	2e 7f       	andi	r18, 0xFE	; 254
 606:	a2 2e       	mov	r10, r18
 608:	89 14       	cp	r8, r9
 60a:	58 f4       	brcc	.+22     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 60c:	34 fe       	sbrs	r3, 4
 60e:	0b c0       	rjmp	.+22     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 610:	32 fc       	sbrc	r3, 2
 612:	09 c0       	rjmp	.+18     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 614:	83 2d       	mov	r24, r3
 616:	8e 7e       	andi	r24, 0xEE	; 238
 618:	a8 2e       	mov	r10, r24
 61a:	05 c0       	rjmp	.+10     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 61c:	b8 2c       	mov	r11, r8
 61e:	a3 2c       	mov	r10, r3
 620:	03 c0       	rjmp	.+6      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 622:	b8 2c       	mov	r11, r8
 624:	01 c0       	rjmp	.+2      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 626:	b9 2c       	mov	r11, r9
 628:	a4 fe       	sbrs	r10, 4
 62a:	0f c0       	rjmp	.+30     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 62c:	fe 01       	movw	r30, r28
 62e:	e8 0d       	add	r30, r8
 630:	f1 1d       	adc	r31, r1
 632:	80 81       	ld	r24, Z
 634:	80 33       	cpi	r24, 0x30	; 48
 636:	21 f4       	brne	.+8      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 638:	9a 2d       	mov	r25, r10
 63a:	99 7e       	andi	r25, 0xE9	; 233
 63c:	a9 2e       	mov	r10, r25
 63e:	09 c0       	rjmp	.+18     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 640:	a2 fe       	sbrs	r10, 2
 642:	06 c0       	rjmp	.+12     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 644:	b3 94       	inc	r11
 646:	b3 94       	inc	r11
 648:	04 c0       	rjmp	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64a:	8a 2d       	mov	r24, r10
 64c:	86 78       	andi	r24, 0x86	; 134
 64e:	09 f0       	breq	.+2      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 650:	b3 94       	inc	r11
 652:	a3 fc       	sbrc	r10, 3
 654:	11 c0       	rjmp	.+34     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 656:	a0 fe       	sbrs	r10, 0
 658:	06 c0       	rjmp	.+12     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 65a:	b2 14       	cp	r11, r2
 65c:	88 f4       	brcc	.+34     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
 65e:	28 0c       	add	r2, r8
 660:	92 2c       	mov	r9, r2
 662:	9b 18       	sub	r9, r11
 664:	0e c0       	rjmp	.+28     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 666:	b2 14       	cp	r11, r2
 668:	60 f4       	brcc	.+24     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 66a:	b6 01       	movw	r22, r12
 66c:	80 e2       	ldi	r24, 0x20	; 32
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 a0 03 	call	0x740	; 0x740 <fputc>
 674:	b3 94       	inc	r11
 676:	f7 cf       	rjmp	.-18     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 678:	b2 14       	cp	r11, r2
 67a:	18 f4       	brcc	.+6      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 67c:	2b 18       	sub	r2, r11
 67e:	02 c0       	rjmp	.+4      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 680:	98 2c       	mov	r9, r8
 682:	21 2c       	mov	r2, r1
 684:	a4 fe       	sbrs	r10, 4
 686:	10 c0       	rjmp	.+32     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 688:	b6 01       	movw	r22, r12
 68a:	80 e3       	ldi	r24, 0x30	; 48
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 a0 03 	call	0x740	; 0x740 <fputc>
 692:	a2 fe       	sbrs	r10, 2
 694:	17 c0       	rjmp	.+46     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 696:	a1 fc       	sbrc	r10, 1
 698:	03 c0       	rjmp	.+6      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 69a:	88 e7       	ldi	r24, 0x78	; 120
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 6a0:	88 e5       	ldi	r24, 0x58	; 88
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	b6 01       	movw	r22, r12
 6a6:	0c c0       	rjmp	.+24     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6a8:	8a 2d       	mov	r24, r10
 6aa:	86 78       	andi	r24, 0x86	; 134
 6ac:	59 f0       	breq	.+22     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6ae:	a1 fe       	sbrs	r10, 1
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 6b2:	8b e2       	ldi	r24, 0x2B	; 43
 6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6b6:	80 e2       	ldi	r24, 0x20	; 32
 6b8:	a7 fc       	sbrc	r10, 7
 6ba:	8d e2       	ldi	r24, 0x2D	; 45
 6bc:	b6 01       	movw	r22, r12
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 a0 03 	call	0x740	; 0x740 <fputc>
 6c4:	89 14       	cp	r8, r9
 6c6:	38 f4       	brcc	.+14     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6c8:	b6 01       	movw	r22, r12
 6ca:	80 e3       	ldi	r24, 0x30	; 48
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 a0 03 	call	0x740	; 0x740 <fputc>
 6d2:	9a 94       	dec	r9
 6d4:	f7 cf       	rjmp	.-18     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6d6:	8a 94       	dec	r8
 6d8:	f3 01       	movw	r30, r6
 6da:	e8 0d       	add	r30, r8
 6dc:	f1 1d       	adc	r31, r1
 6de:	80 81       	ld	r24, Z
 6e0:	b6 01       	movw	r22, r12
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 a0 03 	call	0x740	; 0x740 <fputc>
 6e8:	81 10       	cpse	r8, r1
 6ea:	f5 cf       	rjmp	.-22     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6ec:	22 20       	and	r2, r2
 6ee:	09 f4       	brne	.+2      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6f0:	42 ce       	rjmp	.-892    	; 0x376 <vfprintf+0x24>
 6f2:	b6 01       	movw	r22, r12
 6f4:	80 e2       	ldi	r24, 0x20	; 32
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 a0 03 	call	0x740	; 0x740 <fputc>
 6fc:	2a 94       	dec	r2
 6fe:	f6 cf       	rjmp	.-20     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 700:	f6 01       	movw	r30, r12
 702:	86 81       	ldd	r24, Z+6	; 0x06
 704:	97 81       	ldd	r25, Z+7	; 0x07
 706:	02 c0       	rjmp	.+4      	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	9f ef       	ldi	r25, 0xFF	; 255
 70c:	2b 96       	adiw	r28, 0x0b	; 11
 70e:	e2 e1       	ldi	r30, 0x12	; 18
 710:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__epilogue_restores__>

00000714 <strnlen_P>:
 714:	fc 01       	movw	r30, r24
 716:	05 90       	lpm	r0, Z+
 718:	61 50       	subi	r22, 0x01	; 1
 71a:	70 40       	sbci	r23, 0x00	; 0
 71c:	01 10       	cpse	r0, r1
 71e:	d8 f7       	brcc	.-10     	; 0x716 <strnlen_P+0x2>
 720:	80 95       	com	r24
 722:	90 95       	com	r25
 724:	8e 0f       	add	r24, r30
 726:	9f 1f       	adc	r25, r31
 728:	08 95       	ret

0000072a <strnlen>:
 72a:	fc 01       	movw	r30, r24
 72c:	61 50       	subi	r22, 0x01	; 1
 72e:	70 40       	sbci	r23, 0x00	; 0
 730:	01 90       	ld	r0, Z+
 732:	01 10       	cpse	r0, r1
 734:	d8 f7       	brcc	.-10     	; 0x72c <strnlen+0x2>
 736:	80 95       	com	r24
 738:	90 95       	com	r25
 73a:	8e 0f       	add	r24, r30
 73c:	9f 1f       	adc	r25, r31
 73e:	08 95       	ret

00000740 <fputc>:
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	fb 01       	movw	r30, r22
 74a:	23 81       	ldd	r18, Z+3	; 0x03
 74c:	21 fd       	sbrc	r18, 1
 74e:	03 c0       	rjmp	.+6      	; 0x756 <fputc+0x16>
 750:	8f ef       	ldi	r24, 0xFF	; 255
 752:	9f ef       	ldi	r25, 0xFF	; 255
 754:	2c c0       	rjmp	.+88     	; 0x7ae <fputc+0x6e>
 756:	22 ff       	sbrs	r18, 2
 758:	16 c0       	rjmp	.+44     	; 0x786 <fputc+0x46>
 75a:	46 81       	ldd	r20, Z+6	; 0x06
 75c:	57 81       	ldd	r21, Z+7	; 0x07
 75e:	24 81       	ldd	r18, Z+4	; 0x04
 760:	35 81       	ldd	r19, Z+5	; 0x05
 762:	42 17       	cp	r20, r18
 764:	53 07       	cpc	r21, r19
 766:	44 f4       	brge	.+16     	; 0x778 <fputc+0x38>
 768:	a0 81       	ld	r26, Z
 76a:	b1 81       	ldd	r27, Z+1	; 0x01
 76c:	9d 01       	movw	r18, r26
 76e:	2f 5f       	subi	r18, 0xFF	; 255
 770:	3f 4f       	sbci	r19, 0xFF	; 255
 772:	31 83       	std	Z+1, r19	; 0x01
 774:	20 83       	st	Z, r18
 776:	8c 93       	st	X, r24
 778:	26 81       	ldd	r18, Z+6	; 0x06
 77a:	37 81       	ldd	r19, Z+7	; 0x07
 77c:	2f 5f       	subi	r18, 0xFF	; 255
 77e:	3f 4f       	sbci	r19, 0xFF	; 255
 780:	37 83       	std	Z+7, r19	; 0x07
 782:	26 83       	std	Z+6, r18	; 0x06
 784:	14 c0       	rjmp	.+40     	; 0x7ae <fputc+0x6e>
 786:	8b 01       	movw	r16, r22
 788:	ec 01       	movw	r28, r24
 78a:	fb 01       	movw	r30, r22
 78c:	00 84       	ldd	r0, Z+8	; 0x08
 78e:	f1 85       	ldd	r31, Z+9	; 0x09
 790:	e0 2d       	mov	r30, r0
 792:	09 95       	icall
 794:	89 2b       	or	r24, r25
 796:	e1 f6       	brne	.-72     	; 0x750 <fputc+0x10>
 798:	d8 01       	movw	r26, r16
 79a:	16 96       	adiw	r26, 0x06	; 6
 79c:	8d 91       	ld	r24, X+
 79e:	9c 91       	ld	r25, X
 7a0:	17 97       	sbiw	r26, 0x07	; 7
 7a2:	01 96       	adiw	r24, 0x01	; 1
 7a4:	17 96       	adiw	r26, 0x07	; 7
 7a6:	9c 93       	st	X, r25
 7a8:	8e 93       	st	-X, r24
 7aa:	16 97       	sbiw	r26, 0x06	; 6
 7ac:	ce 01       	movw	r24, r28
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	1f 91       	pop	r17
 7b4:	0f 91       	pop	r16
 7b6:	08 95       	ret

000007b8 <__ultoa_invert>:
 7b8:	fa 01       	movw	r30, r20
 7ba:	aa 27       	eor	r26, r26
 7bc:	28 30       	cpi	r18, 0x08	; 8
 7be:	51 f1       	breq	.+84     	; 0x814 <__ultoa_invert+0x5c>
 7c0:	20 31       	cpi	r18, 0x10	; 16
 7c2:	81 f1       	breq	.+96     	; 0x824 <__ultoa_invert+0x6c>
 7c4:	e8 94       	clt
 7c6:	6f 93       	push	r22
 7c8:	6e 7f       	andi	r22, 0xFE	; 254
 7ca:	6e 5f       	subi	r22, 0xFE	; 254
 7cc:	7f 4f       	sbci	r23, 0xFF	; 255
 7ce:	8f 4f       	sbci	r24, 0xFF	; 255
 7d0:	9f 4f       	sbci	r25, 0xFF	; 255
 7d2:	af 4f       	sbci	r26, 0xFF	; 255
 7d4:	b1 e0       	ldi	r27, 0x01	; 1
 7d6:	3e d0       	rcall	.+124    	; 0x854 <__ultoa_invert+0x9c>
 7d8:	b4 e0       	ldi	r27, 0x04	; 4
 7da:	3c d0       	rcall	.+120    	; 0x854 <__ultoa_invert+0x9c>
 7dc:	67 0f       	add	r22, r23
 7de:	78 1f       	adc	r23, r24
 7e0:	89 1f       	adc	r24, r25
 7e2:	9a 1f       	adc	r25, r26
 7e4:	a1 1d       	adc	r26, r1
 7e6:	68 0f       	add	r22, r24
 7e8:	79 1f       	adc	r23, r25
 7ea:	8a 1f       	adc	r24, r26
 7ec:	91 1d       	adc	r25, r1
 7ee:	a1 1d       	adc	r26, r1
 7f0:	6a 0f       	add	r22, r26
 7f2:	71 1d       	adc	r23, r1
 7f4:	81 1d       	adc	r24, r1
 7f6:	91 1d       	adc	r25, r1
 7f8:	a1 1d       	adc	r26, r1
 7fa:	20 d0       	rcall	.+64     	; 0x83c <__ultoa_invert+0x84>
 7fc:	09 f4       	brne	.+2      	; 0x800 <__ultoa_invert+0x48>
 7fe:	68 94       	set
 800:	3f 91       	pop	r19
 802:	2a e0       	ldi	r18, 0x0A	; 10
 804:	26 9f       	mul	r18, r22
 806:	11 24       	eor	r1, r1
 808:	30 19       	sub	r19, r0
 80a:	30 5d       	subi	r19, 0xD0	; 208
 80c:	31 93       	st	Z+, r19
 80e:	de f6       	brtc	.-74     	; 0x7c6 <__ultoa_invert+0xe>
 810:	cf 01       	movw	r24, r30
 812:	08 95       	ret
 814:	46 2f       	mov	r20, r22
 816:	47 70       	andi	r20, 0x07	; 7
 818:	40 5d       	subi	r20, 0xD0	; 208
 81a:	41 93       	st	Z+, r20
 81c:	b3 e0       	ldi	r27, 0x03	; 3
 81e:	0f d0       	rcall	.+30     	; 0x83e <__ultoa_invert+0x86>
 820:	c9 f7       	brne	.-14     	; 0x814 <__ultoa_invert+0x5c>
 822:	f6 cf       	rjmp	.-20     	; 0x810 <__ultoa_invert+0x58>
 824:	46 2f       	mov	r20, r22
 826:	4f 70       	andi	r20, 0x0F	; 15
 828:	40 5d       	subi	r20, 0xD0	; 208
 82a:	4a 33       	cpi	r20, 0x3A	; 58
 82c:	18 f0       	brcs	.+6      	; 0x834 <__ultoa_invert+0x7c>
 82e:	49 5d       	subi	r20, 0xD9	; 217
 830:	31 fd       	sbrc	r19, 1
 832:	40 52       	subi	r20, 0x20	; 32
 834:	41 93       	st	Z+, r20
 836:	02 d0       	rcall	.+4      	; 0x83c <__ultoa_invert+0x84>
 838:	a9 f7       	brne	.-22     	; 0x824 <__ultoa_invert+0x6c>
 83a:	ea cf       	rjmp	.-44     	; 0x810 <__ultoa_invert+0x58>
 83c:	b4 e0       	ldi	r27, 0x04	; 4
 83e:	a6 95       	lsr	r26
 840:	97 95       	ror	r25
 842:	87 95       	ror	r24
 844:	77 95       	ror	r23
 846:	67 95       	ror	r22
 848:	ba 95       	dec	r27
 84a:	c9 f7       	brne	.-14     	; 0x83e <__ultoa_invert+0x86>
 84c:	00 97       	sbiw	r24, 0x00	; 0
 84e:	61 05       	cpc	r22, r1
 850:	71 05       	cpc	r23, r1
 852:	08 95       	ret
 854:	9b 01       	movw	r18, r22
 856:	ac 01       	movw	r20, r24
 858:	0a 2e       	mov	r0, r26
 85a:	06 94       	lsr	r0
 85c:	57 95       	ror	r21
 85e:	47 95       	ror	r20
 860:	37 95       	ror	r19
 862:	27 95       	ror	r18
 864:	ba 95       	dec	r27
 866:	c9 f7       	brne	.-14     	; 0x85a <__ultoa_invert+0xa2>
 868:	62 0f       	add	r22, r18
 86a:	73 1f       	adc	r23, r19
 86c:	84 1f       	adc	r24, r20
 86e:	95 1f       	adc	r25, r21
 870:	a0 1d       	adc	r26, r0
 872:	08 95       	ret

00000874 <__prologue_saves__>:
 874:	2f 92       	push	r2
 876:	3f 92       	push	r3
 878:	4f 92       	push	r4
 87a:	5f 92       	push	r5
 87c:	6f 92       	push	r6
 87e:	7f 92       	push	r7
 880:	8f 92       	push	r8
 882:	9f 92       	push	r9
 884:	af 92       	push	r10
 886:	bf 92       	push	r11
 888:	cf 92       	push	r12
 88a:	df 92       	push	r13
 88c:	ef 92       	push	r14
 88e:	ff 92       	push	r15
 890:	0f 93       	push	r16
 892:	1f 93       	push	r17
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	cd b7       	in	r28, 0x3d	; 61
 89a:	de b7       	in	r29, 0x3e	; 62
 89c:	ca 1b       	sub	r28, r26
 89e:	db 0b       	sbc	r29, r27
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
 8aa:	09 94       	ijmp

000008ac <__epilogue_restores__>:
 8ac:	2a 88       	ldd	r2, Y+18	; 0x12
 8ae:	39 88       	ldd	r3, Y+17	; 0x11
 8b0:	48 88       	ldd	r4, Y+16	; 0x10
 8b2:	5f 84       	ldd	r5, Y+15	; 0x0f
 8b4:	6e 84       	ldd	r6, Y+14	; 0x0e
 8b6:	7d 84       	ldd	r7, Y+13	; 0x0d
 8b8:	8c 84       	ldd	r8, Y+12	; 0x0c
 8ba:	9b 84       	ldd	r9, Y+11	; 0x0b
 8bc:	aa 84       	ldd	r10, Y+10	; 0x0a
 8be:	b9 84       	ldd	r11, Y+9	; 0x09
 8c0:	c8 84       	ldd	r12, Y+8	; 0x08
 8c2:	df 80       	ldd	r13, Y+7	; 0x07
 8c4:	ee 80       	ldd	r14, Y+6	; 0x06
 8c6:	fd 80       	ldd	r15, Y+5	; 0x05
 8c8:	0c 81       	ldd	r16, Y+4	; 0x04
 8ca:	1b 81       	ldd	r17, Y+3	; 0x03
 8cc:	aa 81       	ldd	r26, Y+2	; 0x02
 8ce:	b9 81       	ldd	r27, Y+1	; 0x01
 8d0:	ce 0f       	add	r28, r30
 8d2:	d1 1d       	adc	r29, r1
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	de bf       	out	0x3e, r29	; 62
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	cd bf       	out	0x3d, r28	; 61
 8de:	ed 01       	movw	r28, r26
 8e0:	08 95       	ret

000008e2 <_exit>:
 8e2:	f8 94       	cli

000008e4 <__stop_program>:
 8e4:	ff cf       	rjmp	.-2      	; 0x8e4 <__stop_program>
