
Motor Controller Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000068e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000068e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000006e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aa6  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbb  00000000  00000000  00002406  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef0  00000000  00000000  000031c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  000040b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a27  00000000  00000000  000043d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066d  00000000  00000000  00004dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000546c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_9>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_16>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  6c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  70:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  74:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  7c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  80:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  84:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  88:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  8c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  90:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  94:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  98:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  9c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  ac:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  b0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  b4:	4e 01       	movw	r8, r28
  b6:	a4 01       	movw	r20, r8
  b8:	4e 01       	movw	r8, r28
  ba:	a4 01       	movw	r20, r8
  bc:	a4 01       	movw	r20, r8
  be:	a4 01       	movw	r20, r8
  c0:	a4 01       	movw	r20, r8
  c2:	a4 01       	movw	r20, r8
  c4:	a4 01       	movw	r20, r8
  c6:	a4 01       	movw	r20, r8
  c8:	a4 01       	movw	r20, r8
  ca:	a4 01       	movw	r20, r8
  cc:	a4 01       	movw	r20, r8
  ce:	a4 01       	movw	r20, r8
  d0:	a4 01       	movw	r20, r8
  d2:	a4 01       	movw	r20, r8
  d4:	a4 01       	movw	r20, r8
  d6:	42 01       	movw	r8, r4
  d8:	36 01       	movw	r6, r12
  da:	a4 01       	movw	r20, r8
  dc:	28 01       	movw	r4, r16
  de:	a4 01       	movw	r20, r8
  e0:	a4 01       	movw	r20, r8
  e2:	a4 01       	movw	r20, r8
  e4:	1b 01       	movw	r2, r22
  e6:	0c 01       	movw	r0, r24
  e8:	fd 00       	.word	0x00fd	; ????

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	ea e1       	ldi	r30, 0x1A	; 26
  fe:	f6 e0       	ldi	r31, 0x06	; 6
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a0 30       	cpi	r26, 0x00	; 0
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a4 30       	cpi	r26, 0x04	; 4
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 97 00 	call	0x12e	; 0x12e <main>
 120:	0c 94 0b 03 	jmp	0x616	; 0x616 <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 128:	0e 94 64 02 	call	0x4c8	; 0x4c8 <system_init>
 12c:	08 95       	ret

0000012e <main>:
//OUTPUT on PB2
volatile PWM_0_register_t PWM_0_duty = STOPPED;
volatile PWM_1_register_t PWM_1_duty = STOPPED;

int main(void)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	60 97       	sbiw	r28, 0x10	; 16
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
	/* Initializes MCU, drivers and middleware */
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
 142:	0e 94 94 00 	call	0x128	; 0x128 <atmel_start_init>
	//==========================================
	
	//TODO determine if we are using ch0 or ch1
		
	// Enable pin output
	PWM_0_enable_output_ch1();
 146:	0e 94 9d 02 	call	0x53a	; 0x53a <PWM_0_enable_output_ch1>
	PWM_1_enable_output_ch0();
 14a:	0e 94 c0 02 	call	0x580	; 0x580 <PWM_1_enable_output_ch0>

	// Set channel 0 duty cycle value register value to specified value
	PWM_0_load_duty_cycle_ch1(STOPPED);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 a2 02 	call	0x544	; 0x544 <PWM_0_load_duty_cycle_ch1>
	PWM_1_load_duty_cycle_ch0(STOPPED);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 c8 02 	call	0x590	; 0x590 <PWM_1_load_duty_cycle_ch0>

	// Set counter register value
	PWM_0_load_counter(0);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 a0 02 	call	0x540	; 0x540 <PWM_0_load_counter>
	PWM_1_load_counter(0);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 c5 02 	call	0x58a	; 0x58a <PWM_1_load_counter>
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t CURR_MOTOR_SPEED_RIGHT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_RIGHT = STOPPED;
	uint8_t CURR_DIRECTION = FORWARD;
	uint8_t GOAL_DIRECTION = FORWARD;
 166:	31 2c       	mov	r3, r1
	uint8_t rx[16];
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t CURR_MOTOR_SPEED_RIGHT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_RIGHT = STOPPED;
	uint8_t CURR_DIRECTION = FORWARD;
 168:	21 2c       	mov	r2, r1
	
	uint8_t rx[16];
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t CURR_MOTOR_SPEED_RIGHT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_RIGHT = STOPPED;
 16a:	61 2c       	mov	r6, r1
 16c:	71 2c       	mov	r7, r1
	int MOTOR_CONTROLLER_STATE = START;
	
	uint8_t rx[16];
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t CURR_MOTOR_SPEED_RIGHT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_LEFT = STOPPED;
 16e:	41 2c       	mov	r4, r1
 170:	51 2c       	mov	r5, r1
	
	int MOTOR_CONTROLLER_STATE = START;
	
	uint8_t rx[16];
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t CURR_MOTOR_SPEED_RIGHT = STOPPED;
 172:	c1 2c       	mov	r12, r1
 174:	d1 2c       	mov	r13, r1
	PWM_1_load_counter(0);
	
	int MOTOR_CONTROLLER_STATE = START;
	
	uint8_t rx[16];
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
 176:	e1 2c       	mov	r14, r1
 178:	f1 2c       	mov	r15, r1

	// Set counter register value
	PWM_0_load_counter(0);
	PWM_1_load_counter(0);
	
	int MOTOR_CONTROLLER_STATE = START;
 17a:	81 2c       	mov	r8, r1
 17c:	91 2c       	mov	r9, r1
 17e:	5e 01       	movw	r10, r28
 180:	25 e0       	ldi	r18, 0x05	; 5
 182:	a2 0e       	add	r10, r18
 184:	b1 1c       	adc	r11, r1
 186:	8e 01       	movw	r16, r28
 188:	0f 5f       	subi	r16, 0xFF	; 255
 18a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	while (1){
		//TODO check to make sure BT is connected
		//TODO only read if available
		for (uint8_t i = 0; i < 4; i++) {
			rx[i] = USART_0_read(); // Blocks until character is available
 18c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <USART_0_read>
 190:	f8 01       	movw	r30, r16
 192:	81 93       	st	Z+, r24
 194:	8f 01       	movw	r16, r30
	uint8_t GOAL_DIRECTION = FORWARD;
	
	while (1){
		//TODO check to make sure BT is connected
		//TODO only read if available
		for (uint8_t i = 0; i < 4; i++) {
 196:	ea 15       	cp	r30, r10
 198:	fb 05       	cpc	r31, r11
 19a:	c1 f7       	brne	.-16     	; 0x18c <main+0x5e>
			rx[i] = USART_0_read(); // Blocks until character is available
		}
		//verify first and last character
		if(rx[0] == 's' && rx[3] == 'e'){
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	83 37       	cpi	r24, 0x73	; 115
 1a0:	11 f5       	brne	.+68     	; 0x1e6 <main+0xb8>
 1a2:	8c 81       	ldd	r24, Y+4	; 0x04
 1a4:	85 36       	cpi	r24, 0x65	; 101
 1a6:	f9 f4       	brne	.+62     	; 0x1e6 <main+0xb8>
			if(rx[1] == '0'){
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	80 33       	cpi	r24, 0x30	; 48
 1ac:	39 f4       	brne	.+14     	; 0x1bc <main+0x8e>
				if(rx[2] == '0'){
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	80 33       	cpi	r24, 0x30	; 48
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <main+0x88>
 1b4:	55 c1       	rjmp	.+682    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
					MOTOR_CONTROLLER_STATE = START;
				}
				else if(rx[2] == '2'){
 1b6:	82 33       	cpi	r24, 0x32	; 50
 1b8:	b1 f4       	brne	.+44     	; 0x1e6 <main+0xb8>
 1ba:	55 c1       	rjmp	.+682    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
					MOTOR_CONTROLLER_STATE = SLOW_STOP;
				}
			}
			else if(rx[1] == '1'){
 1bc:	81 33       	cpi	r24, 0x31	; 49
 1be:	19 f7       	brne	.-58     	; 0x186 <main+0x58>
				if(rx[2] == '2'){
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	82 33       	cpi	r24, 0x32	; 50
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <main+0x9a>
 1c6:	70 c0       	rjmp	.+224    	; 0x2a8 <main+0x17a>
					MOTOR_CONTROLLER_STATE = ACTIVE_RIGHT;
				}
				else if(rx[2] == 'A'){
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f4       	brne	.+2      	; 0x1ce <main+0xa0>
 1cc:	79 c0       	rjmp	.+242    	; 0x2c0 <main+0x192>
					MOTOR_CONTROLLER_STATE = ACTIVE_RIGHT_FORWARD;
				}
				else if(rx[2] == '1'){
 1ce:	81 33       	cpi	r24, 0x31	; 49
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <main+0xa6>
 1d2:	85 c0       	rjmp	.+266    	; 0x2de <main+0x1b0>
					MOTOR_CONTROLLER_STATE = ACTIVE_LEFT;
				}
				else if(rx[2] == '9'){
 1d4:	89 33       	cpi	r24, 0x39	; 57
 1d6:	09 f4       	brne	.+2      	; 0x1da <main+0xac>
 1d8:	8e c0       	rjmp	.+284    	; 0x2f6 <main+0x1c8>
					MOTOR_CONTROLLER_STATE = ACTIVE_LEFT_FORWARD;
				}
				else if(rx[2] == '8'){
 1da:	88 33       	cpi	r24, 0x38	; 56
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <main+0xb2>
 1de:	9a c0       	rjmp	.+308    	; 0x314 <main+0x1e6>
					MOTOR_CONTROLLER_STATE = ACTIVE_FORWARD;
				}
				else if(rx[2] == '4'){
 1e0:	84 33       	cpi	r24, 0x34	; 52
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <main+0xb8>
 1e4:	a4 c0       	rjmp	.+328    	; 0x32e <main+0x200>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 1e6:	fb e1       	ldi	r31, 0x1B	; 27
 1e8:	8f 16       	cp	r8, r31
 1ea:	91 04       	cpc	r9, r1
 1ec:	08 f0       	brcs	.+2      	; 0x1f0 <main+0xc2>
 1ee:	ac c0       	rjmp	.+344    	; 0x348 <main+0x21a>
 1f0:	f4 01       	movw	r30, r8
 1f2:	e6 5a       	subi	r30, 0xA6	; 166
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__tablejump2__>
 1fa:	0f 2e       	mov	r0, r31
 1fc:	fa e1       	ldi	r31, 0x1A	; 26
 1fe:	8f 2e       	mov	r8, r31
 200:	f0 2d       	mov	r31, r0
 202:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
			case ACTIVE_RIGHT_FORWARD:
				//left motor faster than right
				GOAL_DIRECTION = FORWARD;
 204:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
 206:	0f 2e       	mov	r0, r31
 208:	f7 e7       	ldi	r31, 0x77	; 119
 20a:	6f 2e       	mov	r6, r31
 20c:	f0 2d       	mov	r31, r0
 20e:	71 2c       	mov	r7, r1
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
			case ACTIVE_RIGHT_FORWARD:
				//left motor faster than right
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 210:	44 24       	eor	r4, r4
 212:	4a 94       	dec	r4
 214:	51 2c       	mov	r5, r1
 216:	98 c0       	rjmp	.+304    	; 0x348 <main+0x21a>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 218:	0f 2e       	mov	r0, r31
 21a:	f9 e1       	ldi	r31, 0x19	; 25
 21c:	8f 2e       	mov	r8, r31
 21e:	f0 2d       	mov	r31, r0
 220:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT_FORWARD:
				//right motor faster than left
				GOAL_DIRECTION = FORWARD;
 222:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 224:	66 24       	eor	r6, r6
 226:	6a 94       	dec	r6
 228:	71 2c       	mov	r7, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT_FORWARD:
				//right motor faster than left
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
 22a:	0f 2e       	mov	r0, r31
 22c:	f7 e7       	ldi	r31, 0x77	; 119
 22e:	4f 2e       	mov	r4, r31
 230:	f0 2d       	mov	r31, r0
 232:	51 2c       	mov	r5, r1
 234:	89 c0       	rjmp	.+274    	; 0x348 <main+0x21a>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 236:	0f 2e       	mov	r0, r31
 238:	f8 e1       	ldi	r31, 0x18	; 24
 23a:	8f 2e       	mov	r8, r31
 23c:	f0 2d       	mov	r31, r0
 23e:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
				break;
			case ACTIVE_FORWARD:
				//motors equal speed
				GOAL_DIRECTION = FORWARD;
 240:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 242:	66 24       	eor	r6, r6
 244:	6a 94       	dec	r6
 246:	71 2c       	mov	r7, r1
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
				break;
			case ACTIVE_FORWARD:
				//motors equal speed
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 248:	44 24       	eor	r4, r4
 24a:	4a 94       	dec	r4
 24c:	51 2c       	mov	r5, r1
 24e:	7c c0       	rjmp	.+248    	; 0x348 <main+0x21a>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 250:	0f 2e       	mov	r0, r31
 252:	f4 e1       	ldi	r31, 0x14	; 20
 254:	8f 2e       	mov	r8, r31
 256:	f0 2d       	mov	r31, r0
 258:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_REVERSE:
				//motors equal speed, negative direction
				GOAL_DIRECTION = REVERSE;
 25a:	33 24       	eor	r3, r3
 25c:	33 94       	inc	r3
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 25e:	66 24       	eor	r6, r6
 260:	6a 94       	dec	r6
 262:	71 2c       	mov	r7, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_REVERSE:
				//motors equal speed, negative direction
				GOAL_DIRECTION = REVERSE;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 264:	44 24       	eor	r4, r4
 266:	4a 94       	dec	r4
 268:	51 2c       	mov	r5, r1
 26a:	6e c0       	rjmp	.+220    	; 0x348 <main+0x21a>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 26c:	0f 2e       	mov	r0, r31
 26e:	f2 e1       	ldi	r31, 0x12	; 18
 270:	8f 2e       	mov	r8, r31
 272:	f0 2d       	mov	r31, r0
 274:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
			case ACTIVE_RIGHT:
				//left motor much faster than right
				//left motor
				GOAL_DIRECTION = FORWARD;
 276:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
 278:	61 2c       	mov	r6, r1
 27a:	71 2c       	mov	r7, r1
				break;
			case ACTIVE_RIGHT:
				//left motor much faster than right
				//left motor
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 27c:	44 24       	eor	r4, r4
 27e:	4a 94       	dec	r4
 280:	51 2c       	mov	r5, r1
 282:	62 c0       	rjmp	.+196    	; 0x348 <main+0x21a>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 284:	0f 2e       	mov	r0, r31
 286:	f1 e1       	ldi	r31, 0x11	; 17
 288:	8f 2e       	mov	r8, r31
 28a:	f0 2d       	mov	r31, r0
 28c:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT:
				//right motor much faster than right
				GOAL_DIRECTION = FORWARD;
 28e:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 290:	66 24       	eor	r6, r6
 292:	6a 94       	dec	r6
 294:	71 2c       	mov	r7, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT:
				//right motor much faster than right
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
 296:	41 2c       	mov	r4, r1
 298:	51 2c       	mov	r5, r1
 29a:	56 c0       	rjmp	.+172    	; 0x348 <main+0x21a>
		}
		switch (MOTOR_CONTROLLER_STATE){
			case START:
			case SLOW_STOP:
				//slow down to stop
				GOAL_DIRECTION = FORWARD;
 29c:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
 29e:	61 2c       	mov	r6, r1
 2a0:	71 2c       	mov	r7, r1
		switch (MOTOR_CONTROLLER_STATE){
			case START:
			case SLOW_STOP:
				//slow down to stop
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
 2a2:	41 2c       	mov	r4, r1
 2a4:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
 2a6:	50 c0       	rjmp	.+160    	; 0x348 <main+0x21a>
 2a8:	0f 2e       	mov	r0, r31
 2aa:	f2 e1       	ldi	r31, 0x12	; 18
 2ac:	8f 2e       	mov	r8, r31
 2ae:	f0 2d       	mov	r31, r0
 2b0:	91 2c       	mov	r9, r1
			case ACTIVE_RIGHT:
				//left motor much faster than right
				//left motor
				GOAL_DIRECTION = FORWARD;
 2b2:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
 2b4:	61 2c       	mov	r6, r1
 2b6:	71 2c       	mov	r7, r1
				break;
			case ACTIVE_RIGHT:
				//left motor much faster than right
				//left motor
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 2b8:	44 24       	eor	r4, r4
 2ba:	4a 94       	dec	r4
 2bc:	51 2c       	mov	r5, r1
 2be:	44 c0       	rjmp	.+136    	; 0x348 <main+0x21a>
 2c0:	0f 2e       	mov	r0, r31
 2c2:	fa e1       	ldi	r31, 0x1A	; 26
 2c4:	8f 2e       	mov	r8, r31
 2c6:	f0 2d       	mov	r31, r0
 2c8:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
			case ACTIVE_RIGHT_FORWARD:
				//left motor faster than right
				GOAL_DIRECTION = FORWARD;
 2ca:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
 2cc:	0f 2e       	mov	r0, r31
 2ce:	f7 e7       	ldi	r31, 0x77	; 119
 2d0:	6f 2e       	mov	r6, r31
 2d2:	f0 2d       	mov	r31, r0
 2d4:	71 2c       	mov	r7, r1
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
			case ACTIVE_RIGHT_FORWARD:
				//left motor faster than right
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 2d6:	44 24       	eor	r4, r4
 2d8:	4a 94       	dec	r4
 2da:	51 2c       	mov	r5, r1
 2dc:	35 c0       	rjmp	.+106    	; 0x348 <main+0x21a>
 2de:	0f 2e       	mov	r0, r31
 2e0:	f1 e1       	ldi	r31, 0x11	; 17
 2e2:	8f 2e       	mov	r8, r31
 2e4:	f0 2d       	mov	r31, r0
 2e6:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT:
				//right motor much faster than right
				GOAL_DIRECTION = FORWARD;
 2e8:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 2ea:	66 24       	eor	r6, r6
 2ec:	6a 94       	dec	r6
 2ee:	71 2c       	mov	r7, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT:
				//right motor much faster than right
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
 2f0:	41 2c       	mov	r4, r1
 2f2:	51 2c       	mov	r5, r1
 2f4:	29 c0       	rjmp	.+82     	; 0x348 <main+0x21a>
 2f6:	0f 2e       	mov	r0, r31
 2f8:	f9 e1       	ldi	r31, 0x19	; 25
 2fa:	8f 2e       	mov	r8, r31
 2fc:	f0 2d       	mov	r31, r0
 2fe:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT_FORWARD:
				//right motor faster than left
				GOAL_DIRECTION = FORWARD;
 300:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 302:	66 24       	eor	r6, r6
 304:	6a 94       	dec	r6
 306:	71 2c       	mov	r7, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT_FORWARD:
				//right motor faster than left
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
 308:	0f 2e       	mov	r0, r31
 30a:	f7 e7       	ldi	r31, 0x77	; 119
 30c:	4f 2e       	mov	r4, r31
 30e:	f0 2d       	mov	r31, r0
 310:	51 2c       	mov	r5, r1
 312:	1a c0       	rjmp	.+52     	; 0x348 <main+0x21a>
 314:	0f 2e       	mov	r0, r31
 316:	f8 e1       	ldi	r31, 0x18	; 24
 318:	8f 2e       	mov	r8, r31
 31a:	f0 2d       	mov	r31, r0
 31c:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
				break;
			case ACTIVE_FORWARD:
				//motors equal speed
				GOAL_DIRECTION = FORWARD;
 31e:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 320:	66 24       	eor	r6, r6
 322:	6a 94       	dec	r6
 324:	71 2c       	mov	r7, r1
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
				break;
			case ACTIVE_FORWARD:
				//motors equal speed
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 326:	44 24       	eor	r4, r4
 328:	4a 94       	dec	r4
 32a:	51 2c       	mov	r5, r1
 32c:	0d c0       	rjmp	.+26     	; 0x348 <main+0x21a>
 32e:	0f 2e       	mov	r0, r31
 330:	f4 e1       	ldi	r31, 0x14	; 20
 332:	8f 2e       	mov	r8, r31
 334:	f0 2d       	mov	r31, r0
 336:	91 2c       	mov	r9, r1
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_REVERSE:
				//motors equal speed, negative direction
				GOAL_DIRECTION = REVERSE;
 338:	33 24       	eor	r3, r3
 33a:	33 94       	inc	r3
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 33c:	66 24       	eor	r6, r6
 33e:	6a 94       	dec	r6
 340:	71 2c       	mov	r7, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_REVERSE:
				//motors equal speed, negative direction
				GOAL_DIRECTION = REVERSE;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 342:	44 24       	eor	r4, r4
 344:	4a 94       	dec	r4
 346:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
		}
		//Ramp left and right motor speeds 
		if(CURR_DIRECTION == GOAL_DIRECTION){
 348:	23 10       	cpse	r2, r3
 34a:	35 c0       	rjmp	.+106    	; 0x3b6 <main+0x288>
			//ramp left to GOAL_MOTOR_SPEED_LEFT
			CURR_MOTOR_SPEED_LEFT += (GOAL_MOTOR_SPEED_LEFT - CURR_MOTOR_SPEED_LEFT)/NUMBER_OF_STEPS;
 34c:	92 01       	movw	r18, r4
 34e:	2e 19       	sub	r18, r14
 350:	3f 09       	sbc	r19, r15
 352:	36 95       	lsr	r19
 354:	27 95       	ror	r18
 356:	36 95       	lsr	r19
 358:	27 95       	ror	r18
 35a:	ab e7       	ldi	r26, 0x7B	; 123
 35c:	b4 e1       	ldi	r27, 0x14	; 20
 35e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__umulhisi3>
 362:	96 95       	lsr	r25
 364:	87 95       	ror	r24
 366:	e8 0e       	add	r14, r24
 368:	f9 1e       	adc	r15, r25
			if(abs(GOAL_MOTOR_SPEED_LEFT - CURR_MOTOR_SPEED_LEFT) <= CLOSE_TO_GOAL_VALUE){
 36a:	c2 01       	movw	r24, r4
 36c:	8e 19       	sub	r24, r14
 36e:	9f 09       	sbc	r25, r15
 370:	8b 3f       	cpi	r24, 0xFB	; 251
 372:	2f ef       	ldi	r18, 0xFF	; 255
 374:	92 07       	cpc	r25, r18
 376:	1c f0       	brlt	.+6      	; 0x37e <main+0x250>
 378:	06 97       	sbiw	r24, 0x06	; 6
 37a:	0c f4       	brge	.+2      	; 0x37e <main+0x250>
				CURR_MOTOR_SPEED_LEFT = GOAL_MOTOR_SPEED_LEFT;
 37c:	72 01       	movw	r14, r4
			}
			//ramp right to GOAL_MOTOR_SPEED_RIGHT
			CURR_MOTOR_SPEED_RIGHT += (GOAL_MOTOR_SPEED_RIGHT - CURR_MOTOR_SPEED_RIGHT)/NUMBER_OF_STEPS;
 37e:	93 01       	movw	r18, r6
 380:	2c 19       	sub	r18, r12
 382:	3d 09       	sbc	r19, r13
 384:	36 95       	lsr	r19
 386:	27 95       	ror	r18
 388:	36 95       	lsr	r19
 38a:	27 95       	ror	r18
 38c:	ab e7       	ldi	r26, 0x7B	; 123
 38e:	b4 e1       	ldi	r27, 0x14	; 20
 390:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__umulhisi3>
 394:	96 95       	lsr	r25
 396:	87 95       	ror	r24
 398:	c8 0e       	add	r12, r24
 39a:	d9 1e       	adc	r13, r25
			if(abs(GOAL_MOTOR_SPEED_RIGHT - CURR_MOTOR_SPEED_RIGHT) <= CLOSE_TO_GOAL_VALUE){
 39c:	c3 01       	movw	r24, r6
 39e:	8c 19       	sub	r24, r12
 3a0:	9d 09       	sbc	r25, r13
 3a2:	8b 3f       	cpi	r24, 0xFB	; 251
 3a4:	ef ef       	ldi	r30, 0xFF	; 255
 3a6:	9e 07       	cpc	r25, r30
 3a8:	0c f4       	brge	.+2      	; 0x3ac <main+0x27e>
 3aa:	4d c0       	rjmp	.+154    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3ac:	06 97       	sbiw	r24, 0x06	; 6
 3ae:	0c f0       	brlt	.+2      	; 0x3b2 <main+0x284>
 3b0:	4a c0       	rjmp	.+148    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				CURR_MOTOR_SPEED_RIGHT = GOAL_MOTOR_SPEED_RIGHT;
 3b2:	63 01       	movw	r12, r6
 3b4:	48 c0       	rjmp	.+144    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			}
		}
		else{
			//ramp speed to zero
			//ramp left to STOPPED
			CURR_MOTOR_SPEED_LEFT += (STOPPED - CURR_MOTOR_SPEED_LEFT)/NUMBER_OF_STEPS;
 3b6:	22 27       	eor	r18, r18
 3b8:	33 27       	eor	r19, r19
 3ba:	2e 19       	sub	r18, r14
 3bc:	3f 09       	sbc	r19, r15
 3be:	36 95       	lsr	r19
 3c0:	27 95       	ror	r18
 3c2:	36 95       	lsr	r19
 3c4:	27 95       	ror	r18
 3c6:	ab e7       	ldi	r26, 0x7B	; 123
 3c8:	b4 e1       	ldi	r27, 0x14	; 20
 3ca:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__umulhisi3>
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	e8 0e       	add	r14, r24
 3d4:	f9 1e       	adc	r15, r25
			if(abs(STOPPED - CURR_MOTOR_SPEED_LEFT) <= CLOSE_TO_GOAL_VALUE){
 3d6:	88 27       	eor	r24, r24
 3d8:	99 27       	eor	r25, r25
 3da:	8e 19       	sub	r24, r14
 3dc:	9f 09       	sbc	r25, r15
 3de:	8b 3f       	cpi	r24, 0xFB	; 251
 3e0:	ff ef       	ldi	r31, 0xFF	; 255
 3e2:	9f 07       	cpc	r25, r31
 3e4:	1c f0       	brlt	.+6      	; 0x3ec <main+0x2be>
 3e6:	06 97       	sbiw	r24, 0x06	; 6
 3e8:	0c f4       	brge	.+2      	; 0x3ec <main+0x2be>
 3ea:	42 c0       	rjmp	.+132    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				CURR_MOTOR_SPEED_LEFT = STOPPED;
			}
			//ramp right to STOPPED
			CURR_MOTOR_SPEED_RIGHT += (STOPPED - CURR_MOTOR_SPEED_RIGHT)/NUMBER_OF_STEPS;
 3ec:	22 27       	eor	r18, r18
 3ee:	33 27       	eor	r19, r19
 3f0:	2c 19       	sub	r18, r12
 3f2:	3d 09       	sbc	r19, r13
 3f4:	36 95       	lsr	r19
 3f6:	27 95       	ror	r18
 3f8:	36 95       	lsr	r19
 3fa:	27 95       	ror	r18
 3fc:	ab e7       	ldi	r26, 0x7B	; 123
 3fe:	b4 e1       	ldi	r27, 0x14	; 20
 400:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__umulhisi3>
 404:	96 95       	lsr	r25
 406:	87 95       	ror	r24
 408:	c8 0e       	add	r12, r24
 40a:	d9 1e       	adc	r13, r25
			if(abs(STOPPED - CURR_MOTOR_SPEED_RIGHT) <= CLOSE_TO_GOAL_VALUE){
 40c:	88 27       	eor	r24, r24
 40e:	99 27       	eor	r25, r25
 410:	8c 19       	sub	r24, r12
 412:	9d 09       	sbc	r25, r13
 414:	8b 3f       	cpi	r24, 0xFB	; 251
 416:	2f ef       	ldi	r18, 0xFF	; 255
 418:	92 07       	cpc	r25, r18
 41a:	1c f0       	brlt	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	06 97       	sbiw	r24, 0x06	; 6
 41e:	0c f4       	brge	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	40 c0       	rjmp	.+128    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
				CURR_MOTOR_SPEED_RIGHT = STOPPED;
			}
			//flip current direction
			if(CURR_MOTOR_SPEED_LEFT == STOPPED && CURR_MOTOR_SPEED_RIGHT == STOPPED){
 422:	e1 14       	cp	r14, r1
 424:	f1 04       	cpc	r15, r1
 426:	79 f4       	brne	.+30     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 428:	c1 14       	cp	r12, r1
 42a:	d1 04       	cpc	r13, r1
 42c:	51 f4       	brne	.+20     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				if(CURR_DIRECTION == REVERSE){
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	28 12       	cpse	r2, r24
 432:	01 c0       	rjmp	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	28 2e       	mov	r2, r24
 438:	c1 2c       	mov	r12, r1
 43a:	d1 2c       	mov	r13, r1
 43c:	e1 2c       	mov	r14, r1
 43e:	f1 2c       	mov	r15, r1
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	e1 2c       	mov	r14, r1
 444:	f1 2c       	mov	r15, r1
				else{
					CURR_DIRECTION = REVERSE;
				}
			}
		}
		PWM_0_duty = CURR_MOTOR_SPEED_LEFT;
 446:	e0 92 01 01 	sts	0x0101, r14	; 0x800101 <PWM_0_duty>
		PWM_1_duty = CURR_MOTOR_SPEED_RIGHT;
 44a:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_end>
		PWM_0_load_duty_cycle_ch1(PWM_0_duty);
 44e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PWM_0_duty>
 452:	0e 94 a2 02 	call	0x544	; 0x544 <PWM_0_load_duty_cycle_ch1>
		PWM_1_load_duty_cycle_ch0(PWM_1_duty);
 456:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 45a:	0e 94 c8 02 	call	0x590	; 0x590 <PWM_1_load_duty_cycle_ch0>
 45e:	93 ce       	rjmp	.-730    	; 0x186 <main+0x58>
		}
		//verify first and last character
		if(rx[0] == 's' && rx[3] == 'e'){
			if(rx[1] == '0'){
				if(rx[2] == '0'){
					MOTOR_CONTROLLER_STATE = START;
 460:	81 2c       	mov	r8, r1
 462:	91 2c       	mov	r9, r1
 464:	1b cf       	rjmp	.-458    	; 0x29c <main+0x16e>
				}
				else if(rx[2] == '2'){
					MOTOR_CONTROLLER_STATE = SLOW_STOP;
 466:	68 94       	set
 468:	88 24       	eor	r8, r8
 46a:	81 f8       	bld	r8, 1
 46c:	91 2c       	mov	r9, r1
 46e:	16 cf       	rjmp	.-468    	; 0x29c <main+0x16e>
			CURR_MOTOR_SPEED_LEFT += (STOPPED - CURR_MOTOR_SPEED_LEFT)/NUMBER_OF_STEPS;
			if(abs(STOPPED - CURR_MOTOR_SPEED_LEFT) <= CLOSE_TO_GOAL_VALUE){
				CURR_MOTOR_SPEED_LEFT = STOPPED;
			}
			//ramp right to STOPPED
			CURR_MOTOR_SPEED_RIGHT += (STOPPED - CURR_MOTOR_SPEED_RIGHT)/NUMBER_OF_STEPS;
 470:	22 27       	eor	r18, r18
 472:	33 27       	eor	r19, r19
 474:	2c 19       	sub	r18, r12
 476:	3d 09       	sbc	r19, r13
 478:	36 95       	lsr	r19
 47a:	27 95       	ror	r18
 47c:	36 95       	lsr	r19
 47e:	27 95       	ror	r18
 480:	ab e7       	ldi	r26, 0x7B	; 123
 482:	b4 e1       	ldi	r27, 0x14	; 20
 484:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__umulhisi3>
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	c8 0e       	add	r12, r24
 48e:	d9 1e       	adc	r13, r25
			if(abs(STOPPED - CURR_MOTOR_SPEED_RIGHT) <= CLOSE_TO_GOAL_VALUE){
 490:	88 27       	eor	r24, r24
 492:	99 27       	eor	r25, r25
 494:	8c 19       	sub	r24, r12
 496:	9d 09       	sbc	r25, r13
 498:	8b 3f       	cpi	r24, 0xFB	; 251
 49a:	ef ef       	ldi	r30, 0xFF	; 255
 49c:	9e 07       	cpc	r25, r30
 49e:	3c f4       	brge	.+14     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a0:	c3 cf       	rjmp	.-122    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
				CURR_MOTOR_SPEED_RIGHT = STOPPED;
			}
			//flip current direction
			if(CURR_MOTOR_SPEED_LEFT == STOPPED && CURR_MOTOR_SPEED_RIGHT == STOPPED){
 4a2:	e1 14       	cp	r14, r1
 4a4:	f1 04       	cpc	r15, r1
 4a6:	19 f2       	breq	.-122    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				CURR_MOTOR_SPEED_LEFT = STOPPED;
			}
			//ramp right to STOPPED
			CURR_MOTOR_SPEED_RIGHT += (STOPPED - CURR_MOTOR_SPEED_RIGHT)/NUMBER_OF_STEPS;
			if(abs(STOPPED - CURR_MOTOR_SPEED_RIGHT) <= CLOSE_TO_GOAL_VALUE){
				CURR_MOTOR_SPEED_RIGHT = STOPPED;
 4a8:	c1 2c       	mov	r12, r1
 4aa:	d1 2c       	mov	r13, r1
 4ac:	cc cf       	rjmp	.-104    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			if(abs(STOPPED - CURR_MOTOR_SPEED_LEFT) <= CLOSE_TO_GOAL_VALUE){
				CURR_MOTOR_SPEED_LEFT = STOPPED;
			}
			//ramp right to STOPPED
			CURR_MOTOR_SPEED_RIGHT += (STOPPED - CURR_MOTOR_SPEED_RIGHT)/NUMBER_OF_STEPS;
			if(abs(STOPPED - CURR_MOTOR_SPEED_RIGHT) <= CLOSE_TO_GOAL_VALUE){
 4ae:	06 97       	sbiw	r24, 0x06	; 6
 4b0:	0c f4       	brge	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b2:	bd cf       	rjmp	.-134    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		else{
			//ramp speed to zero
			//ramp left to STOPPED
			CURR_MOTOR_SPEED_LEFT += (STOPPED - CURR_MOTOR_SPEED_LEFT)/NUMBER_OF_STEPS;
			if(abs(STOPPED - CURR_MOTOR_SPEED_LEFT) <= CLOSE_TO_GOAL_VALUE){
				CURR_MOTOR_SPEED_LEFT = STOPPED;
 4b4:	e1 2c       	mov	r14, r1
 4b6:	f1 2c       	mov	r15, r1
 4b8:	b4 cf       	rjmp	.-152    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

000004ba <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 4ba:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 4bc:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 4be:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 4c0:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 4c2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <USART_0_init>
 4c6:	08 95       	ret

000004c8 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 4c8:	8d e3       	ldi	r24, 0x3D	; 61
 4ca:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 4ce:	8f ef       	ldi	r24, 0xFF	; 255
 4d0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 4d4:	94 b1       	in	r25, 0x04	; 4
 4d6:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 4d8:	95 b1       	in	r25, 0x05	; 5
 4da:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 4dc:	97 b1       	in	r25, 0x07	; 7
 4de:	90 78       	andi	r25, 0x80	; 128
 4e0:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 4e2:	98 b1       	in	r25, 0x08	; 8
 4e4:	9f 67       	ori	r25, 0x7F	; 127
 4e6:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 4e8:	9a b1       	in	r25, 0x0a	; 10
 4ea:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 4ec:	9b b1       	in	r25, 0x0b	; 11
 4ee:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 4f0:	8d b1       	in	r24, 0x0d	; 13
 4f2:	80 7f       	andi	r24, 0xF0	; 240
 4f4:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 4f6:	8e b1       	in	r24, 0x0e	; 14
 4f8:	8f 60       	ori	r24, 0x0F	; 15
 4fa:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	60 e8       	ldi	r22, 0x80	; 128
 500:	81 e6       	ldi	r24, 0x61	; 97
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 8d 02 	call	0x51a	; 0x51a <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 508:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 50a:	15 be       	out	0x35, r1	; 53
#include <system.h>

void PWM_0_initialization(void)
{

	PWM_0_init();
 50c:	0e 94 94 02 	call	0x528	; 0x528 <PWM_0_init>
}

void PWM_1_initialization(void)
{

	PWM_1_init();
 510:	0e 94 b6 02 	call	0x56c	; 0x56c <PWM_1_init>

	PWM_0_initialization();

	PWM_1_initialization();

	USART_0_initialization();
 514:	0e 94 5d 02 	call	0x4ba	; 0x4ba <USART_0_initialization>
 518:	08 95       	ret

0000051a <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 51a:	2f b7       	in	r18, 0x3f	; 63
	cli
 51c:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 51e:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 520:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 522:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 524:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 526:	08 95       	ret

00000528 <PWM_0_init>:
 *
 * \return Nothing.
 */
void PWM_1_register_callback(pwm_irq_cb_t f)
{
	PWM_1_cb = f;
 528:	e4 e6       	ldi	r30, 0x64	; 100
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	8f 7d       	andi	r24, 0xDF	; 223
 530:	80 83       	st	Z, r24
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	84 bd       	out	0x24, r24	; 36
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	08 95       	ret

0000053a <PWM_0_enable_output_ch1>:
 53a:	84 b5       	in	r24, 0x24	; 36
 53c:	84 bd       	out	0x24, r24	; 36
 53e:	08 95       	ret

00000540 <PWM_0_load_counter>:
 540:	86 bd       	out	0x26, r24	; 38
 542:	08 95       	ret

00000544 <PWM_0_load_duty_cycle_ch1>:
 544:	88 bd       	out	0x28, r24	; 40
 546:	08 95       	ret

00000548 <__vector_16>:
 548:	1f 92       	push	r1
 54a:	0f 92       	push	r0
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	0f 92       	push	r0
 550:	11 24       	eor	r1, r1
 552:	8f 93       	push	r24
 554:	a8 9a       	sbi	0x15, 0	; 21
 556:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <callback_count.1850>
 55a:	8f 5f       	subi	r24, 0xFF	; 255
 55c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <callback_count.1850>
 560:	8f 91       	pop	r24
 562:	0f 90       	pop	r0
 564:	0f be       	out	0x3f, r0	; 63
 566:	0f 90       	pop	r0
 568:	1f 90       	pop	r1
 56a:	18 95       	reti

0000056c <PWM_1_init>:
 56c:	e4 e6       	ldi	r30, 0x64	; 100
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	8f 7b       	andi	r24, 0xBF	; 191
 574:	80 83       	st	Z, r24
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	08 95       	ret

00000580 <PWM_1_enable_output_ch0>:
 580:	e0 eb       	ldi	r30, 0xB0	; 176
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	80 83       	st	Z, r24
 588:	08 95       	ret

0000058a <PWM_1_load_counter>:
 58a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 58e:	08 95       	ret

00000590 <PWM_1_load_duty_cycle_ch0>:
 590:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 594:	08 95       	ret

00000596 <__vector_9>:
}

ISR(TIMER2_OVF_vect)
{
 596:	1f 92       	push	r1
 598:	0f 92       	push	r0
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	0f 92       	push	r0
 59e:	11 24       	eor	r1, r1
 5a0:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TIFR2 |= (1 << TOV2);
 5a2:	b8 9a       	sbi	0x17, 0	; 23

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_1_INTERRUPT_CB_RATE) && (PWM_1_INTERRUPT_CB_RATE != 0)) {
 5a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <callback_count.1883>
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <callback_count.1883>
		if (PWM_1_cb != NULL) {
			PWM_1_cb();
		}
	}
}
 5ae:	8f 91       	pop	r24
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <USART_0_init>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
	return (!(UCSR0A & (1 << TXC0)));
}
 5ba:	e4 e6       	ldi	r30, 0x64	; 100
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	8d 7f       	andi	r24, 0xFD	; 253
 5c2:	80 83       	st	Z, r24
 5c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 5c8:	83 e3       	ldi	r24, 0x33	; 51
 5ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 5ce:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 5d2:	88 e9       	ldi	r24, 0x98	; 152
 5d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	08 95       	ret

000005dc <USART_0_read>:
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
 5dc:	e0 ec       	ldi	r30, 0xC0	; 192
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	88 23       	and	r24, r24
 5e4:	ec f7       	brge	.-6      	; 0x5e0 <USART_0_read+0x4>
		;
	return UDR0;
 5e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 5ea:	08 95       	ret

000005ec <__tablejump2__>:
 5ec:	ee 0f       	add	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	05 90       	lpm	r0, Z+
 5f2:	f4 91       	lpm	r31, Z
 5f4:	e0 2d       	mov	r30, r0
 5f6:	09 94       	ijmp

000005f8 <__umulhisi3>:
 5f8:	a2 9f       	mul	r26, r18
 5fa:	b0 01       	movw	r22, r0
 5fc:	b3 9f       	mul	r27, r19
 5fe:	c0 01       	movw	r24, r0
 600:	a3 9f       	mul	r26, r19
 602:	70 0d       	add	r23, r0
 604:	81 1d       	adc	r24, r1
 606:	11 24       	eor	r1, r1
 608:	91 1d       	adc	r25, r1
 60a:	b2 9f       	mul	r27, r18
 60c:	70 0d       	add	r23, r0
 60e:	81 1d       	adc	r24, r1
 610:	11 24       	eor	r1, r1
 612:	91 1d       	adc	r25, r1
 614:	08 95       	ret

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
