
Motor Controller Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000d08  00000d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011e  0080011e  00000dba  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000dba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00000e10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ead  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e23  00000000  00000000  00002f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001153  00000000  00000000  00003d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00004edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3b  00000000  00000000  000051f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077d  00000000  00000000  00005c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000063a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__vector_13>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  6c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  70:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  74:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  7c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  80:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  84:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  88:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  8c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_35>
  90:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  94:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  98:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  9c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  a8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  ac:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  b0:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  b4:	70 01       	movw	r14, r0
  b6:	c4 01       	movw	r24, r8
  b8:	70 01       	movw	r14, r0
  ba:	c4 01       	movw	r24, r8
  bc:	c4 01       	movw	r24, r8
  be:	c4 01       	movw	r24, r8
  c0:	c4 01       	movw	r24, r8
  c2:	c4 01       	movw	r24, r8
  c4:	c4 01       	movw	r24, r8
  c6:	c4 01       	movw	r24, r8
  c8:	c4 01       	movw	r24, r8
  ca:	c4 01       	movw	r24, r8
  cc:	c4 01       	movw	r24, r8
  ce:	c4 01       	movw	r24, r8
  d0:	c4 01       	movw	r24, r8
  d2:	c4 01       	movw	r24, r8
  d4:	c4 01       	movw	r24, r8
  d6:	64 01       	movw	r12, r8
  d8:	58 01       	movw	r10, r16
  da:	c4 01       	movw	r24, r8
  dc:	4a 01       	movw	r8, r20
  de:	c4 01       	movw	r24, r8
  e0:	c4 01       	movw	r24, r8
  e2:	c4 01       	movw	r24, r8
  e4:	3d 01       	movw	r6, r26
  e6:	30 01       	movw	r6, r0
  e8:	76 01       	movw	r14, r12

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	e8 e0       	ldi	r30, 0x08	; 8
  fe:	fd e0       	ldi	r31, 0x0D	; 13
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	ae 31       	cpi	r26, 0x1E	; 30
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	ae e1       	ldi	r26, 0x1E	; 30
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a4 32       	cpi	r26, 0x24	; 36
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 b9 00 	call	0x172	; 0x172 <main>
 120:	0c 94 82 06 	jmp	0xd04	; 0xd04 <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 128:	0e 94 ce 02 	call	0x59c	; 0x59c <system_init>
 12c:	08 95       	ret

0000012e <USART0_Print>:
//OUTPUT on PB2
volatile PWM_0_register_t PWM_0_duty = STOPPED;
volatile PWM_1_register_t PWM_1_duty = STOPPED;


void USART0_Print(const char* variable){ // Function to write a string to USART0
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	8c 01       	movw	r16, r24
 13c:	7c 01       	movw	r14, r24
	
	for (int i=0; i<strlen(variable); i++) // Loops to print character array pointed to by received string
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	06 c0       	rjmp	.+12     	; 0x150 <USART0_Print+0x22>
	{
		USART_0_write(variable[i]);
 144:	f7 01       	movw	r30, r14
 146:	81 91       	ld	r24, Z+
 148:	7f 01       	movw	r14, r30
 14a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <USART_0_write>
volatile PWM_1_register_t PWM_1_duty = STOPPED;


void USART0_Print(const char* variable){ // Function to write a string to USART0
	
	for (int i=0; i<strlen(variable); i++) // Loops to print character array pointed to by received string
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	f8 01       	movw	r30, r16
 152:	01 90       	ld	r0, Z+
 154:	00 20       	and	r0, r0
 156:	e9 f7       	brne	.-6      	; 0x152 <USART0_Print+0x24>
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	e0 1b       	sub	r30, r16
 15c:	f1 0b       	sbc	r31, r17
 15e:	ce 17       	cp	r28, r30
 160:	df 07       	cpc	r29, r31
 162:	80 f3       	brcs	.-32     	; 0x144 <USART0_Print+0x16>
	{
		USART_0_write(variable[i]);
	}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	08 95       	ret

00000172 <main>:




int main(void)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	65 97       	sbiw	r28, 0x15	; 21
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
	/* Initializes MCU, drivers and middleware */
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
 186:	0e 94 94 00 	call	0x128	; 0x128 <atmel_start_init>
	//==========================================
	DDRC |= 0x01;
 18a:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= 0xFE;
 18c:	40 98       	cbi	0x08, 0	; 8
	//TODO determine if we are using ch0 or ch1
		
	// Enable pin output
	PWM_0_enable_output_ch1();
 18e:	0e 94 0e 03 	call	0x61c	; 0x61c <PWM_0_enable_output_ch1>
	PWM_1_enable_output_ch1();
 192:	0e 94 40 03 	call	0x680	; 0x680 <PWM_1_enable_output_ch1>

	// Set channel 0 duty cycle value register value to specified value
	PWM_0_load_duty_cycle_ch1(STOPPED);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 19 03 	call	0x632	; 0x632 <PWM_0_load_duty_cycle_ch1>
	PWM_1_load_duty_cycle_ch1(STOPPED);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 4b 03 	call	0x696	; 0x696 <PWM_1_load_duty_cycle_ch1>

	// Set counter register value
	PWM_0_load_counter(0);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 14 03 	call	0x628	; 0x628 <PWM_0_load_counter>
	PWM_1_load_counter(0);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 46 03 	call	0x68c	; 0x68c <PWM_1_load_counter>
	
	int MOTOR_CONTROLLER_STATE = START;
	char printnum[] = "";
 1b6:	19 82       	std	Y+1, r1	; 0x01
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t CURR_MOTOR_SPEED_RIGHT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_RIGHT = STOPPED;
	uint8_t CURR_DIRECTION = FORWARD;
	uint8_t GOAL_DIRECTION = FORWARD;
 1b8:	1c 8a       	std	Y+20, r1	; 0x14
	uint8_t rx[16];
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t CURR_MOTOR_SPEED_RIGHT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_RIGHT = STOPPED;
	uint8_t CURR_DIRECTION = FORWARD;
 1ba:	1d 8a       	std	Y+21, r1	; 0x15
	char printnum[] = "";
	uint8_t rx[16];
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t CURR_MOTOR_SPEED_RIGHT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_RIGHT = STOPPED;
 1bc:	21 2c       	mov	r2, r1
 1be:	31 2c       	mov	r3, r1
	int MOTOR_CONTROLLER_STATE = START;
	char printnum[] = "";
	uint8_t rx[16];
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t CURR_MOTOR_SPEED_RIGHT = STOPPED;
	uint16_t GOAL_MOTOR_SPEED_LEFT = STOPPED;
 1c0:	1b 8a       	std	Y+19, r1	; 0x13
 1c2:	1a 8a       	std	Y+18, r1	; 0x12
	
	int MOTOR_CONTROLLER_STATE = START;
	char printnum[] = "";
	uint8_t rx[16];
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
	uint16_t CURR_MOTOR_SPEED_RIGHT = STOPPED;
 1c4:	c1 2c       	mov	r12, r1
 1c6:	d1 2c       	mov	r13, r1
	PWM_1_load_counter(0);
	
	int MOTOR_CONTROLLER_STATE = START;
	char printnum[] = "";
	uint8_t rx[16];
	uint16_t CURR_MOTOR_SPEED_LEFT = STOPPED;
 1c8:	e1 2c       	mov	r14, r1
 1ca:	f1 2c       	mov	r15, r1

	// Set counter register value
	PWM_0_load_counter(0);
	PWM_1_load_counter(0);
	
	int MOTOR_CONTROLLER_STATE = START;
 1cc:	41 2c       	mov	r4, r1
 1ce:	51 2c       	mov	r5, r1
 1d0:	5e 01       	movw	r10, r28
 1d2:	26 e0       	ldi	r18, 0x06	; 6
 1d4:	a2 0e       	add	r10, r18
 1d6:	b1 1c       	adc	r11, r1
				}
			}
		}
		PWM_0_duty = CURR_MOTOR_SPEED_LEFT;
		PWM_1_duty = CURR_MOTOR_SPEED_RIGHT;
		sprintf(printnum,"%u",PWM_0_duty);
 1d8:	0f 2e       	mov	r0, r31
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	6f 2e       	mov	r6, r31
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	7f 2e       	mov	r7, r31
 1e2:	f0 2d       	mov	r31, r0
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	4c 01       	movw	r8, r24
 1ea:	8e 01       	movw	r16, r28
 1ec:	0e 5f       	subi	r16, 0xFE	; 254
 1ee:	1f 4f       	sbci	r17, 0xFF	; 255
	
	while (1){
		//TODO check to make sure BT is connected
		//TODO only read if available
		for (uint8_t i = 0; i < 4; i++) {
			rx[i] = USART_0_read(); // Blocks until character is available
 1f0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <USART_0_read>
 1f4:	f8 01       	movw	r30, r16
 1f6:	81 93       	st	Z+, r24
 1f8:	8f 01       	movw	r16, r30
	uint8_t GOAL_DIRECTION = FORWARD;
	
	while (1){
		//TODO check to make sure BT is connected
		//TODO only read if available
		for (uint8_t i = 0; i < 4; i++) {
 1fa:	ae 16       	cp	r10, r30
 1fc:	bf 06       	cpc	r11, r31
 1fe:	c1 f7       	brne	.-16     	; 0x1f0 <main+0x7e>
			rx[i] = USART_0_read(); // Blocks until character is available
		}
		//verify first and last character
		if(rx[0] == 's' && rx[3] == 'e'){
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	83 37       	cpi	r24, 0x73	; 115
 204:	19 f5       	brne	.+70     	; 0x24c <main+0xda>
 206:	8d 81       	ldd	r24, Y+5	; 0x05
 208:	85 36       	cpi	r24, 0x65	; 101
 20a:	01 f5       	brne	.+64     	; 0x24c <main+0xda>
			if(rx[1] == '0'){
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	80 33       	cpi	r24, 0x30	; 48
 210:	39 f4       	brne	.+14     	; 0x220 <main+0xae>
				if(rx[2] == '0'){
 212:	8c 81       	ldd	r24, Y+4	; 0x04
 214:	80 33       	cpi	r24, 0x30	; 48
 216:	09 f4       	brne	.+2      	; 0x21a <main+0xa8>
 218:	82 c1       	rjmp	.+772    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
					MOTOR_CONTROLLER_STATE = START;
				}
				else if(rx[2] == '2'){
 21a:	82 33       	cpi	r24, 0x32	; 50
 21c:	b9 f4       	brne	.+46     	; 0x24c <main+0xda>
 21e:	82 c1       	rjmp	.+772    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
					MOTOR_CONTROLLER_STATE = SLOW_STOP;
				}
			}
			else if(rx[1] == '1'){
 220:	81 33       	cpi	r24, 0x31	; 49
 222:	19 f7       	brne	.-58     	; 0x1ea <main+0x78>
				if(rx[2] == '2'){
 224:	8c 81       	ldd	r24, Y+4	; 0x04
 226:	82 33       	cpi	r24, 0x32	; 50
 228:	09 f4       	brne	.+2      	; 0x22c <main+0xba>
 22a:	6f c0       	rjmp	.+222    	; 0x30a <main+0x198>
					MOTOR_CONTROLLER_STATE = ACTIVE_RIGHT;
				}
				else if(rx[2] == 'A'){
 22c:	81 34       	cpi	r24, 0x41	; 65
 22e:	11 f4       	brne	.+4      	; 0x234 <main+0xc2>
					MOTOR_CONTROLLER_STATE = ACTIVE_RIGHT_FORWARD;
					PORTC |=(1<<0);
 230:	40 9a       	sbi	0x08, 0	; 8
 232:	5c c0       	rjmp	.+184    	; 0x2ec <main+0x17a>
				}
				else if(rx[2] == '1'){
 234:	81 33       	cpi	r24, 0x31	; 49
 236:	09 f4       	brne	.+2      	; 0x23a <main+0xc8>
 238:	74 c0       	rjmp	.+232    	; 0x322 <main+0x1b0>
					MOTOR_CONTROLLER_STATE = ACTIVE_LEFT;
				}
				else if(rx[2] == '9'){
 23a:	89 33       	cpi	r24, 0x39	; 57
 23c:	09 f4       	brne	.+2      	; 0x240 <main+0xce>
 23e:	7d c0       	rjmp	.+250    	; 0x33a <main+0x1c8>
					MOTOR_CONTROLLER_STATE = ACTIVE_LEFT_FORWARD;
				}
				else if(rx[2] == '8'){
 240:	88 33       	cpi	r24, 0x38	; 56
 242:	09 f4       	brne	.+2      	; 0x246 <main+0xd4>
 244:	87 c0       	rjmp	.+270    	; 0x354 <main+0x1e2>
					MOTOR_CONTROLLER_STATE = ACTIVE_FORWARD;
				}
				else if(rx[2] == '4'){
 246:	84 33       	cpi	r24, 0x34	; 52
 248:	09 f4       	brne	.+2      	; 0x24c <main+0xda>
 24a:	91 c0       	rjmp	.+290    	; 0x36e <main+0x1fc>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 24c:	fb e1       	ldi	r31, 0x1B	; 27
 24e:	4f 16       	cp	r4, r31
 250:	51 04       	cpc	r5, r1
 252:	08 f0       	brcs	.+2      	; 0x256 <main+0xe4>
 254:	99 c0       	rjmp	.+306    	; 0x388 <main+0x216>
 256:	f2 01       	movw	r30, r4
 258:	e6 5a       	subi	r30, 0xA6	; 166
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	0c 94 83 03 	jmp	0x706	; 0x706 <__tablejump2__>
 260:	0f 2e       	mov	r0, r31
 262:	f9 e1       	ldi	r31, 0x19	; 25
 264:	4f 2e       	mov	r4, r31
 266:	f0 2d       	mov	r31, r0
 268:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT_FORWARD:
				//right motor faster than left
				GOAL_DIRECTION = FORWARD;
 26a:	1c 8a       	std	Y+20, r1	; 0x14
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 26c:	22 24       	eor	r2, r2
 26e:	2a 94       	dec	r2
 270:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT_FORWARD:
				//right motor faster than left
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
 272:	27 e7       	ldi	r18, 0x77	; 119
 274:	2a 8b       	std	Y+18, r18	; 0x12
 276:	1b 8a       	std	Y+19, r1	; 0x13
 278:	87 c0       	rjmp	.+270    	; 0x388 <main+0x216>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 27a:	0f 2e       	mov	r0, r31
 27c:	f8 e1       	ldi	r31, 0x18	; 24
 27e:	4f 2e       	mov	r4, r31
 280:	f0 2d       	mov	r31, r0
 282:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
				break;
			case ACTIVE_FORWARD:
				//motors equal speed
				GOAL_DIRECTION = FORWARD;
 284:	1c 8a       	std	Y+20, r1	; 0x14
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 286:	22 24       	eor	r2, r2
 288:	2a 94       	dec	r2
 28a:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
				break;
			case ACTIVE_FORWARD:
				//motors equal speed
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	8a 8b       	std	Y+18, r24	; 0x12
 290:	1b 8a       	std	Y+19, r1	; 0x13
 292:	7a c0       	rjmp	.+244    	; 0x388 <main+0x216>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 294:	0f 2e       	mov	r0, r31
 296:	f4 e1       	ldi	r31, 0x14	; 20
 298:	4f 2e       	mov	r4, r31
 29a:	f0 2d       	mov	r31, r0
 29c:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_REVERSE:
				//motors equal speed, negative direction
				GOAL_DIRECTION = REVERSE;
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	9c 8b       	std	Y+20, r25	; 0x14
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 2a2:	22 24       	eor	r2, r2
 2a4:	2a 94       	dec	r2
 2a6:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_REVERSE:
				//motors equal speed, negative direction
				GOAL_DIRECTION = REVERSE;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 2a8:	ef ef       	ldi	r30, 0xFF	; 255
 2aa:	ea 8b       	std	Y+18, r30	; 0x12
 2ac:	1b 8a       	std	Y+19, r1	; 0x13
 2ae:	6c c0       	rjmp	.+216    	; 0x388 <main+0x216>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 2b0:	0f 2e       	mov	r0, r31
 2b2:	f2 e1       	ldi	r31, 0x12	; 18
 2b4:	4f 2e       	mov	r4, r31
 2b6:	f0 2d       	mov	r31, r0
 2b8:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
			case ACTIVE_RIGHT:
				//left motor much faster than right
				//left motor
				GOAL_DIRECTION = FORWARD;
 2ba:	1c 8a       	std	Y+20, r1	; 0x14
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
 2bc:	21 2c       	mov	r2, r1
 2be:	31 2c       	mov	r3, r1
				break;
			case ACTIVE_RIGHT:
				//left motor much faster than right
				//left motor
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 2c0:	ff ef       	ldi	r31, 0xFF	; 255
 2c2:	fa 8b       	std	Y+18, r31	; 0x12
 2c4:	1b 8a       	std	Y+19, r1	; 0x13
 2c6:	60 c0       	rjmp	.+192    	; 0x388 <main+0x216>
			}
			else{ //ERROR
				continue; //exit loop to read next command
			}
		}
		switch (MOTOR_CONTROLLER_STATE){
 2c8:	0f 2e       	mov	r0, r31
 2ca:	f1 e1       	ldi	r31, 0x11	; 17
 2cc:	4f 2e       	mov	r4, r31
 2ce:	f0 2d       	mov	r31, r0
 2d0:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT:
				//right motor much faster than right
				GOAL_DIRECTION = FORWARD;
 2d2:	1c 8a       	std	Y+20, r1	; 0x14
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 2d4:	22 24       	eor	r2, r2
 2d6:	2a 94       	dec	r2
 2d8:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT:
				//right motor much faster than right
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
 2da:	1a 8a       	std	Y+18, r1	; 0x12
 2dc:	1b 8a       	std	Y+19, r1	; 0x13
 2de:	54 c0       	rjmp	.+168    	; 0x388 <main+0x216>
		}
		switch (MOTOR_CONTROLLER_STATE){
			case START:
			case SLOW_STOP:
				//slow down to stop
				GOAL_DIRECTION = FORWARD;
 2e0:	1c 8a       	std	Y+20, r1	; 0x14
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
 2e2:	21 2c       	mov	r2, r1
 2e4:	31 2c       	mov	r3, r1
		switch (MOTOR_CONTROLLER_STATE){
			case START:
			case SLOW_STOP:
				//slow down to stop
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
 2e6:	1a 8a       	std	Y+18, r1	; 0x12
 2e8:	1b 8a       	std	Y+19, r1	; 0x13
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
 2ea:	4e c0       	rjmp	.+156    	; 0x388 <main+0x216>
			case ACTIVE_RIGHT_FORWARD:
				//left motor faster than right
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
				break;
 2ec:	0f 2e       	mov	r0, r31
 2ee:	fa e1       	ldi	r31, 0x1A	; 26
 2f0:	4f 2e       	mov	r4, r31
 2f2:	f0 2d       	mov	r31, r0
 2f4:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
			case ACTIVE_RIGHT_FORWARD:
				//left motor faster than right
				GOAL_DIRECTION = FORWARD;
 2f6:	1c 8a       	std	Y+20, r1	; 0x14
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
 2f8:	0f 2e       	mov	r0, r31
 2fa:	f7 e7       	ldi	r31, 0x77	; 119
 2fc:	2f 2e       	mov	r2, r31
 2fe:	f0 2d       	mov	r31, r0
 300:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
			case ACTIVE_RIGHT_FORWARD:
				//left motor faster than right
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	2a 8b       	std	Y+18, r18	; 0x12
 306:	1b 8a       	std	Y+19, r1	; 0x13
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
				break;
 308:	3f c0       	rjmp	.+126    	; 0x388 <main+0x216>
 30a:	0f 2e       	mov	r0, r31
 30c:	f2 e1       	ldi	r31, 0x12	; 18
 30e:	4f 2e       	mov	r4, r31
 310:	f0 2d       	mov	r31, r0
 312:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
				break;
			case ACTIVE_RIGHT:
				//left motor much faster than right
				//left motor
				GOAL_DIRECTION = FORWARD;
 314:	1c 8a       	std	Y+20, r1	; 0x14
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = STOPPED;
 316:	21 2c       	mov	r2, r1
 318:	31 2c       	mov	r3, r1
				break;
			case ACTIVE_RIGHT:
				//left motor much faster than right
				//left motor
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	8a 8b       	std	Y+18, r24	; 0x12
 31e:	1b 8a       	std	Y+19, r1	; 0x13
 320:	33 c0       	rjmp	.+102    	; 0x388 <main+0x216>
 322:	0f 2e       	mov	r0, r31
 324:	f1 e1       	ldi	r31, 0x11	; 17
 326:	4f 2e       	mov	r4, r31
 328:	f0 2d       	mov	r31, r0
 32a:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT:
				//right motor much faster than right
				GOAL_DIRECTION = FORWARD;
 32c:	1c 8a       	std	Y+20, r1	; 0x14
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 32e:	22 24       	eor	r2, r2
 330:	2a 94       	dec	r2
 332:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT:
				//right motor much faster than right
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
 334:	1a 8a       	std	Y+18, r1	; 0x12
 336:	1b 8a       	std	Y+19, r1	; 0x13
 338:	27 c0       	rjmp	.+78     	; 0x388 <main+0x216>
 33a:	0f 2e       	mov	r0, r31
 33c:	f9 e1       	ldi	r31, 0x19	; 25
 33e:	4f 2e       	mov	r4, r31
 340:	f0 2d       	mov	r31, r0
 342:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT_FORWARD:
				//right motor faster than left
				GOAL_DIRECTION = FORWARD;
 344:	1c 8a       	std	Y+20, r1	; 0x14
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 346:	22 24       	eor	r2, r2
 348:	2a 94       	dec	r2
 34a:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_LEFT_FORWARD:
				//right motor faster than left
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = HALF_SPEED;
 34c:	97 e7       	ldi	r25, 0x77	; 119
 34e:	9a 8b       	std	Y+18, r25	; 0x12
 350:	1b 8a       	std	Y+19, r1	; 0x13
 352:	1a c0       	rjmp	.+52     	; 0x388 <main+0x216>
 354:	0f 2e       	mov	r0, r31
 356:	f8 e1       	ldi	r31, 0x18	; 24
 358:	4f 2e       	mov	r4, r31
 35a:	f0 2d       	mov	r31, r0
 35c:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
				break;
			case ACTIVE_FORWARD:
				//motors equal speed
				GOAL_DIRECTION = FORWARD;
 35e:	1c 8a       	std	Y+20, r1	; 0x14
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 360:	22 24       	eor	r2, r2
 362:	2a 94       	dec	r2
 364:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_RIGHT = HALF_SPEED;
				break;
			case ACTIVE_FORWARD:
				//motors equal speed
				GOAL_DIRECTION = FORWARD;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 366:	ef ef       	ldi	r30, 0xFF	; 255
 368:	ea 8b       	std	Y+18, r30	; 0x12
 36a:	1b 8a       	std	Y+19, r1	; 0x13
 36c:	0d c0       	rjmp	.+26     	; 0x388 <main+0x216>
 36e:	0f 2e       	mov	r0, r31
 370:	f4 e1       	ldi	r31, 0x14	; 20
 372:	4f 2e       	mov	r4, r31
 374:	f0 2d       	mov	r31, r0
 376:	51 2c       	mov	r5, r1
				GOAL_MOTOR_SPEED_LEFT = STOPPED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_REVERSE:
				//motors equal speed, negative direction
				GOAL_DIRECTION = REVERSE;
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	fc 8b       	std	Y+20, r31	; 0x14
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
 37c:	22 24       	eor	r2, r2
 37e:	2a 94       	dec	r2
 380:	31 2c       	mov	r3, r1
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
			case ACTIVE_REVERSE:
				//motors equal speed, negative direction
				GOAL_DIRECTION = REVERSE;
				GOAL_MOTOR_SPEED_LEFT = FULL_SPEED;
 382:	2f ef       	ldi	r18, 0xFF	; 255
 384:	2a 8b       	std	Y+18, r18	; 0x12
 386:	1b 8a       	std	Y+19, r1	; 0x13
				GOAL_MOTOR_SPEED_RIGHT = FULL_SPEED;
				break;
		}
		//Ramp left and right motor speeds 
		if(CURR_DIRECTION == GOAL_DIRECTION){
 388:	8d 89       	ldd	r24, Y+21	; 0x15
 38a:	9c 89       	ldd	r25, Y+20	; 0x14
 38c:	89 13       	cpse	r24, r25
 38e:	38 c0       	rjmp	.+112    	; 0x400 <__LOCK_REGION_LENGTH__>
			//ramp left to GOAL_MOTOR_SPEED_LEFT
			CURR_MOTOR_SPEED_LEFT += (GOAL_MOTOR_SPEED_LEFT - CURR_MOTOR_SPEED_LEFT)/NUMBER_OF_STEPS;
 390:	2a 89       	ldd	r18, Y+18	; 0x12
 392:	3b 89       	ldd	r19, Y+19	; 0x13
 394:	2e 19       	sub	r18, r14
 396:	3f 09       	sbc	r19, r15
 398:	ad ec       	ldi	r26, 0xCD	; 205
 39a:	bc ec       	ldi	r27, 0xCC	; 204
 39c:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	e8 0e       	add	r14, r24
 3ae:	f9 1e       	adc	r15, r25
			if(abs(GOAL_MOTOR_SPEED_LEFT - CURR_MOTOR_SPEED_LEFT) <= CLOSE_TO_GOAL_VALUE){
 3b0:	8a 89       	ldd	r24, Y+18	; 0x12
 3b2:	9b 89       	ldd	r25, Y+19	; 0x13
 3b4:	8e 19       	sub	r24, r14
 3b6:	9f 09       	sbc	r25, r15
 3b8:	8b 3f       	cpi	r24, 0xFB	; 251
 3ba:	ef ef       	ldi	r30, 0xFF	; 255
 3bc:	9e 07       	cpc	r25, r30
 3be:	24 f0       	brlt	.+8      	; 0x3c8 <main+0x256>
 3c0:	06 97       	sbiw	r24, 0x06	; 6
 3c2:	14 f4       	brge	.+4      	; 0x3c8 <main+0x256>
				CURR_MOTOR_SPEED_LEFT = GOAL_MOTOR_SPEED_LEFT;
 3c4:	ea 88       	ldd	r14, Y+18	; 0x12
 3c6:	fb 88       	ldd	r15, Y+19	; 0x13
			}
			//ramp right to GOAL_MOTOR_SPEED_RIGHT
			CURR_MOTOR_SPEED_RIGHT += (GOAL_MOTOR_SPEED_RIGHT - CURR_MOTOR_SPEED_RIGHT)/NUMBER_OF_STEPS;
 3c8:	91 01       	movw	r18, r2
 3ca:	2c 19       	sub	r18, r12
 3cc:	3d 09       	sbc	r19, r13
 3ce:	ad ec       	ldi	r26, 0xCD	; 205
 3d0:	bc ec       	ldi	r27, 0xCC	; 204
 3d2:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	c8 0e       	add	r12, r24
 3e4:	d9 1e       	adc	r13, r25
			if(abs(GOAL_MOTOR_SPEED_RIGHT - CURR_MOTOR_SPEED_RIGHT) <= CLOSE_TO_GOAL_VALUE){
 3e6:	c1 01       	movw	r24, r2
 3e8:	8c 19       	sub	r24, r12
 3ea:	9d 09       	sbc	r25, r13
 3ec:	8b 3f       	cpi	r24, 0xFB	; 251
 3ee:	ff ef       	ldi	r31, 0xFF	; 255
 3f0:	9f 07       	cpc	r25, r31
 3f2:	0c f4       	brge	.+2      	; 0x3f6 <main+0x284>
 3f4:	4e c0       	rjmp	.+156    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 3f6:	06 97       	sbiw	r24, 0x06	; 6
 3f8:	0c f0       	brlt	.+2      	; 0x3fc <main+0x28a>
 3fa:	4b c0       	rjmp	.+150    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
				CURR_MOTOR_SPEED_RIGHT = GOAL_MOTOR_SPEED_RIGHT;
 3fc:	61 01       	movw	r12, r2
 3fe:	49 c0       	rjmp	.+146    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			}
		}
		else{
			//ramp speed to zero
			//ramp left to STOPPED
			CURR_MOTOR_SPEED_LEFT += (STOPPED - CURR_MOTOR_SPEED_LEFT)/NUMBER_OF_STEPS;
 400:	22 27       	eor	r18, r18
 402:	33 27       	eor	r19, r19
 404:	2e 19       	sub	r18, r14
 406:	3f 09       	sbc	r19, r15
 408:	ad ec       	ldi	r26, 0xCD	; 205
 40a:	bc ec       	ldi	r27, 0xCC	; 204
 40c:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	96 95       	lsr	r25
 41a:	87 95       	ror	r24
 41c:	e8 0e       	add	r14, r24
 41e:	f9 1e       	adc	r15, r25
			if(abs(STOPPED - CURR_MOTOR_SPEED_LEFT) <= CLOSE_TO_GOAL_VALUE){
 420:	88 27       	eor	r24, r24
 422:	99 27       	eor	r25, r25
 424:	8e 19       	sub	r24, r14
 426:	9f 09       	sbc	r25, r15
 428:	8b 3f       	cpi	r24, 0xFB	; 251
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	92 07       	cpc	r25, r18
 42e:	1c f0       	brlt	.+6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 430:	06 97       	sbiw	r24, 0x06	; 6
 432:	0c f4       	brge	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	7c c0       	rjmp	.+248    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
				CURR_MOTOR_SPEED_LEFT = STOPPED;
			}
			//ramp right to STOPPED
			CURR_MOTOR_SPEED_RIGHT += (STOPPED - CURR_MOTOR_SPEED_RIGHT)/NUMBER_OF_STEPS;
 436:	22 27       	eor	r18, r18
 438:	33 27       	eor	r19, r19
 43a:	2c 19       	sub	r18, r12
 43c:	3d 09       	sbc	r19, r13
 43e:	ad ec       	ldi	r26, 0xCD	; 205
 440:	bc ec       	ldi	r27, 0xCC	; 204
 442:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 446:	96 95       	lsr	r25
 448:	87 95       	ror	r24
 44a:	96 95       	lsr	r25
 44c:	87 95       	ror	r24
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	c8 0e       	add	r12, r24
 454:	d9 1e       	adc	r13, r25
			if(abs(STOPPED - CURR_MOTOR_SPEED_RIGHT) <= CLOSE_TO_GOAL_VALUE){
 456:	88 27       	eor	r24, r24
 458:	99 27       	eor	r25, r25
 45a:	8c 19       	sub	r24, r12
 45c:	9d 09       	sbc	r25, r13
 45e:	8b 3f       	cpi	r24, 0xFB	; 251
 460:	ef ef       	ldi	r30, 0xFF	; 255
 462:	9e 07       	cpc	r25, r30
 464:	1c f0       	brlt	.+6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 466:	06 97       	sbiw	r24, 0x06	; 6
 468:	0c f4       	brge	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	7a c0       	rjmp	.+244    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
				CURR_MOTOR_SPEED_RIGHT = STOPPED;
			}
			//flip current direction
			if(CURR_MOTOR_SPEED_LEFT == STOPPED && CURR_MOTOR_SPEED_RIGHT == STOPPED){
 46c:	e1 14       	cp	r14, r1
 46e:	f1 04       	cpc	r15, r1
 470:	81 f4       	brne	.+32     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 472:	c1 14       	cp	r12, r1
 474:	d1 04       	cpc	r13, r1
 476:	59 f4       	brne	.+22     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
				if(CURR_DIRECTION == REVERSE){
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	fd 89       	ldd	r31, Y+21	; 0x15
 47c:	f1 30       	cpi	r31, 0x01	; 1
 47e:	09 f4       	brne	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	8d 8b       	std	Y+21, r24	; 0x15
 484:	c1 2c       	mov	r12, r1
 486:	d1 2c       	mov	r13, r1
 488:	e1 2c       	mov	r14, r1
 48a:	f1 2c       	mov	r15, r1
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48e:	e1 2c       	mov	r14, r1
 490:	f1 2c       	mov	r15, r1
				else{
					CURR_DIRECTION = REVERSE;
				}
			}
		}
		PWM_0_duty = CURR_MOTOR_SPEED_LEFT;
 492:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <PWM_0_duty+0x1>
 496:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <PWM_0_duty>
		PWM_1_duty = CURR_MOTOR_SPEED_RIGHT;
 49a:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <__data_end+0x1>
 49e:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <__data_end>
		sprintf(printnum,"%u",PWM_0_duty);
 4a2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <PWM_0_duty>
 4a6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <PWM_0_duty+0x1>
 4aa:	9f 93       	push	r25
 4ac:	8f 93       	push	r24
 4ae:	7f 92       	push	r7
 4b0:	6f 92       	push	r6
 4b2:	9f 92       	push	r9
 4b4:	8f 92       	push	r8
 4b6:	0e 94 98 03 	call	0x730	; 0x730 <sprintf>
		USART0_Print("PWM_0_duty= ");
 4ba:	83 e0       	ldi	r24, 0x03	; 3
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 97 00 	call	0x12e	; 0x12e <USART0_Print>
		USART0_Print(printnum);
 4c2:	c4 01       	movw	r24, r8
 4c4:	0e 94 97 00 	call	0x12e	; 0x12e <USART0_Print>
		USART_0_write(10);
 4c8:	8a e0       	ldi	r24, 0x0A	; 10
 4ca:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <USART_0_write>
		sprintf(printnum,"%u",PWM_1_duty);
 4ce:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 4d2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 4d6:	9f 93       	push	r25
 4d8:	8f 93       	push	r24
 4da:	7f 92       	push	r7
 4dc:	6f 92       	push	r6
 4de:	9f 92       	push	r9
 4e0:	8f 92       	push	r8
 4e2:	0e 94 98 03 	call	0x730	; 0x730 <sprintf>
		USART0_Print("PWM_1_duty= ");
 4e6:	80 e1       	ldi	r24, 0x10	; 16
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 97 00 	call	0x12e	; 0x12e <USART0_Print>
		USART0_Print(printnum);
 4ee:	c4 01       	movw	r24, r8
 4f0:	0e 94 97 00 	call	0x12e	; 0x12e <USART0_Print>
		USART_0_write(10);
 4f4:	8a e0       	ldi	r24, 0x0A	; 10
 4f6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <USART_0_write>
		PWM_0_load_duty_cycle_ch1(PWM_0_duty);
 4fa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <PWM_0_duty>
 4fe:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <PWM_0_duty+0x1>
 502:	0e 94 19 03 	call	0x632	; 0x632 <PWM_0_load_duty_cycle_ch1>
		PWM_1_load_duty_cycle_ch1(PWM_1_duty);
 506:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 50a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 50e:	0e 94 4b 03 	call	0x696	; 0x696 <PWM_1_load_duty_cycle_ch1>
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
 51c:	66 ce       	rjmp	.-820    	; 0x1ea <main+0x78>
		}
		//verify first and last character
		if(rx[0] == 's' && rx[3] == 'e'){
			if(rx[1] == '0'){
				if(rx[2] == '0'){
					MOTOR_CONTROLLER_STATE = START;
 51e:	41 2c       	mov	r4, r1
 520:	51 2c       	mov	r5, r1
 522:	de ce       	rjmp	.-580    	; 0x2e0 <main+0x16e>
				}
				else if(rx[2] == '2'){
					MOTOR_CONTROLLER_STATE = SLOW_STOP;
 524:	68 94       	set
 526:	44 24       	eor	r4, r4
 528:	41 f8       	bld	r4, 1
 52a:	51 2c       	mov	r5, r1
 52c:	d9 ce       	rjmp	.-590    	; 0x2e0 <main+0x16e>
			CURR_MOTOR_SPEED_LEFT += (STOPPED - CURR_MOTOR_SPEED_LEFT)/NUMBER_OF_STEPS;
			if(abs(STOPPED - CURR_MOTOR_SPEED_LEFT) <= CLOSE_TO_GOAL_VALUE){
				CURR_MOTOR_SPEED_LEFT = STOPPED;
			}
			//ramp right to STOPPED
			CURR_MOTOR_SPEED_RIGHT += (STOPPED - CURR_MOTOR_SPEED_RIGHT)/NUMBER_OF_STEPS;
 52e:	22 27       	eor	r18, r18
 530:	33 27       	eor	r19, r19
 532:	2c 19       	sub	r18, r12
 534:	3d 09       	sbc	r19, r13
 536:	ad ec       	ldi	r26, 0xCD	; 205
 538:	bc ec       	ldi	r27, 0xCC	; 204
 53a:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	96 95       	lsr	r25
 548:	87 95       	ror	r24
 54a:	c8 0e       	add	r12, r24
 54c:	d9 1e       	adc	r13, r25
			if(abs(STOPPED - CURR_MOTOR_SPEED_RIGHT) <= CLOSE_TO_GOAL_VALUE){
 54e:	88 27       	eor	r24, r24
 550:	99 27       	eor	r25, r25
 552:	8c 19       	sub	r24, r12
 554:	9d 09       	sbc	r25, r13
 556:	8b 3f       	cpi	r24, 0xFB	; 251
 558:	ef ef       	ldi	r30, 0xFF	; 255
 55a:	9e 07       	cpc	r25, r30
 55c:	44 f4       	brge	.+16     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 55e:	89 cf       	rjmp	.-238    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
				CURR_MOTOR_SPEED_RIGHT = STOPPED;
			}
			//flip current direction
			if(CURR_MOTOR_SPEED_LEFT == STOPPED && CURR_MOTOR_SPEED_RIGHT == STOPPED){
 560:	e1 14       	cp	r14, r1
 562:	f1 04       	cpc	r15, r1
 564:	09 f4       	brne	.+2      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 566:	88 cf       	rjmp	.-240    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
				CURR_MOTOR_SPEED_LEFT = STOPPED;
			}
			//ramp right to STOPPED
			CURR_MOTOR_SPEED_RIGHT += (STOPPED - CURR_MOTOR_SPEED_RIGHT)/NUMBER_OF_STEPS;
			if(abs(STOPPED - CURR_MOTOR_SPEED_RIGHT) <= CLOSE_TO_GOAL_VALUE){
				CURR_MOTOR_SPEED_RIGHT = STOPPED;
 568:	c1 2c       	mov	r12, r1
 56a:	d1 2c       	mov	r13, r1
 56c:	92 cf       	rjmp	.-220    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			if(abs(STOPPED - CURR_MOTOR_SPEED_LEFT) <= CLOSE_TO_GOAL_VALUE){
				CURR_MOTOR_SPEED_LEFT = STOPPED;
			}
			//ramp right to STOPPED
			CURR_MOTOR_SPEED_RIGHT += (STOPPED - CURR_MOTOR_SPEED_RIGHT)/NUMBER_OF_STEPS;
			if(abs(STOPPED - CURR_MOTOR_SPEED_RIGHT) <= CLOSE_TO_GOAL_VALUE){
 56e:	06 97       	sbiw	r24, 0x06	; 6
 570:	0c f4       	brge	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 572:	82 cf       	rjmp	.-252    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		else{
			//ramp speed to zero
			//ramp left to STOPPED
			CURR_MOTOR_SPEED_LEFT += (STOPPED - CURR_MOTOR_SPEED_LEFT)/NUMBER_OF_STEPS;
			if(abs(STOPPED - CURR_MOTOR_SPEED_LEFT) <= CLOSE_TO_GOAL_VALUE){
				CURR_MOTOR_SPEED_LEFT = STOPPED;
 574:	e1 2c       	mov	r14, r1
 576:	f1 2c       	mov	r15, r1
 578:	79 cf       	rjmp	.-270    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>

0000057a <PWM_0_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 57a:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 57c:	29 98       	cbi	0x05, 1	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PWM_0_init();
 57e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <PWM_0_init>
 582:	08 95       	ret

00000584 <PWM_1_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 584:	52 9a       	sbi	0x0a, 2	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 586:	5a 98       	cbi	0x0b, 2	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PWM_1_init();
 588:	0e 94 30 03 	call	0x660	; 0x660 <PWM_1_init>
 58c:	08 95       	ret

0000058e <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 58e:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 590:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 592:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 594:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 596:	0e 94 62 03 	call	0x6c4	; 0x6c4 <USART_0_init>
 59a:	08 95       	ret

0000059c <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 59c:	8d e3       	ldi	r24, 0x3D	; 61
 59e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 5a8:	94 b1       	in	r25, 0x04	; 4
 5aa:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 5ac:	95 b1       	in	r25, 0x05	; 5
 5ae:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 5b0:	97 b1       	in	r25, 0x07	; 7
 5b2:	90 78       	andi	r25, 0x80	; 128
 5b4:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 5b6:	98 b1       	in	r25, 0x08	; 8
 5b8:	9f 67       	ori	r25, 0x7F	; 127
 5ba:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 5bc:	9a b1       	in	r25, 0x0a	; 10
 5be:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 5c0:	9b b1       	in	r25, 0x0b	; 11
 5c2:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 5c4:	8d b1       	in	r24, 0x0d	; 13
 5c6:	80 7f       	andi	r24, 0xF0	; 240
 5c8:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 5ca:	8e b1       	in	r24, 0x0e	; 14
 5cc:	8f 60       	ori	r24, 0x0F	; 15
 5ce:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	60 e8       	ldi	r22, 0x80	; 128
 5d4:	81 e6       	ldi	r24, 0x61	; 97
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 5dc:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 5de:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	PWM_0_initialization();
 5e0:	0e 94 bd 02 	call	0x57a	; 0x57a <PWM_0_initialization>

	PWM_1_initialization();
 5e4:	0e 94 c2 02 	call	0x584	; 0x584 <PWM_1_initialization>

	USART_0_initialization();
 5e8:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_0_initialization>
 5ec:	08 95       	ret

000005ee <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 5ee:	2f b7       	in	r18, 0x3f	; 63
	cli
 5f0:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 5f2:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 5f4:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 5f6:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 5f8:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 5fa:	08 95       	ret

000005fc <PWM_0_init>:
 *
 * \return Nothing.
 */
void PWM_1_register_callback(pwm_irq_cb_t f)
{
	PWM_1_cb = f;
 5fc:	e4 e6       	ldi	r30, 0x64	; 100
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	87 7f       	andi	r24, 0xF7	; 247
 604:	80 83       	st	Z, r24
 606:	83 e2       	ldi	r24, 0x23	; 35
 608:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 60c:	81 e1       	ldi	r24, 0x11	; 17
 60e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	08 95       	ret

0000061c <PWM_0_enable_output_ch1>:
 61c:	e0 e8       	ldi	r30, 0x80	; 128
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	80 62       	ori	r24, 0x20	; 32
 624:	80 83       	st	Z, r24
 626:	08 95       	ret

00000628 <PWM_0_load_counter>:
 628:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 62c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 630:	08 95       	ret

00000632 <PWM_0_load_duty_cycle_ch1>:
 632:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 636:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 63a:	08 95       	ret

0000063c <__vector_13>:
 63c:	1f 92       	push	r1
 63e:	0f 92       	push	r0
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	0f 92       	push	r0
 644:	11 24       	eor	r1, r1
 646:	8f 93       	push	r24
 648:	16 ba       	out	0x16, r1	; 22
 64a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <callback_count.1842>
 64e:	8f 5f       	subi	r24, 0xFF	; 255
 650:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <callback_count.1842>
 654:	8f 91       	pop	r24
 656:	0f 90       	pop	r0
 658:	0f be       	out	0x3f, r0	; 63
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti

00000660 <PWM_1_init>:
 660:	e5 e6       	ldi	r30, 0x65	; 101
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	8e 7f       	andi	r24, 0xFE	; 254
 668:	80 83       	st	Z, r24
 66a:	83 e2       	ldi	r24, 0x23	; 35
 66c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 670:	81 e1       	ldi	r24, 0x11	; 17
 672:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	08 95       	ret

00000680 <PWM_1_enable_output_ch1>:
 680:	e0 e9       	ldi	r30, 0x90	; 144
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	80 62       	ori	r24, 0x20	; 32
 688:	80 83       	st	Z, r24
 68a:	08 95       	ret

0000068c <PWM_1_load_counter>:
 68c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 690:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 694:	08 95       	ret

00000696 <PWM_1_load_duty_cycle_ch1>:
 696:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 69a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 69e:	08 95       	ret

000006a0 <__vector_35>:
}

ISR(TIMER3_OVF_vect)
{
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TIFR3 = TOV3;
 6ac:	18 ba       	out	0x18, r1	; 24

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_1_INTERRUPT_CB_RATE) && (PWM_1_INTERRUPT_CB_RATE != 0)) {
 6ae:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <callback_count.1871>
 6b2:	8f 5f       	subi	r24, 0xFF	; 255
 6b4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <callback_count.1871>
		if (PWM_1_cb != NULL) {
			PWM_1_cb();
		}
	}
}
 6b8:	8f 91       	pop	r24
 6ba:	0f 90       	pop	r0
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	0f 90       	pop	r0
 6c0:	1f 90       	pop	r1
 6c2:	18 95       	reti

000006c4 <USART_0_init>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
	return (!(UCSR0A & (1 << TXC0)));
}
 6c4:	e4 e6       	ldi	r30, 0x64	; 100
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	8d 7f       	andi	r24, 0xFD	; 253
 6cc:	80 83       	st	Z, r24
 6ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 6d2:	83 e3       	ldi	r24, 0x33	; 51
 6d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 6d8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 6dc:	88 e9       	ldi	r24, 0x98	; 152
 6de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	08 95       	ret

000006e6 <USART_0_read>:
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
 6e6:	e0 ec       	ldi	r30, 0xC0	; 192
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	88 23       	and	r24, r24
 6ee:	ec f7       	brge	.-6      	; 0x6ea <USART_0_read+0x4>
		;
	return UDR0;
 6f0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 6f4:	08 95       	ret

000006f6 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 6f6:	e0 ec       	ldi	r30, 0xC0	; 192
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	90 81       	ld	r25, Z
 6fc:	95 ff       	sbrs	r25, 5
 6fe:	fd cf       	rjmp	.-6      	; 0x6fa <USART_0_write+0x4>
		;
	UDR0 = data;
 700:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 704:	08 95       	ret

00000706 <__tablejump2__>:
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	05 90       	lpm	r0, Z+
 70c:	f4 91       	lpm	r31, Z
 70e:	e0 2d       	mov	r30, r0
 710:	09 94       	ijmp

00000712 <__umulhisi3>:
 712:	a2 9f       	mul	r26, r18
 714:	b0 01       	movw	r22, r0
 716:	b3 9f       	mul	r27, r19
 718:	c0 01       	movw	r24, r0
 71a:	a3 9f       	mul	r26, r19
 71c:	70 0d       	add	r23, r0
 71e:	81 1d       	adc	r24, r1
 720:	11 24       	eor	r1, r1
 722:	91 1d       	adc	r25, r1
 724:	b2 9f       	mul	r27, r18
 726:	70 0d       	add	r23, r0
 728:	81 1d       	adc	r24, r1
 72a:	11 24       	eor	r1, r1
 72c:	91 1d       	adc	r25, r1
 72e:	08 95       	ret

00000730 <sprintf>:
 730:	ae e0       	ldi	r26, 0x0E	; 14
 732:	b0 e0       	ldi	r27, 0x00	; 0
 734:	ee e9       	ldi	r30, 0x9E	; 158
 736:	f3 e0       	ldi	r31, 0x03	; 3
 738:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__prologue_saves__+0x1c>
 73c:	0d 89       	ldd	r16, Y+21	; 0x15
 73e:	1e 89       	ldd	r17, Y+22	; 0x16
 740:	86 e0       	ldi	r24, 0x06	; 6
 742:	8c 83       	std	Y+4, r24	; 0x04
 744:	1a 83       	std	Y+2, r17	; 0x02
 746:	09 83       	std	Y+1, r16	; 0x01
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	9f e7       	ldi	r25, 0x7F	; 127
 74c:	9e 83       	std	Y+6, r25	; 0x06
 74e:	8d 83       	std	Y+5, r24	; 0x05
 750:	ae 01       	movw	r20, r28
 752:	47 5e       	subi	r20, 0xE7	; 231
 754:	5f 4f       	sbci	r21, 0xFF	; 255
 756:	6f 89       	ldd	r22, Y+23	; 0x17
 758:	78 8d       	ldd	r23, Y+24	; 0x18
 75a:	ce 01       	movw	r24, r28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	0e 94 ba 03 	call	0x774	; 0x774 <vfprintf>
 762:	ef 81       	ldd	r30, Y+7	; 0x07
 764:	f8 85       	ldd	r31, Y+8	; 0x08
 766:	e0 0f       	add	r30, r16
 768:	f1 1f       	adc	r31, r17
 76a:	10 82       	st	Z, r1
 76c:	2e 96       	adiw	r28, 0x0e	; 14
 76e:	e4 e0       	ldi	r30, 0x04	; 4
 770:	0c 94 75 06 	jmp	0xcea	; 0xcea <__epilogue_restores__+0x1c>

00000774 <vfprintf>:
 774:	ab e0       	ldi	r26, 0x0B	; 11
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	e0 ec       	ldi	r30, 0xC0	; 192
 77a:	f3 e0       	ldi	r31, 0x03	; 3
 77c:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__prologue_saves__>
 780:	6c 01       	movw	r12, r24
 782:	7b 01       	movw	r14, r22
 784:	8a 01       	movw	r16, r20
 786:	fc 01       	movw	r30, r24
 788:	17 82       	std	Z+7, r1	; 0x07
 78a:	16 82       	std	Z+6, r1	; 0x06
 78c:	83 81       	ldd	r24, Z+3	; 0x03
 78e:	81 ff       	sbrs	r24, 1
 790:	cc c1       	rjmp	.+920    	; 0xb2a <__stack+0x22b>
 792:	ce 01       	movw	r24, r28
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	3c 01       	movw	r6, r24
 798:	f6 01       	movw	r30, r12
 79a:	93 81       	ldd	r25, Z+3	; 0x03
 79c:	f7 01       	movw	r30, r14
 79e:	93 fd       	sbrc	r25, 3
 7a0:	85 91       	lpm	r24, Z+
 7a2:	93 ff       	sbrs	r25, 3
 7a4:	81 91       	ld	r24, Z+
 7a6:	7f 01       	movw	r14, r30
 7a8:	88 23       	and	r24, r24
 7aa:	09 f4       	brne	.+2      	; 0x7ae <vfprintf+0x3a>
 7ac:	ba c1       	rjmp	.+884    	; 0xb22 <__stack+0x223>
 7ae:	85 32       	cpi	r24, 0x25	; 37
 7b0:	39 f4       	brne	.+14     	; 0x7c0 <vfprintf+0x4c>
 7b2:	93 fd       	sbrc	r25, 3
 7b4:	85 91       	lpm	r24, Z+
 7b6:	93 ff       	sbrs	r25, 3
 7b8:	81 91       	ld	r24, Z+
 7ba:	7f 01       	movw	r14, r30
 7bc:	85 32       	cpi	r24, 0x25	; 37
 7be:	29 f4       	brne	.+10     	; 0x7ca <vfprintf+0x56>
 7c0:	b6 01       	movw	r22, r12
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 7c8:	e7 cf       	rjmp	.-50     	; 0x798 <vfprintf+0x24>
 7ca:	91 2c       	mov	r9, r1
 7cc:	21 2c       	mov	r2, r1
 7ce:	31 2c       	mov	r3, r1
 7d0:	ff e1       	ldi	r31, 0x1F	; 31
 7d2:	f3 15       	cp	r31, r3
 7d4:	d8 f0       	brcs	.+54     	; 0x80c <vfprintf+0x98>
 7d6:	8b 32       	cpi	r24, 0x2B	; 43
 7d8:	79 f0       	breq	.+30     	; 0x7f8 <vfprintf+0x84>
 7da:	38 f4       	brcc	.+14     	; 0x7ea <vfprintf+0x76>
 7dc:	80 32       	cpi	r24, 0x20	; 32
 7de:	79 f0       	breq	.+30     	; 0x7fe <vfprintf+0x8a>
 7e0:	83 32       	cpi	r24, 0x23	; 35
 7e2:	a1 f4       	brne	.+40     	; 0x80c <vfprintf+0x98>
 7e4:	23 2d       	mov	r18, r3
 7e6:	20 61       	ori	r18, 0x10	; 16
 7e8:	1d c0       	rjmp	.+58     	; 0x824 <vfprintf+0xb0>
 7ea:	8d 32       	cpi	r24, 0x2D	; 45
 7ec:	61 f0       	breq	.+24     	; 0x806 <vfprintf+0x92>
 7ee:	80 33       	cpi	r24, 0x30	; 48
 7f0:	69 f4       	brne	.+26     	; 0x80c <vfprintf+0x98>
 7f2:	23 2d       	mov	r18, r3
 7f4:	21 60       	ori	r18, 0x01	; 1
 7f6:	16 c0       	rjmp	.+44     	; 0x824 <vfprintf+0xb0>
 7f8:	83 2d       	mov	r24, r3
 7fa:	82 60       	ori	r24, 0x02	; 2
 7fc:	38 2e       	mov	r3, r24
 7fe:	e3 2d       	mov	r30, r3
 800:	e4 60       	ori	r30, 0x04	; 4
 802:	3e 2e       	mov	r3, r30
 804:	2a c0       	rjmp	.+84     	; 0x85a <vfprintf+0xe6>
 806:	f3 2d       	mov	r31, r3
 808:	f8 60       	ori	r31, 0x08	; 8
 80a:	1d c0       	rjmp	.+58     	; 0x846 <vfprintf+0xd2>
 80c:	37 fc       	sbrc	r3, 7
 80e:	2d c0       	rjmp	.+90     	; 0x86a <vfprintf+0xf6>
 810:	20 ed       	ldi	r18, 0xD0	; 208
 812:	28 0f       	add	r18, r24
 814:	2a 30       	cpi	r18, 0x0A	; 10
 816:	40 f0       	brcs	.+16     	; 0x828 <vfprintf+0xb4>
 818:	8e 32       	cpi	r24, 0x2E	; 46
 81a:	b9 f4       	brne	.+46     	; 0x84a <vfprintf+0xd6>
 81c:	36 fc       	sbrc	r3, 6
 81e:	81 c1       	rjmp	.+770    	; 0xb22 <__stack+0x223>
 820:	23 2d       	mov	r18, r3
 822:	20 64       	ori	r18, 0x40	; 64
 824:	32 2e       	mov	r3, r18
 826:	19 c0       	rjmp	.+50     	; 0x85a <vfprintf+0xe6>
 828:	36 fe       	sbrs	r3, 6
 82a:	06 c0       	rjmp	.+12     	; 0x838 <vfprintf+0xc4>
 82c:	8a e0       	ldi	r24, 0x0A	; 10
 82e:	98 9e       	mul	r9, r24
 830:	20 0d       	add	r18, r0
 832:	11 24       	eor	r1, r1
 834:	92 2e       	mov	r9, r18
 836:	11 c0       	rjmp	.+34     	; 0x85a <vfprintf+0xe6>
 838:	ea e0       	ldi	r30, 0x0A	; 10
 83a:	2e 9e       	mul	r2, r30
 83c:	20 0d       	add	r18, r0
 83e:	11 24       	eor	r1, r1
 840:	22 2e       	mov	r2, r18
 842:	f3 2d       	mov	r31, r3
 844:	f0 62       	ori	r31, 0x20	; 32
 846:	3f 2e       	mov	r3, r31
 848:	08 c0       	rjmp	.+16     	; 0x85a <vfprintf+0xe6>
 84a:	8c 36       	cpi	r24, 0x6C	; 108
 84c:	21 f4       	brne	.+8      	; 0x856 <vfprintf+0xe2>
 84e:	83 2d       	mov	r24, r3
 850:	80 68       	ori	r24, 0x80	; 128
 852:	38 2e       	mov	r3, r24
 854:	02 c0       	rjmp	.+4      	; 0x85a <vfprintf+0xe6>
 856:	88 36       	cpi	r24, 0x68	; 104
 858:	41 f4       	brne	.+16     	; 0x86a <vfprintf+0xf6>
 85a:	f7 01       	movw	r30, r14
 85c:	93 fd       	sbrc	r25, 3
 85e:	85 91       	lpm	r24, Z+
 860:	93 ff       	sbrs	r25, 3
 862:	81 91       	ld	r24, Z+
 864:	7f 01       	movw	r14, r30
 866:	81 11       	cpse	r24, r1
 868:	b3 cf       	rjmp	.-154    	; 0x7d0 <vfprintf+0x5c>
 86a:	98 2f       	mov	r25, r24
 86c:	9f 7d       	andi	r25, 0xDF	; 223
 86e:	95 54       	subi	r25, 0x45	; 69
 870:	93 30       	cpi	r25, 0x03	; 3
 872:	28 f4       	brcc	.+10     	; 0x87e <vfprintf+0x10a>
 874:	0c 5f       	subi	r16, 0xFC	; 252
 876:	1f 4f       	sbci	r17, 0xFF	; 255
 878:	9f e3       	ldi	r25, 0x3F	; 63
 87a:	99 83       	std	Y+1, r25	; 0x01
 87c:	0d c0       	rjmp	.+26     	; 0x898 <vfprintf+0x124>
 87e:	83 36       	cpi	r24, 0x63	; 99
 880:	31 f0       	breq	.+12     	; 0x88e <vfprintf+0x11a>
 882:	83 37       	cpi	r24, 0x73	; 115
 884:	71 f0       	breq	.+28     	; 0x8a2 <vfprintf+0x12e>
 886:	83 35       	cpi	r24, 0x53	; 83
 888:	09 f0       	breq	.+2      	; 0x88c <vfprintf+0x118>
 88a:	59 c0       	rjmp	.+178    	; 0x93e <__stack+0x3f>
 88c:	21 c0       	rjmp	.+66     	; 0x8d0 <vfprintf+0x15c>
 88e:	f8 01       	movw	r30, r16
 890:	80 81       	ld	r24, Z
 892:	89 83       	std	Y+1, r24	; 0x01
 894:	0e 5f       	subi	r16, 0xFE	; 254
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	88 24       	eor	r8, r8
 89a:	83 94       	inc	r8
 89c:	91 2c       	mov	r9, r1
 89e:	53 01       	movw	r10, r6
 8a0:	13 c0       	rjmp	.+38     	; 0x8c8 <vfprintf+0x154>
 8a2:	28 01       	movw	r4, r16
 8a4:	f2 e0       	ldi	r31, 0x02	; 2
 8a6:	4f 0e       	add	r4, r31
 8a8:	51 1c       	adc	r5, r1
 8aa:	f8 01       	movw	r30, r16
 8ac:	a0 80       	ld	r10, Z
 8ae:	b1 80       	ldd	r11, Z+1	; 0x01
 8b0:	36 fe       	sbrs	r3, 6
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <vfprintf+0x146>
 8b4:	69 2d       	mov	r22, r9
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <vfprintf+0x14a>
 8ba:	6f ef       	ldi	r22, 0xFF	; 255
 8bc:	7f ef       	ldi	r23, 0xFF	; 255
 8be:	c5 01       	movw	r24, r10
 8c0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <strnlen>
 8c4:	4c 01       	movw	r8, r24
 8c6:	82 01       	movw	r16, r4
 8c8:	f3 2d       	mov	r31, r3
 8ca:	ff 77       	andi	r31, 0x7F	; 127
 8cc:	3f 2e       	mov	r3, r31
 8ce:	16 c0       	rjmp	.+44     	; 0x8fc <vfprintf+0x188>
 8d0:	28 01       	movw	r4, r16
 8d2:	22 e0       	ldi	r18, 0x02	; 2
 8d4:	42 0e       	add	r4, r18
 8d6:	51 1c       	adc	r5, r1
 8d8:	f8 01       	movw	r30, r16
 8da:	a0 80       	ld	r10, Z
 8dc:	b1 80       	ldd	r11, Z+1	; 0x01
 8de:	36 fe       	sbrs	r3, 6
 8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <vfprintf+0x174>
 8e2:	69 2d       	mov	r22, r9
 8e4:	70 e0       	ldi	r23, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <vfprintf+0x178>
 8e8:	6f ef       	ldi	r22, 0xFF	; 255
 8ea:	7f ef       	ldi	r23, 0xFF	; 255
 8ec:	c5 01       	movw	r24, r10
 8ee:	0e 94 9b 05 	call	0xb36	; 0xb36 <strnlen_P>
 8f2:	4c 01       	movw	r8, r24
 8f4:	f3 2d       	mov	r31, r3
 8f6:	f0 68       	ori	r31, 0x80	; 128
 8f8:	3f 2e       	mov	r3, r31
 8fa:	82 01       	movw	r16, r4
 8fc:	33 fc       	sbrc	r3, 3
 8fe:	1b c0       	rjmp	.+54     	; 0x936 <__stack+0x37>
 900:	82 2d       	mov	r24, r2
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	88 16       	cp	r8, r24
 906:	99 06       	cpc	r9, r25
 908:	b0 f4       	brcc	.+44     	; 0x936 <__stack+0x37>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 914:	2a 94       	dec	r2
 916:	f4 cf       	rjmp	.-24     	; 0x900 <__stack+0x1>
 918:	f5 01       	movw	r30, r10
 91a:	37 fc       	sbrc	r3, 7
 91c:	85 91       	lpm	r24, Z+
 91e:	37 fe       	sbrs	r3, 7
 920:	81 91       	ld	r24, Z+
 922:	5f 01       	movw	r10, r30
 924:	b6 01       	movw	r22, r12
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 92c:	21 10       	cpse	r2, r1
 92e:	2a 94       	dec	r2
 930:	21 e0       	ldi	r18, 0x01	; 1
 932:	82 1a       	sub	r8, r18
 934:	91 08       	sbc	r9, r1
 936:	81 14       	cp	r8, r1
 938:	91 04       	cpc	r9, r1
 93a:	71 f7       	brne	.-36     	; 0x918 <__stack+0x19>
 93c:	e8 c0       	rjmp	.+464    	; 0xb0e <__stack+0x20f>
 93e:	84 36       	cpi	r24, 0x64	; 100
 940:	11 f0       	breq	.+4      	; 0x946 <__stack+0x47>
 942:	89 36       	cpi	r24, 0x69	; 105
 944:	41 f5       	brne	.+80     	; 0x996 <__stack+0x97>
 946:	f8 01       	movw	r30, r16
 948:	37 fe       	sbrs	r3, 7
 94a:	07 c0       	rjmp	.+14     	; 0x95a <__stack+0x5b>
 94c:	60 81       	ld	r22, Z
 94e:	71 81       	ldd	r23, Z+1	; 0x01
 950:	82 81       	ldd	r24, Z+2	; 0x02
 952:	93 81       	ldd	r25, Z+3	; 0x03
 954:	0c 5f       	subi	r16, 0xFC	; 252
 956:	1f 4f       	sbci	r17, 0xFF	; 255
 958:	08 c0       	rjmp	.+16     	; 0x96a <__stack+0x6b>
 95a:	60 81       	ld	r22, Z
 95c:	71 81       	ldd	r23, Z+1	; 0x01
 95e:	07 2e       	mov	r0, r23
 960:	00 0c       	add	r0, r0
 962:	88 0b       	sbc	r24, r24
 964:	99 0b       	sbc	r25, r25
 966:	0e 5f       	subi	r16, 0xFE	; 254
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	f3 2d       	mov	r31, r3
 96c:	ff 76       	andi	r31, 0x6F	; 111
 96e:	3f 2e       	mov	r3, r31
 970:	97 ff       	sbrs	r25, 7
 972:	09 c0       	rjmp	.+18     	; 0x986 <__stack+0x87>
 974:	90 95       	com	r25
 976:	80 95       	com	r24
 978:	70 95       	com	r23
 97a:	61 95       	neg	r22
 97c:	7f 4f       	sbci	r23, 0xFF	; 255
 97e:	8f 4f       	sbci	r24, 0xFF	; 255
 980:	9f 4f       	sbci	r25, 0xFF	; 255
 982:	f0 68       	ori	r31, 0x80	; 128
 984:	3f 2e       	mov	r3, r31
 986:	2a e0       	ldi	r18, 0x0A	; 10
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	a3 01       	movw	r20, r6
 98c:	0e 94 ed 05 	call	0xbda	; 0xbda <__ultoa_invert>
 990:	88 2e       	mov	r8, r24
 992:	86 18       	sub	r8, r6
 994:	45 c0       	rjmp	.+138    	; 0xa20 <__stack+0x121>
 996:	85 37       	cpi	r24, 0x75	; 117
 998:	31 f4       	brne	.+12     	; 0x9a6 <__stack+0xa7>
 99a:	23 2d       	mov	r18, r3
 99c:	2f 7e       	andi	r18, 0xEF	; 239
 99e:	b2 2e       	mov	r11, r18
 9a0:	2a e0       	ldi	r18, 0x0A	; 10
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	25 c0       	rjmp	.+74     	; 0x9f0 <__stack+0xf1>
 9a6:	93 2d       	mov	r25, r3
 9a8:	99 7f       	andi	r25, 0xF9	; 249
 9aa:	b9 2e       	mov	r11, r25
 9ac:	8f 36       	cpi	r24, 0x6F	; 111
 9ae:	c1 f0       	breq	.+48     	; 0x9e0 <__stack+0xe1>
 9b0:	18 f4       	brcc	.+6      	; 0x9b8 <__stack+0xb9>
 9b2:	88 35       	cpi	r24, 0x58	; 88
 9b4:	79 f0       	breq	.+30     	; 0x9d4 <__stack+0xd5>
 9b6:	b5 c0       	rjmp	.+362    	; 0xb22 <__stack+0x223>
 9b8:	80 37       	cpi	r24, 0x70	; 112
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <__stack+0xc3>
 9bc:	88 37       	cpi	r24, 0x78	; 120
 9be:	21 f0       	breq	.+8      	; 0x9c8 <__stack+0xc9>
 9c0:	b0 c0       	rjmp	.+352    	; 0xb22 <__stack+0x223>
 9c2:	e9 2f       	mov	r30, r25
 9c4:	e0 61       	ori	r30, 0x10	; 16
 9c6:	be 2e       	mov	r11, r30
 9c8:	b4 fe       	sbrs	r11, 4
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__stack+0xe7>
 9cc:	fb 2d       	mov	r31, r11
 9ce:	f4 60       	ori	r31, 0x04	; 4
 9d0:	bf 2e       	mov	r11, r31
 9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <__stack+0xe7>
 9d4:	34 fe       	sbrs	r3, 4
 9d6:	0a c0       	rjmp	.+20     	; 0x9ec <__stack+0xed>
 9d8:	29 2f       	mov	r18, r25
 9da:	26 60       	ori	r18, 0x06	; 6
 9dc:	b2 2e       	mov	r11, r18
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <__stack+0xed>
 9e0:	28 e0       	ldi	r18, 0x08	; 8
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__stack+0xf1>
 9e6:	20 e1       	ldi	r18, 0x10	; 16
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <__stack+0xf1>
 9ec:	20 e1       	ldi	r18, 0x10	; 16
 9ee:	32 e0       	ldi	r19, 0x02	; 2
 9f0:	f8 01       	movw	r30, r16
 9f2:	b7 fe       	sbrs	r11, 7
 9f4:	07 c0       	rjmp	.+14     	; 0xa04 <__stack+0x105>
 9f6:	60 81       	ld	r22, Z
 9f8:	71 81       	ldd	r23, Z+1	; 0x01
 9fa:	82 81       	ldd	r24, Z+2	; 0x02
 9fc:	93 81       	ldd	r25, Z+3	; 0x03
 9fe:	0c 5f       	subi	r16, 0xFC	; 252
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	06 c0       	rjmp	.+12     	; 0xa10 <__stack+0x111>
 a04:	60 81       	ld	r22, Z
 a06:	71 81       	ldd	r23, Z+1	; 0x01
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 5f       	subi	r16, 0xFE	; 254
 a0e:	1f 4f       	sbci	r17, 0xFF	; 255
 a10:	a3 01       	movw	r20, r6
 a12:	0e 94 ed 05 	call	0xbda	; 0xbda <__ultoa_invert>
 a16:	88 2e       	mov	r8, r24
 a18:	86 18       	sub	r8, r6
 a1a:	fb 2d       	mov	r31, r11
 a1c:	ff 77       	andi	r31, 0x7F	; 127
 a1e:	3f 2e       	mov	r3, r31
 a20:	36 fe       	sbrs	r3, 6
 a22:	0d c0       	rjmp	.+26     	; 0xa3e <__stack+0x13f>
 a24:	23 2d       	mov	r18, r3
 a26:	2e 7f       	andi	r18, 0xFE	; 254
 a28:	a2 2e       	mov	r10, r18
 a2a:	89 14       	cp	r8, r9
 a2c:	58 f4       	brcc	.+22     	; 0xa44 <__stack+0x145>
 a2e:	34 fe       	sbrs	r3, 4
 a30:	0b c0       	rjmp	.+22     	; 0xa48 <__stack+0x149>
 a32:	32 fc       	sbrc	r3, 2
 a34:	09 c0       	rjmp	.+18     	; 0xa48 <__stack+0x149>
 a36:	83 2d       	mov	r24, r3
 a38:	8e 7e       	andi	r24, 0xEE	; 238
 a3a:	a8 2e       	mov	r10, r24
 a3c:	05 c0       	rjmp	.+10     	; 0xa48 <__stack+0x149>
 a3e:	b8 2c       	mov	r11, r8
 a40:	a3 2c       	mov	r10, r3
 a42:	03 c0       	rjmp	.+6      	; 0xa4a <__stack+0x14b>
 a44:	b8 2c       	mov	r11, r8
 a46:	01 c0       	rjmp	.+2      	; 0xa4a <__stack+0x14b>
 a48:	b9 2c       	mov	r11, r9
 a4a:	a4 fe       	sbrs	r10, 4
 a4c:	0f c0       	rjmp	.+30     	; 0xa6c <__stack+0x16d>
 a4e:	fe 01       	movw	r30, r28
 a50:	e8 0d       	add	r30, r8
 a52:	f1 1d       	adc	r31, r1
 a54:	80 81       	ld	r24, Z
 a56:	80 33       	cpi	r24, 0x30	; 48
 a58:	21 f4       	brne	.+8      	; 0xa62 <__stack+0x163>
 a5a:	9a 2d       	mov	r25, r10
 a5c:	99 7e       	andi	r25, 0xE9	; 233
 a5e:	a9 2e       	mov	r10, r25
 a60:	09 c0       	rjmp	.+18     	; 0xa74 <__stack+0x175>
 a62:	a2 fe       	sbrs	r10, 2
 a64:	06 c0       	rjmp	.+12     	; 0xa72 <__stack+0x173>
 a66:	b3 94       	inc	r11
 a68:	b3 94       	inc	r11
 a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__stack+0x175>
 a6c:	8a 2d       	mov	r24, r10
 a6e:	86 78       	andi	r24, 0x86	; 134
 a70:	09 f0       	breq	.+2      	; 0xa74 <__stack+0x175>
 a72:	b3 94       	inc	r11
 a74:	a3 fc       	sbrc	r10, 3
 a76:	11 c0       	rjmp	.+34     	; 0xa9a <__stack+0x19b>
 a78:	a0 fe       	sbrs	r10, 0
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <__stack+0x189>
 a7c:	b2 14       	cp	r11, r2
 a7e:	88 f4       	brcc	.+34     	; 0xaa2 <__stack+0x1a3>
 a80:	28 0c       	add	r2, r8
 a82:	92 2c       	mov	r9, r2
 a84:	9b 18       	sub	r9, r11
 a86:	0e c0       	rjmp	.+28     	; 0xaa4 <__stack+0x1a5>
 a88:	b2 14       	cp	r11, r2
 a8a:	60 f4       	brcc	.+24     	; 0xaa4 <__stack+0x1a5>
 a8c:	b6 01       	movw	r22, r12
 a8e:	80 e2       	ldi	r24, 0x20	; 32
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 a96:	b3 94       	inc	r11
 a98:	f7 cf       	rjmp	.-18     	; 0xa88 <__stack+0x189>
 a9a:	b2 14       	cp	r11, r2
 a9c:	18 f4       	brcc	.+6      	; 0xaa4 <__stack+0x1a5>
 a9e:	2b 18       	sub	r2, r11
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <__stack+0x1a7>
 aa2:	98 2c       	mov	r9, r8
 aa4:	21 2c       	mov	r2, r1
 aa6:	a4 fe       	sbrs	r10, 4
 aa8:	10 c0       	rjmp	.+32     	; 0xaca <__stack+0x1cb>
 aaa:	b6 01       	movw	r22, r12
 aac:	80 e3       	ldi	r24, 0x30	; 48
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 ab4:	a2 fe       	sbrs	r10, 2
 ab6:	17 c0       	rjmp	.+46     	; 0xae6 <__stack+0x1e7>
 ab8:	a1 fc       	sbrc	r10, 1
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <__stack+0x1c3>
 abc:	88 e7       	ldi	r24, 0x78	; 120
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <__stack+0x1c7>
 ac2:	88 e5       	ldi	r24, 0x58	; 88
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	b6 01       	movw	r22, r12
 ac8:	0c c0       	rjmp	.+24     	; 0xae2 <__stack+0x1e3>
 aca:	8a 2d       	mov	r24, r10
 acc:	86 78       	andi	r24, 0x86	; 134
 ace:	59 f0       	breq	.+22     	; 0xae6 <__stack+0x1e7>
 ad0:	a1 fe       	sbrs	r10, 1
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <__stack+0x1d9>
 ad4:	8b e2       	ldi	r24, 0x2B	; 43
 ad6:	01 c0       	rjmp	.+2      	; 0xada <__stack+0x1db>
 ad8:	80 e2       	ldi	r24, 0x20	; 32
 ada:	a7 fc       	sbrc	r10, 7
 adc:	8d e2       	ldi	r24, 0x2D	; 45
 ade:	b6 01       	movw	r22, r12
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 ae6:	89 14       	cp	r8, r9
 ae8:	38 f4       	brcc	.+14     	; 0xaf8 <__stack+0x1f9>
 aea:	b6 01       	movw	r22, r12
 aec:	80 e3       	ldi	r24, 0x30	; 48
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 af4:	9a 94       	dec	r9
 af6:	f7 cf       	rjmp	.-18     	; 0xae6 <__stack+0x1e7>
 af8:	8a 94       	dec	r8
 afa:	f3 01       	movw	r30, r6
 afc:	e8 0d       	add	r30, r8
 afe:	f1 1d       	adc	r31, r1
 b00:	80 81       	ld	r24, Z
 b02:	b6 01       	movw	r22, r12
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 b0a:	81 10       	cpse	r8, r1
 b0c:	f5 cf       	rjmp	.-22     	; 0xaf8 <__stack+0x1f9>
 b0e:	22 20       	and	r2, r2
 b10:	09 f4       	brne	.+2      	; 0xb14 <__stack+0x215>
 b12:	42 ce       	rjmp	.-892    	; 0x798 <vfprintf+0x24>
 b14:	b6 01       	movw	r22, r12
 b16:	80 e2       	ldi	r24, 0x20	; 32
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 b1 05 	call	0xb62	; 0xb62 <fputc>
 b1e:	2a 94       	dec	r2
 b20:	f6 cf       	rjmp	.-20     	; 0xb0e <__stack+0x20f>
 b22:	f6 01       	movw	r30, r12
 b24:	86 81       	ldd	r24, Z+6	; 0x06
 b26:	97 81       	ldd	r25, Z+7	; 0x07
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <__stack+0x22f>
 b2a:	8f ef       	ldi	r24, 0xFF	; 255
 b2c:	9f ef       	ldi	r25, 0xFF	; 255
 b2e:	2b 96       	adiw	r28, 0x0b	; 11
 b30:	e2 e1       	ldi	r30, 0x12	; 18
 b32:	0c 94 67 06 	jmp	0xcce	; 0xcce <__epilogue_restores__>

00000b36 <strnlen_P>:
 b36:	fc 01       	movw	r30, r24
 b38:	05 90       	lpm	r0, Z+
 b3a:	61 50       	subi	r22, 0x01	; 1
 b3c:	70 40       	sbci	r23, 0x00	; 0
 b3e:	01 10       	cpse	r0, r1
 b40:	d8 f7       	brcc	.-10     	; 0xb38 <strnlen_P+0x2>
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	8e 0f       	add	r24, r30
 b48:	9f 1f       	adc	r25, r31
 b4a:	08 95       	ret

00000b4c <strnlen>:
 b4c:	fc 01       	movw	r30, r24
 b4e:	61 50       	subi	r22, 0x01	; 1
 b50:	70 40       	sbci	r23, 0x00	; 0
 b52:	01 90       	ld	r0, Z+
 b54:	01 10       	cpse	r0, r1
 b56:	d8 f7       	brcc	.-10     	; 0xb4e <strnlen+0x2>
 b58:	80 95       	com	r24
 b5a:	90 95       	com	r25
 b5c:	8e 0f       	add	r24, r30
 b5e:	9f 1f       	adc	r25, r31
 b60:	08 95       	ret

00000b62 <fputc>:
 b62:	0f 93       	push	r16
 b64:	1f 93       	push	r17
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	fb 01       	movw	r30, r22
 b6c:	23 81       	ldd	r18, Z+3	; 0x03
 b6e:	21 fd       	sbrc	r18, 1
 b70:	03 c0       	rjmp	.+6      	; 0xb78 <fputc+0x16>
 b72:	8f ef       	ldi	r24, 0xFF	; 255
 b74:	9f ef       	ldi	r25, 0xFF	; 255
 b76:	2c c0       	rjmp	.+88     	; 0xbd0 <fputc+0x6e>
 b78:	22 ff       	sbrs	r18, 2
 b7a:	16 c0       	rjmp	.+44     	; 0xba8 <fputc+0x46>
 b7c:	46 81       	ldd	r20, Z+6	; 0x06
 b7e:	57 81       	ldd	r21, Z+7	; 0x07
 b80:	24 81       	ldd	r18, Z+4	; 0x04
 b82:	35 81       	ldd	r19, Z+5	; 0x05
 b84:	42 17       	cp	r20, r18
 b86:	53 07       	cpc	r21, r19
 b88:	44 f4       	brge	.+16     	; 0xb9a <fputc+0x38>
 b8a:	a0 81       	ld	r26, Z
 b8c:	b1 81       	ldd	r27, Z+1	; 0x01
 b8e:	9d 01       	movw	r18, r26
 b90:	2f 5f       	subi	r18, 0xFF	; 255
 b92:	3f 4f       	sbci	r19, 0xFF	; 255
 b94:	31 83       	std	Z+1, r19	; 0x01
 b96:	20 83       	st	Z, r18
 b98:	8c 93       	st	X, r24
 b9a:	26 81       	ldd	r18, Z+6	; 0x06
 b9c:	37 81       	ldd	r19, Z+7	; 0x07
 b9e:	2f 5f       	subi	r18, 0xFF	; 255
 ba0:	3f 4f       	sbci	r19, 0xFF	; 255
 ba2:	37 83       	std	Z+7, r19	; 0x07
 ba4:	26 83       	std	Z+6, r18	; 0x06
 ba6:	14 c0       	rjmp	.+40     	; 0xbd0 <fputc+0x6e>
 ba8:	8b 01       	movw	r16, r22
 baa:	ec 01       	movw	r28, r24
 bac:	fb 01       	movw	r30, r22
 bae:	00 84       	ldd	r0, Z+8	; 0x08
 bb0:	f1 85       	ldd	r31, Z+9	; 0x09
 bb2:	e0 2d       	mov	r30, r0
 bb4:	09 95       	icall
 bb6:	89 2b       	or	r24, r25
 bb8:	e1 f6       	brne	.-72     	; 0xb72 <fputc+0x10>
 bba:	d8 01       	movw	r26, r16
 bbc:	16 96       	adiw	r26, 0x06	; 6
 bbe:	8d 91       	ld	r24, X+
 bc0:	9c 91       	ld	r25, X
 bc2:	17 97       	sbiw	r26, 0x07	; 7
 bc4:	01 96       	adiw	r24, 0x01	; 1
 bc6:	17 96       	adiw	r26, 0x07	; 7
 bc8:	9c 93       	st	X, r25
 bca:	8e 93       	st	-X, r24
 bcc:	16 97       	sbiw	r26, 0x06	; 6
 bce:	ce 01       	movw	r24, r28
 bd0:	df 91       	pop	r29
 bd2:	cf 91       	pop	r28
 bd4:	1f 91       	pop	r17
 bd6:	0f 91       	pop	r16
 bd8:	08 95       	ret

00000bda <__ultoa_invert>:
 bda:	fa 01       	movw	r30, r20
 bdc:	aa 27       	eor	r26, r26
 bde:	28 30       	cpi	r18, 0x08	; 8
 be0:	51 f1       	breq	.+84     	; 0xc36 <__ultoa_invert+0x5c>
 be2:	20 31       	cpi	r18, 0x10	; 16
 be4:	81 f1       	breq	.+96     	; 0xc46 <__ultoa_invert+0x6c>
 be6:	e8 94       	clt
 be8:	6f 93       	push	r22
 bea:	6e 7f       	andi	r22, 0xFE	; 254
 bec:	6e 5f       	subi	r22, 0xFE	; 254
 bee:	7f 4f       	sbci	r23, 0xFF	; 255
 bf0:	8f 4f       	sbci	r24, 0xFF	; 255
 bf2:	9f 4f       	sbci	r25, 0xFF	; 255
 bf4:	af 4f       	sbci	r26, 0xFF	; 255
 bf6:	b1 e0       	ldi	r27, 0x01	; 1
 bf8:	3e d0       	rcall	.+124    	; 0xc76 <__ultoa_invert+0x9c>
 bfa:	b4 e0       	ldi	r27, 0x04	; 4
 bfc:	3c d0       	rcall	.+120    	; 0xc76 <__ultoa_invert+0x9c>
 bfe:	67 0f       	add	r22, r23
 c00:	78 1f       	adc	r23, r24
 c02:	89 1f       	adc	r24, r25
 c04:	9a 1f       	adc	r25, r26
 c06:	a1 1d       	adc	r26, r1
 c08:	68 0f       	add	r22, r24
 c0a:	79 1f       	adc	r23, r25
 c0c:	8a 1f       	adc	r24, r26
 c0e:	91 1d       	adc	r25, r1
 c10:	a1 1d       	adc	r26, r1
 c12:	6a 0f       	add	r22, r26
 c14:	71 1d       	adc	r23, r1
 c16:	81 1d       	adc	r24, r1
 c18:	91 1d       	adc	r25, r1
 c1a:	a1 1d       	adc	r26, r1
 c1c:	20 d0       	rcall	.+64     	; 0xc5e <__ultoa_invert+0x84>
 c1e:	09 f4       	brne	.+2      	; 0xc22 <__ultoa_invert+0x48>
 c20:	68 94       	set
 c22:	3f 91       	pop	r19
 c24:	2a e0       	ldi	r18, 0x0A	; 10
 c26:	26 9f       	mul	r18, r22
 c28:	11 24       	eor	r1, r1
 c2a:	30 19       	sub	r19, r0
 c2c:	30 5d       	subi	r19, 0xD0	; 208
 c2e:	31 93       	st	Z+, r19
 c30:	de f6       	brtc	.-74     	; 0xbe8 <__ultoa_invert+0xe>
 c32:	cf 01       	movw	r24, r30
 c34:	08 95       	ret
 c36:	46 2f       	mov	r20, r22
 c38:	47 70       	andi	r20, 0x07	; 7
 c3a:	40 5d       	subi	r20, 0xD0	; 208
 c3c:	41 93       	st	Z+, r20
 c3e:	b3 e0       	ldi	r27, 0x03	; 3
 c40:	0f d0       	rcall	.+30     	; 0xc60 <__ultoa_invert+0x86>
 c42:	c9 f7       	brne	.-14     	; 0xc36 <__ultoa_invert+0x5c>
 c44:	f6 cf       	rjmp	.-20     	; 0xc32 <__ultoa_invert+0x58>
 c46:	46 2f       	mov	r20, r22
 c48:	4f 70       	andi	r20, 0x0F	; 15
 c4a:	40 5d       	subi	r20, 0xD0	; 208
 c4c:	4a 33       	cpi	r20, 0x3A	; 58
 c4e:	18 f0       	brcs	.+6      	; 0xc56 <__ultoa_invert+0x7c>
 c50:	49 5d       	subi	r20, 0xD9	; 217
 c52:	31 fd       	sbrc	r19, 1
 c54:	40 52       	subi	r20, 0x20	; 32
 c56:	41 93       	st	Z+, r20
 c58:	02 d0       	rcall	.+4      	; 0xc5e <__ultoa_invert+0x84>
 c5a:	a9 f7       	brne	.-22     	; 0xc46 <__ultoa_invert+0x6c>
 c5c:	ea cf       	rjmp	.-44     	; 0xc32 <__ultoa_invert+0x58>
 c5e:	b4 e0       	ldi	r27, 0x04	; 4
 c60:	a6 95       	lsr	r26
 c62:	97 95       	ror	r25
 c64:	87 95       	ror	r24
 c66:	77 95       	ror	r23
 c68:	67 95       	ror	r22
 c6a:	ba 95       	dec	r27
 c6c:	c9 f7       	brne	.-14     	; 0xc60 <__ultoa_invert+0x86>
 c6e:	00 97       	sbiw	r24, 0x00	; 0
 c70:	61 05       	cpc	r22, r1
 c72:	71 05       	cpc	r23, r1
 c74:	08 95       	ret
 c76:	9b 01       	movw	r18, r22
 c78:	ac 01       	movw	r20, r24
 c7a:	0a 2e       	mov	r0, r26
 c7c:	06 94       	lsr	r0
 c7e:	57 95       	ror	r21
 c80:	47 95       	ror	r20
 c82:	37 95       	ror	r19
 c84:	27 95       	ror	r18
 c86:	ba 95       	dec	r27
 c88:	c9 f7       	brne	.-14     	; 0xc7c <__ultoa_invert+0xa2>
 c8a:	62 0f       	add	r22, r18
 c8c:	73 1f       	adc	r23, r19
 c8e:	84 1f       	adc	r24, r20
 c90:	95 1f       	adc	r25, r21
 c92:	a0 1d       	adc	r26, r0
 c94:	08 95       	ret

00000c96 <__prologue_saves__>:
 c96:	2f 92       	push	r2
 c98:	3f 92       	push	r3
 c9a:	4f 92       	push	r4
 c9c:	5f 92       	push	r5
 c9e:	6f 92       	push	r6
 ca0:	7f 92       	push	r7
 ca2:	8f 92       	push	r8
 ca4:	9f 92       	push	r9
 ca6:	af 92       	push	r10
 ca8:	bf 92       	push	r11
 caa:	cf 92       	push	r12
 cac:	df 92       	push	r13
 cae:	ef 92       	push	r14
 cb0:	ff 92       	push	r15
 cb2:	0f 93       	push	r16
 cb4:	1f 93       	push	r17
 cb6:	cf 93       	push	r28
 cb8:	df 93       	push	r29
 cba:	cd b7       	in	r28, 0x3d	; 61
 cbc:	de b7       	in	r29, 0x3e	; 62
 cbe:	ca 1b       	sub	r28, r26
 cc0:	db 0b       	sbc	r29, r27
 cc2:	0f b6       	in	r0, 0x3f	; 63
 cc4:	f8 94       	cli
 cc6:	de bf       	out	0x3e, r29	; 62
 cc8:	0f be       	out	0x3f, r0	; 63
 cca:	cd bf       	out	0x3d, r28	; 61
 ccc:	09 94       	ijmp

00000cce <__epilogue_restores__>:
 cce:	2a 88       	ldd	r2, Y+18	; 0x12
 cd0:	39 88       	ldd	r3, Y+17	; 0x11
 cd2:	48 88       	ldd	r4, Y+16	; 0x10
 cd4:	5f 84       	ldd	r5, Y+15	; 0x0f
 cd6:	6e 84       	ldd	r6, Y+14	; 0x0e
 cd8:	7d 84       	ldd	r7, Y+13	; 0x0d
 cda:	8c 84       	ldd	r8, Y+12	; 0x0c
 cdc:	9b 84       	ldd	r9, Y+11	; 0x0b
 cde:	aa 84       	ldd	r10, Y+10	; 0x0a
 ce0:	b9 84       	ldd	r11, Y+9	; 0x09
 ce2:	c8 84       	ldd	r12, Y+8	; 0x08
 ce4:	df 80       	ldd	r13, Y+7	; 0x07
 ce6:	ee 80       	ldd	r14, Y+6	; 0x06
 ce8:	fd 80       	ldd	r15, Y+5	; 0x05
 cea:	0c 81       	ldd	r16, Y+4	; 0x04
 cec:	1b 81       	ldd	r17, Y+3	; 0x03
 cee:	aa 81       	ldd	r26, Y+2	; 0x02
 cf0:	b9 81       	ldd	r27, Y+1	; 0x01
 cf2:	ce 0f       	add	r28, r30
 cf4:	d1 1d       	adc	r29, r1
 cf6:	0f b6       	in	r0, 0x3f	; 63
 cf8:	f8 94       	cli
 cfa:	de bf       	out	0x3e, r29	; 62
 cfc:	0f be       	out	0x3f, r0	; 63
 cfe:	cd bf       	out	0x3d, r28	; 61
 d00:	ed 01       	movw	r28, r26
 d02:	08 95       	ret

00000d04 <_exit>:
 d04:	f8 94       	cli

00000d06 <__stop_program>:
 d06:	ff cf       	rjmp	.-2      	; 0xd06 <__stop_program>
