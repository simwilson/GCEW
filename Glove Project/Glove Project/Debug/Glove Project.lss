
Glove Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000004fa  0000058e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080013c  0080013c  000005ca  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000005ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000620  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ee0  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc6  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e4f  00000000  00000000  00003706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00004558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bce  00000000  00000000  000048dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006dc  00000000  00000000  000054aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005b86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_5>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ef       	ldi	r30, 0xFA	; 250
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 33       	cpi	r26, 0x3C	; 60
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e3       	ldi	r26, 0x3C	; 60
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 34       	cpi	r26, 0x47	; 71
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  ea:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <system_init>
  f6:	08 95       	ret

000000f8 <USART0_Print>:
		return ACTIVE_REVERSE_COMMAND;
	}
	else{
		return SLOW_STOP_COMMAND;
	}
}
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	7c 01       	movw	r14, r24
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	06 c0       	rjmp	.+12     	; 0x11a <USART0_Print+0x22>
 10e:	f7 01       	movw	r30, r14
 110:	81 91       	ld	r24, Z+
 112:	7f 01       	movw	r14, r30
 114:	0e 94 3e 02 	call	0x47c	; 0x47c <USART_0_write>
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	f8 01       	movw	r30, r16
 11c:	01 90       	ld	r0, Z+
 11e:	00 20       	and	r0, r0
 120:	e9 f7       	brne	.-6      	; 0x11c <USART0_Print+0x24>
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	e0 1b       	sub	r30, r16
 126:	f1 0b       	sbc	r31, r17
 128:	ce 17       	cp	r28, r30
 12a:	df 07       	cpc	r29, r31
 12c:	80 f3       	brcs	.-32     	; 0x10e <USART0_Print+0x16>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <main>:

int main(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	00 d0       	rcall	.+0      	; 0x142 <main+0x6>
 142:	00 d0       	rcall	.+0      	; 0x144 <main+0x8>
 144:	1f 92       	push	r1
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
 14a:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	// DO NOT DELETE
	//==========================================
	
	DDRC |= 0x01;
 14e:	38 9a       	sbi	0x07, 0	; 7
	
	char command[] = "s00e"; 
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	ea e1       	ldi	r30, 0x1A	; 26
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	de 01       	movw	r26, r28
 158:	11 96       	adiw	r26, 0x01	; 1
 15a:	01 90       	ld	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	8a 95       	dec	r24
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x1e>
	uint16_t middleFingerAvg = 100;
	uint16_t ringFingerAvg = 100;
	
	uint8_t calCountAvg = 0;
	uint8_t countAvg = 0;
	USART0_Print("Starting...");
 162:	8e e0       	ldi	r24, 0x0E	; 14
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
	PORTC |=(1<<0);
 16a:	40 9a       	sbi	0x08, 0	; 8
					GLOVE_STATE = ACTIVE_MODE;
					buttonFlag = BUTTON_NOT_PRESSED;
				}
				else if(buttonFlag == BUTTON_LONG_PRESS){
					PORTC &= 0xFE;
					GLOVE_STATE = CALIBRATION;
 16c:	01 e0       	ldi	r16, 0x01	; 1
 16e:	10 e0       	ldi	r17, 0x00	; 0
		switch (GLOVE_STATE){
			case START:
				//send command to stop motors
				if(buttonFlag == BUTTON_SHORT_PRESS){
					PORTC &= 0xFE;
					GLOVE_STATE = ACTIVE_MODE;
 170:	68 94       	set
 172:	ee 24       	eor	r14, r14
 174:	e4 f8       	bld	r14, 4
 176:	f1 2c       	mov	r15, r1
	PORTC |=(1<<0);
	while (1){
		//read ADC
		//ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
		//while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
		adcReadForeFinger = ADC_0_get_conversion(5);
 178:	85 e0       	ldi	r24, 0x05	; 5
 17a:	0e 94 c5 01 	call	0x38a	; 0x38a <ADC_0_get_conversion>
		adcReadForeFinger = adcReadForeFinger >> (ADC_0_get_resolution() - 8);
 17e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_0_get_resolution>
		adcReadMiddleFinger = ADC_0_get_conversion(6);
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	0e 94 c5 01 	call	0x38a	; 0x38a <ADC_0_get_conversion>
		adcReadMiddleFinger = adcReadMiddleFinger >> (ADC_0_get_resolution() - 8);
 188:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_0_get_resolution>
		adcReadRingFinger = ADC_0_get_conversion(7);
 18c:	87 e0       	ldi	r24, 0x07	; 7
 18e:	0e 94 c5 01 	call	0x38a	; 0x38a <ADC_0_get_conversion>
		adcReadRingFinger = adcReadRingFinger >> (ADC_0_get_resolution() - 8);
 192:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_0_get_resolution>
		switch (GLOVE_STATE){
 196:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <GLOVE_STATE>
 19a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <GLOVE_STATE+0x1>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	91 05       	cpc	r25, r1
 1a2:	89 f1       	breq	.+98     	; 0x206 <main+0xca>
 1a4:	80 31       	cpi	r24, 0x10	; 16
 1a6:	91 05       	cpc	r25, r1
 1a8:	09 f4       	brne	.+2      	; 0x1ac <main+0x70>
 1aa:	4b c0       	rjmp	.+150    	; 0x242 <main+0x106>
 1ac:	89 2b       	or	r24, r25
 1ae:	21 f7       	brne	.-56     	; 0x178 <main+0x3c>
			case START:
				//send command to stop motors
				if(buttonFlag == BUTTON_SHORT_PRESS){
 1b0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 1b4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	91 05       	cpc	r25, r1
 1bc:	51 f4       	brne	.+20     	; 0x1d2 <main+0x96>
					PORTC &= 0xFE;
 1be:	40 98       	cbi	0x08, 0	; 8
					GLOVE_STATE = ACTIVE_MODE;
 1c0:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <GLOVE_STATE+0x1>
 1c4:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <GLOVE_STATE>
					buttonFlag = BUTTON_NOT_PRESSED;
 1c8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 1cc:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
 1d0:	d3 cf       	rjmp	.-90     	; 0x178 <main+0x3c>
				}
				else if(buttonFlag == BUTTON_LONG_PRESS){
 1d2:	02 97       	sbiw	r24, 0x02	; 2
 1d4:	51 f4       	brne	.+20     	; 0x1ea <main+0xae>
					PORTC &= 0xFE;
 1d6:	40 98       	cbi	0x08, 0	; 8
					GLOVE_STATE = CALIBRATION;
 1d8:	10 93 3f 01 	sts	0x013F, r17	; 0x80013f <GLOVE_STATE+0x1>
 1dc:	00 93 3e 01 	sts	0x013E, r16	; 0x80013e <GLOVE_STATE>
					buttonFlag = BUTTON_NOT_PRESSED;
 1e0:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 1e4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
 1e8:	c7 cf       	rjmp	.-114    	; 0x178 <main+0x3c>
				}
				else{
					//send START mode command
					memcpy(command, START_COMMAND, sizeof(command));
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	ea e1       	ldi	r30, 0x1A	; 26
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	de 01       	movw	r26, r28
 1f2:	11 96       	adiw	r26, 0x01	; 1
 1f4:	01 90       	ld	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	8a 95       	dec	r24
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0xb8>
					USART0_Print(command);
 1fc:	ce 01       	movw	r24, r28
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
 204:	b9 cf       	rjmp	.-142    	; 0x178 <main+0x3c>
					//PORTC |=(1<<0);
				}
				break;
			case CALIBRATION:
				PORTC &= 0xFE;
 206:	40 98       	cbi	0x08, 0	; 8
				if(buttonFlag == BUTTON_SHORT_PRESS || buttonFlag == BUTTON_LONG_PRESS){
 208:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 20c:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	02 97       	sbiw	r24, 0x02	; 2
 214:	40 f4       	brcc	.+16     	; 0x226 <main+0xea>
					GLOVE_STATE = START;
 216:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <GLOVE_STATE+0x1>
 21a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <GLOVE_STATE>
					buttonFlag = BUTTON_NOT_PRESSED;
 21e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 222:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
					calCountAvg = 0;
				}
				//send command to stop motors
				memcpy(command, SLOW_STOP_COMMAND, sizeof(command));
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	ef e1       	ldi	r30, 0x1F	; 31
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	de 01       	movw	r26, r28
 22e:	11 96       	adiw	r26, 0x01	; 1
 230:	01 90       	ld	r0, Z+
 232:	0d 92       	st	X+, r0
 234:	8a 95       	dec	r24
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0xf4>
				USART0_Print(command);
 238:	ce 01       	movw	r24, r28
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
 240:	9b cf       	rjmp	.-202    	; 0x178 <main+0x3c>
					calCountAvg = 0;
					GLOVE_STATE = START;
				}
				break;
			case ACTIVE_MODE:
				PORTC &= 0xFE;
 242:	40 98       	cbi	0x08, 0	; 8
				if(buttonFlag == BUTTON_SHORT_PRESS || buttonFlag == BUTTON_LONG_PRESS){
 244:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 248:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	02 97       	sbiw	r24, 0x02	; 2
 250:	08 f0       	brcs	.+2      	; 0x254 <main+0x118>
 252:	92 cf       	rjmp	.-220    	; 0x178 <main+0x3c>
					GLOVE_STATE = START;
 254:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <GLOVE_STATE+0x1>
 258:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <GLOVE_STATE>
					buttonFlag = BUTTON_NOT_PRESSED;
 25c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 260:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
 264:	89 cf       	rjmp	.-238    	; 0x178 <main+0x3c>

00000266 <__vector_5>:
	return 1;
}


ISR(PCINT2_vect) // Interrupt Routine for INT0 ( Pin PD2) Interrupt
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	8f 93       	push	r24
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
		TIMSK0 |= (_BV(OCIE0A)); // Enable Timer 0 Interrupt
 276:	ee e6       	ldi	r30, 0x6E	; 110
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	80 83       	st	Z, r24
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__vector_14>:


ISR(TIMER0_COMPA_vect) // Interrupt Routine for Timer 0 Compare Match A
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	5f 93       	push	r21
 2a2:	6f 93       	push	r22
 2a4:	7f 93       	push	r23
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
	/* Timer 0 has a minimum frequency of (f_clock/(prescaler * (1+OCR0A)) which in this case = (8MHz/(1024*(1 + 255)) = 30.5Hz
	   this is too fast for a 'long press' of the pushbutton, so we allow the timer to interrupt 60 times (about 2 seconds) before polling the pushbutton pin to check if it is still
	   being pulled low   
	*/

	incrementer = incrementer + 1;
 2b2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <incrementer>
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <incrementer>
	if (incrementer > 60) 
 2bc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <incrementer>
 2c0:	8d 33       	cpi	r24, 0x3D	; 61
 2c2:	38 f1       	brcs	.+78     	; 0x312 <__vector_14+0x82>
	{
		if(PORTD_get_pin_level(PORTD2) < 1){ // If the pin is still being pulled low by the pushbutton
 2c4:	4a 99       	sbic	0x09, 2	; 9
 2c6:	13 c0       	rjmp	.+38     	; 0x2ee <__vector_14+0x5e>
			printf("Long Press\n");
 2c8:	84 e2       	ldi	r24, 0x24	; 36
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 4b 02 	call	0x496	; 0x496 <puts>
			buttonFlag = BUTTON_LONG_PRESS;
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 2d8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
			PORTC &= 0xFE;
 2dc:	40 98       	cbi	0x08, 0	; 8
			TIMSK0 &= ~(_BV(OCIE0A)); // Disable Timer 0 interrupt
 2de:	ee e6       	ldi	r30, 0x6E	; 110
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	8d 7f       	andi	r24, 0xFD	; 253
 2e6:	80 83       	st	Z, r24
			incrementer = 0;
 2e8:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <incrementer>
 2ec:	12 c0       	rjmp	.+36     	; 0x312 <__vector_14+0x82>
		}
		else{
			printf("Short Press\n");
 2ee:	8f e2       	ldi	r24, 0x2F	; 47
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 4b 02 	call	0x496	; 0x496 <puts>
			buttonFlag = BUTTON_SHORT_PRESS;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 2fe:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
			PORTC &= 0xFE;
 302:	40 98       	cbi	0x08, 0	; 8
			TIMSK0 &= ~(_BV(OCIE0A)); // Disable Timer 0 interrupt
 304:	ee e6       	ldi	r30, 0x6E	; 110
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	8d 7f       	andi	r24, 0xFD	; 253
 30c:	80 83       	st	Z, r24
			incrementer = 0;
 30e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <incrementer>
		}
	}
	else{ }  // don't do anything if the incrementer hasn't reached its desired value
	
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
 334:	e4 e6       	ldi	r30, 0x64	; 100
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	8e 7f       	andi	r24, 0xFE	; 254
 33c:	80 83       	st	Z, r24
 33e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 342:	81 e8       	ldi	r24, 0x81	; 129
 344:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 348:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 34c:	80 e2       	ldi	r24, 0x20	; 32
 34e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret

00000356 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x0f;
 356:	ec e7       	ldi	r30, 0x7C	; 124
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	90 81       	ld	r25, Z
 35c:	90 7f       	andi	r25, 0xF0	; 240
 35e:	90 83       	st	Z, r25
	ADMUX |= channel;
 360:	90 81       	ld	r25, Z
 362:	89 2b       	or	r24, r25
 364:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 366:	ea e7       	ldi	r30, 0x7A	; 122
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	80 64       	ori	r24, 0x40	; 64
 36e:	80 83       	st	Z, r24
 370:	08 95       	ret

00000372 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
 372:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
 376:	82 95       	swap	r24
 378:	81 70       	andi	r24, 0x01	; 1
 37a:	08 95       	ret

0000037c <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
 37c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 380:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 384:	90 e0       	ldi	r25, 0x00	; 0
}
 386:	92 2b       	or	r25, r18
 388:	08 95       	ret

0000038a <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
 38a:	0e 94 ab 01 	call	0x356	; 0x356 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
 38e:	0e 94 b9 01 	call	0x372	; 0x372 <ADC_0_is_conversion_done>
 392:	88 23       	and	r24, r24
 394:	e1 f3       	breq	.-8      	; 0x38e <ADC_0_get_conversion+0x4>
		;
	res = ADC_0_get_conversion_result();
 396:	0e 94 be 01 	call	0x37c	; 0x37c <ADC_0_get_conversion_result>
	ADCSRA |= (1 << ADIF);
 39a:	ea e7       	ldi	r30, 0x7A	; 122
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	20 81       	ld	r18, Z
 3a0:	20 61       	ori	r18, 0x10	; 16
 3a2:	20 83       	st	Z, r18
	return res;
}
 3a4:	08 95       	ret

000003a6 <ADC_0_get_resolution>:
 * \return The number of bits in the ADC conversion result
 */
uint8_t ADC_0_get_resolution()
{
	return 10;
}
 3a6:	8a e0       	ldi	r24, 0x0A	; 10
 3a8:	08 95       	ret

000003aa <EXTERNAL_IRQ_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 3aa:	52 98       	cbi	0x0a, 2	; 10
 3ac:	5a 98       	cbi	0x0b, 2	; 11
 3ae:	0e 94 12 02 	call	0x424	; 0x424 <EXTERNAL_IRQ_0_init>
 3b2:	08 95       	ret

000003b4 <ADC_0_initialization>:
 3b4:	45 98       	cbi	0x08, 5	; 8
 3b6:	72 98       	cbi	0x0e, 2	; 14
 3b8:	73 98       	cbi	0x0e, 3	; 14
 3ba:	0e 94 9a 01 	call	0x334	; 0x334 <ADC_0_init>
 3be:	08 95       	ret

000003c0 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 3c0:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 3c2:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 3c4:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 3c6:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 3c8:	0e 94 27 02 	call	0x44e	; 0x44e <USART_0_init>
 3cc:	08 95       	ret

000003ce <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 3ce:	8d e3       	ldi	r24, 0x3D	; 61
 3d0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 3da:	94 b1       	in	r25, 0x04	; 4
 3dc:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 3de:	95 b1       	in	r25, 0x05	; 5
 3e0:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 3e2:	97 b1       	in	r25, 0x07	; 7
 3e4:	90 78       	andi	r25, 0x80	; 128
 3e6:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 3e8:	98 b1       	in	r25, 0x08	; 8
 3ea:	9f 67       	ori	r25, 0x7F	; 127
 3ec:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 3ee:	9a b1       	in	r25, 0x0a	; 10
 3f0:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 3f2:	9b b1       	in	r25, 0x0b	; 11
 3f4:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 3f6:	8d b1       	in	r24, 0x0d	; 13
 3f8:	80 7f       	andi	r24, 0xF0	; 240
 3fa:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 3fc:	8e b1       	in	r24, 0x0e	; 14
 3fe:	8f 60       	ori	r24, 0x0F	; 15
 400:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	60 e8       	ldi	r22, 0x80	; 128
 406:	81 e6       	ldi	r24, 0x61	; 97
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 19 02 	call	0x432	; 0x432 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 40e:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 410:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	EXTERNAL_IRQ_0_initialization();
 412:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EXTERNAL_IRQ_0_initialization>

	ADC_0_initialization();
 416:	0e 94 da 01 	call	0x3b4	; 0x3b4 <ADC_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 41a:	0e 94 20 02 	call	0x440	; 0x440 <TIMER_0_init>

	ADC_0_initialization();

	TIMER_0_initialization();

	USART_0_initialization();
 41e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <USART_0_initialization>
 422:	08 95       	ret

00000424 <EXTERNAL_IRQ_0_init>:
 * \return Initialization status.
 */
int8_t EXTERNAL_IRQ_0_init()
{

	PCICR = (1 << PCIE2); // Enable pin change interrupt 2
 424:	84 e0       	ldi	r24, 0x04	; 4
 426:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

	PCMSK2 = (1 << PCINT18); // Pin change enable mask 18
 42a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>

	return 0;
}
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	08 95       	ret

00000432 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 432:	2f b7       	in	r18, 0x3f	; 63
	cli
 434:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 436:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 438:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 43a:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 43c:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 43e:	08 95       	ret

00000440 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
 440:	e4 e6       	ldi	r30, 0x64	; 100
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	87 7f       	andi	r24, 0xF7	; 247
 448:	80 83       	st	Z, r24
	//		 | 0 << OCIE1A /* Output Compare A Match Interrupt Enable: disabled */
	//		 | 0 << ICIE1 /* Input Capture Interrupt Enable: disabled */
	//		 | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret

0000044e <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 44e:	e4 e6       	ldi	r30, 0x64	; 100
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	8d 7f       	andi	r24, 0xFD	; 253
 456:	80 83       	st	Z, r24
 458:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 45c:	83 e3       	ldi	r24, 0x33	; 51
 45e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 462:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 466:	88 e9       	ldi	r24, 0x98	; 152
 468:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <__iob+0x3>
 474:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__iob+0x2>
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	08 95       	ret

0000047c <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 47c:	e0 ec       	ldi	r30, 0xC0	; 192
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	90 81       	ld	r25, Z
 482:	95 ff       	sbrs	r25, 5
 484:	fd cf       	rjmp	.-6      	; 0x480 <USART_0_write+0x4>
		;
	UDR0 = data;
 486:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 48a:	08 95       	ret

0000048c <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 48c:	0e 94 3e 02 	call	0x47c	; 0x47c <USART_0_write>
	return 0;
}
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	08 95       	ret

00000496 <puts>:
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <__iob+0x2>
 4a2:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <__iob+0x3>
 4a6:	23 81       	ldd	r18, Z+3	; 0x03
 4a8:	21 ff       	sbrs	r18, 1
 4aa:	1b c0       	rjmp	.+54     	; 0x4e2 <puts+0x4c>
 4ac:	8c 01       	movw	r16, r24
 4ae:	d0 e0       	ldi	r29, 0x00	; 0
 4b0:	c0 e0       	ldi	r28, 0x00	; 0
 4b2:	f8 01       	movw	r30, r16
 4b4:	81 91       	ld	r24, Z+
 4b6:	8f 01       	movw	r16, r30
 4b8:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <__iob+0x2>
 4bc:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <__iob+0x3>
 4c0:	db 01       	movw	r26, r22
 4c2:	18 96       	adiw	r26, 0x08	; 8
 4c4:	ed 91       	ld	r30, X+
 4c6:	fc 91       	ld	r31, X
 4c8:	19 97       	sbiw	r26, 0x09	; 9
 4ca:	88 23       	and	r24, r24
 4cc:	31 f0       	breq	.+12     	; 0x4da <puts+0x44>
 4ce:	09 95       	icall
 4d0:	89 2b       	or	r24, r25
 4d2:	79 f3       	breq	.-34     	; 0x4b2 <puts+0x1c>
 4d4:	df ef       	ldi	r29, 0xFF	; 255
 4d6:	cf ef       	ldi	r28, 0xFF	; 255
 4d8:	ec cf       	rjmp	.-40     	; 0x4b2 <puts+0x1c>
 4da:	8a e0       	ldi	r24, 0x0A	; 10
 4dc:	09 95       	icall
 4de:	89 2b       	or	r24, r25
 4e0:	19 f0       	breq	.+6      	; 0x4e8 <puts+0x52>
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	9f ef       	ldi	r25, 0xFF	; 255
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <puts+0x56>
 4e8:	8d 2f       	mov	r24, r29
 4ea:	9c 2f       	mov	r25, r28
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	08 95       	ret

000004f6 <_exit>:
 4f6:	f8 94       	cli

000004f8 <__stop_program>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <__stop_program>
