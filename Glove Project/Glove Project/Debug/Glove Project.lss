
Glove Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00000ac6  00000b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800186  00800186  00000be0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000c38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e35  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb4  00000000  00000000  00002c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000efa  00000000  00000000  00003b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00004a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a1a  00000000  00000000  00004ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000683  00000000  00000000  000056c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005d45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 ec       	ldi	r30, 0xC6	; 198
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 38       	cpi	r26, 0x86	; 134
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e8       	ldi	r26, 0x86	; 134
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 38       	cpi	r26, 0x8C	; 140
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  ea:	0c 94 61 05 	jmp	0xac2	; 0xac2 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 0d 02 	call	0x41a	; 0x41a <system_init>
  f6:	08 95       	ret

000000f8 <USART0_Print>:
	TCCR0A &= ~(_BV(COM0A0)); // To set normal port operation on OC0A Pin
	TCCR0A &= ~(_BV(COM0A1)); // To set normal port operation on OC0A Pin
	TCCR0A &= ~(_BV(COM0B0)); // To set normal port operation on OC0B Pin
	TCCR0A &= ~(_BV(COM0B1)); // To set normal port operation on OC0B Pin

	OCR0A = 255; // Timer 0 compare match #, choose a range between 0-255 to adjust interrupt frequency
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	7c 01       	movw	r14, r24
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	06 c0       	rjmp	.+12     	; 0x11a <USART0_Print+0x22>
 10e:	f7 01       	movw	r30, r14
 110:	81 91       	ld	r24, Z+
 112:	7f 01       	movw	r14, r30
 114:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <USART_0_write>
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	f8 01       	movw	r30, r16
 11c:	01 90       	ld	r0, Z+
 11e:	00 20       	and	r0, r0
 120:	e9 f7       	brne	.-6      	; 0x11c <USART0_Print+0x24>
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	e0 1b       	sub	r30, r16
 126:	f1 0b       	sbc	r31, r17
 128:	ce 17       	cp	r28, r30
 12a:	df 07       	cpc	r29, r31
 12c:	80 f3       	brcs	.-32     	; 0x10e <USART0_Print+0x16>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <USART0_Println>:
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	8c 01       	movw	r16, r24
 14a:	7c 01       	movw	r14, r24
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0
 150:	06 c0       	rjmp	.+12     	; 0x15e <USART0_Println+0x22>
 152:	f7 01       	movw	r30, r14
 154:	81 91       	ld	r24, Z+
 156:	7f 01       	movw	r14, r30
 158:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <USART_0_write>
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	f8 01       	movw	r30, r16
 160:	01 90       	ld	r0, Z+
 162:	00 20       	and	r0, r0
 164:	e9 f7       	brne	.-6      	; 0x160 <USART0_Println+0x24>
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	e0 1b       	sub	r30, r16
 16a:	f1 0b       	sbc	r31, r17
 16c:	ce 17       	cp	r28, r30
 16e:	df 07       	cpc	r29, r31
 170:	80 f3       	brcs	.-32     	; 0x152 <USART0_Println+0x16>
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <USART_0_write>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	08 95       	ret

00000186 <adcToCommand>:
	uint16_t avgAdcValueMiddleFinger, 
	uint16_t avgAdcValueRingFinger,
	uint16_t foreFingerThreshold,
	uint16_t middleFingerThreshold,
	uint16_t ringFingerThreshold
){
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
	//convert ADC values to state command
	if(avgAdcValueForeFinger < foreFingerThreshold
 18e:	82 17       	cp	r24, r18
 190:	93 07       	cpc	r25, r19
 192:	48 f4       	brcc	.+18     	; 0x1a6 <adcToCommand+0x20>
	&& avgAdcValueMiddleFinger < middleFingerThreshold
 194:	60 17       	cp	r22, r16
 196:	71 07       	cpc	r23, r17
 198:	c0 f4       	brcc	.+48     	; 0x1ca <adcToCommand+0x44>
	&& avgAdcValueRingFinger < ringFingerThreshold){
 19a:	4e 15       	cp	r20, r14
 19c:	5f 05       	cpc	r21, r15
 19e:	c0 f0       	brcs	.+48     	; 0x1d0 <adcToCommand+0x4a>
		return ACTIVE_FORWARD_COMMAND;
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold
	&& avgAdcValueMiddleFinger < middleFingerThreshold){
		return ACTIVE_RIGHT_FORWARD_COMMAND;
 1a0:	8c e7       	ldi	r24, 0x7C	; 124
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	20 c0       	rjmp	.+64     	; 0x1e6 <adcToCommand+0x60>
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold
 1a6:	60 17       	cp	r22, r16
 1a8:	71 07       	cpc	r23, r17
 1aa:	30 f4       	brcc	.+12     	; 0x1b8 <adcToCommand+0x32>
	&& avgAdcValueRingFinger < ringFingerThreshold){
 1ac:	4e 15       	cp	r20, r14
 1ae:	5f 05       	cpc	r21, r15
 1b0:	90 f4       	brcc	.+36     	; 0x1d6 <adcToCommand+0x50>
		return ACTIVE_LEFT_FORWARD_COMMAND;
 1b2:	82 e7       	ldi	r24, 0x72	; 114
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	17 c0       	rjmp	.+46     	; 0x1e6 <adcToCommand+0x60>
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold){
		return ACTIVE_RIGHT_COMMAND;
	}
	else if(avgAdcValueRingFinger < ringFingerThreshold){
 1b8:	4e 15       	cp	r20, r14
 1ba:	5f 05       	cpc	r21, r15
 1bc:	78 f0       	brcs	.+30     	; 0x1dc <adcToCommand+0x56>
		return ACTIVE_LEFT_COMMAND;
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold){
 1be:	60 17       	cp	r22, r16
 1c0:	71 07       	cpc	r23, r17
 1c2:	78 f0       	brcs	.+30     	; 0x1e2 <adcToCommand+0x5c>
		return ACTIVE_REVERSE_COMMAND;
	}
	else{
		return SLOW_STOP_COMMAND;
 1c4:	83 e6       	ldi	r24, 0x63	; 99
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e c0       	rjmp	.+28     	; 0x1e6 <adcToCommand+0x60>
	else if(avgAdcValueMiddleFinger < middleFingerThreshold
	&& avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_LEFT_FORWARD_COMMAND;
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold){
		return ACTIVE_RIGHT_COMMAND;
 1ca:	81 e8       	ldi	r24, 0x81	; 129
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <adcToCommand+0x60>
){
	//convert ADC values to state command
	if(avgAdcValueForeFinger < foreFingerThreshold
	&& avgAdcValueMiddleFinger < middleFingerThreshold
	&& avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_FORWARD_COMMAND;
 1d0:	8d e6       	ldi	r24, 0x6D	; 109
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <adcToCommand+0x60>
	}
	else if(avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_LEFT_COMMAND;
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold){
		return ACTIVE_REVERSE_COMMAND;
 1d6:	88 e6       	ldi	r24, 0x68	; 104
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <adcToCommand+0x60>
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold){
		return ACTIVE_RIGHT_COMMAND;
	}
	else if(avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_LEFT_COMMAND;
 1dc:	87 e7       	ldi	r24, 0x77	; 119
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <adcToCommand+0x60>
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold){
		return ACTIVE_REVERSE_COMMAND;
 1e2:	88 e6       	ldi	r24, 0x68	; 104
 1e4:	91 e0       	ldi	r25, 0x01	; 1
	}
	else{
		return SLOW_STOP_COMMAND;
	}
}
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <main>:

int main(void)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	2a 97       	sbiw	r28, 0x0a	; 10
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
	/* Initializes MCU, drivers and middleware */
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
 204:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	// DO NOT DELETE
	//==========================================
	DDRC |= 0x01;
 208:	38 9a       	sbi	0x07, 0	; 7
	
	char command[] = "s00e"; 
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	ee e5       	ldi	r30, 0x5E	; 94
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	de 01       	movw	r26, r28
 212:	11 96       	adiw	r26, 0x01	; 1
 214:	01 90       	ld	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	8a 95       	dec	r24
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x24>
	
	char printnum[] = "";
 21c:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t middleFingerThreshold = 300;
	uint16_t ringFingerThreshold = 300;
	
	uint8_t countAvg = 0;
	
	USART0_Print("Starting...");
 21e:	8e e0       	ldi	r24, 0x0E	; 14
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
	PORTC |=(1<<0);
 226:	40 9a       	sbi	0x08, 0	; 8
	
	uint16_t foreFingerThreshold = 300;
	uint16_t middleFingerThreshold = 300;
	uint16_t ringFingerThreshold = 300;
	
	uint8_t countAvg = 0;
 228:	e0 e0       	ldi	r30, 0x00	; 0
	uint16_t adcReadMiddleFinger = 0;
	uint16_t adcReadRingFinger = 0;
	
	uint16_t avgAdcReadForeFinger = 0;
	uint16_t avgAdcReadMiddleFinger = 0;
	uint16_t avgAdcReadRingFinger = 0;
 22a:	e1 2c       	mov	r14, r1
 22c:	f1 2c       	mov	r15, r1
	uint16_t adcReadForeFinger = 0;
	uint16_t adcReadMiddleFinger = 0;
	uint16_t adcReadRingFinger = 0;
	
	uint16_t avgAdcReadForeFinger = 0;
	uint16_t avgAdcReadMiddleFinger = 0;
 22e:	00 e0       	ldi	r16, 0x00	; 0
 230:	10 e0       	ldi	r17, 0x00	; 0
	
	uint16_t adcReadForeFinger = 0;
	uint16_t adcReadMiddleFinger = 0;
	uint16_t adcReadRingFinger = 0;
	
	uint16_t avgAdcReadForeFinger = 0;
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
	USART0_Print("Starting...");
	PORTC |=(1<<0);
	
	while(1){
		//read ADC
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 236:	0f 2e       	mov	r0, r31
 238:	fc e7       	ldi	r31, 0x7C	; 124
 23a:	8f 2e       	mov	r8, r31
 23c:	91 2c       	mov	r9, r1
 23e:	f0 2d       	mov	r31, r0
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x02 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 240:	0f 2e       	mov	r0, r31
 242:	fa e7       	ldi	r31, 0x7A	; 122
 244:	cf 2e       	mov	r12, r31
 246:	d1 2c       	mov	r13, r1
 248:	f0 2d       	mov	r31, r0
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
		adcReadForeFinger = ADC;
 24a:	0f 2e       	mov	r0, r31
 24c:	f8 e7       	ldi	r31, 0x78	; 120
 24e:	af 2e       	mov	r10, r31
 250:	b1 2c       	mov	r11, r1
 252:	f0 2d       	mov	r31, r0
			avgAdcReadRingFinger += adcReadRingFinger;
			countAvg += 1;
		}
		else{ 	//sending blue tooth command
			avgAdcReadForeFinger = avgAdcReadForeFinger/20;
			sprintf(printnum,"%u",avgAdcReadForeFinger); // Convert 10-bit ADC value (unsigned 16-bit integer) to a string
 254:	0f 2e       	mov	r0, r31
 256:	fa e1       	ldi	r31, 0x1A	; 26
 258:	6f 2e       	mov	r6, r31
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	7f 2e       	mov	r7, r31
 25e:	f0 2d       	mov	r31, r0
 260:	2e 01       	movw	r4, r28
 262:	86 e0       	ldi	r24, 0x06	; 6
 264:	48 0e       	add	r4, r24
 266:	51 1c       	adc	r5, r1
	USART0_Print("Starting...");
	PORTC |=(1<<0);
	
	while(1){
		//read ADC
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 268:	82 e4       	ldi	r24, 0x42	; 66
 26a:	d4 01       	movw	r26, r8
 26c:	8c 93       	st	X, r24
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x02 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 26e:	d6 01       	movw	r26, r12
 270:	8c 91       	ld	r24, X
 272:	80 64       	ori	r24, 0x40	; 64
 274:	8c 93       	st	X, r24
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
 276:	d6 01       	movw	r26, r12
 278:	8c 91       	ld	r24, X
 27a:	86 fd       	sbrc	r24, 6
 27c:	fc cf       	rjmp	.-8      	; 0x276 <main+0x86>
		adcReadForeFinger = ADC;
 27e:	d5 01       	movw	r26, r10
 280:	6d 91       	ld	r22, X+
 282:	7c 91       	ld	r23, X
		
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 284:	83 e4       	ldi	r24, 0x43	; 67
 286:	d4 01       	movw	r26, r8
 288:	8c 93       	st	X, r24
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x03 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 28a:	d6 01       	movw	r26, r12
 28c:	8c 91       	ld	r24, X
 28e:	80 64       	ori	r24, 0x40	; 64
 290:	8c 93       	st	X, r24
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
 292:	d6 01       	movw	r26, r12
 294:	8c 91       	ld	r24, X
 296:	86 fd       	sbrc	r24, 6
 298:	fc cf       	rjmp	.-8      	; 0x292 <main+0xa2>
		adcReadMiddleFinger = ADC;
 29a:	d5 01       	movw	r26, r10
 29c:	4d 91       	ld	r20, X+
 29e:	5c 91       	ld	r21, X
		
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 2a0:	84 e4       	ldi	r24, 0x44	; 68
 2a2:	d4 01       	movw	r26, r8
 2a4:	8c 93       	st	X, r24
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x04 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 2a6:	d6 01       	movw	r26, r12
 2a8:	8c 91       	ld	r24, X
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	8c 93       	st	X, r24
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
 2ae:	d6 01       	movw	r26, r12
 2b0:	8c 91       	ld	r24, X
 2b2:	86 fd       	sbrc	r24, 6
 2b4:	fc cf       	rjmp	.-8      	; 0x2ae <main+0xbe>
		adcReadRingFinger = ADC;	
 2b6:	d5 01       	movw	r26, r10
 2b8:	8d 91       	ld	r24, X+
 2ba:	9c 91       	ld	r25, X
		
		//calculate averages
		if(countAvg < 20){
 2bc:	e4 31       	cpi	r30, 0x14	; 20
 2be:	40 f4       	brcc	.+16     	; 0x2d0 <main+0xe0>
			avgAdcReadForeFinger += adcReadForeFinger;
 2c0:	26 0f       	add	r18, r22
 2c2:	37 1f       	adc	r19, r23
			avgAdcReadMiddleFinger += adcReadMiddleFinger;
 2c4:	04 0f       	add	r16, r20
 2c6:	15 1f       	adc	r17, r21
			avgAdcReadRingFinger += adcReadRingFinger;
 2c8:	e8 0e       	add	r14, r24
 2ca:	f9 1e       	adc	r15, r25
			countAvg += 1;
 2cc:	ef 5f       	subi	r30, 0xFF	; 255
 2ce:	cc cf       	rjmp	.-104    	; 0x268 <main+0x78>
		}
		else{ 	//sending blue tooth command
			avgAdcReadForeFinger = avgAdcReadForeFinger/20;
 2d0:	ad ec       	ldi	r26, 0xCD	; 205
 2d2:	bc ec       	ldi	r27, 0xCC	; 204
 2d4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__umulhisi3>
 2d8:	1c 01       	movw	r2, r24
 2da:	36 94       	lsr	r3
 2dc:	27 94       	ror	r2
 2de:	36 94       	lsr	r3
 2e0:	27 94       	ror	r2
 2e2:	36 94       	lsr	r3
 2e4:	27 94       	ror	r2
 2e6:	36 94       	lsr	r3
 2e8:	27 94       	ror	r2
			sprintf(printnum,"%u",avgAdcReadForeFinger); // Convert 10-bit ADC value (unsigned 16-bit integer) to a string
 2ea:	3f 92       	push	r3
 2ec:	2f 92       	push	r2
 2ee:	7f 92       	push	r7
 2f0:	6f 92       	push	r6
 2f2:	5f 92       	push	r5
 2f4:	4f 92       	push	r4
 2f6:	0e 94 77 02 	call	0x4ee	; 0x4ee <sprintf>
			USART0_Print("ADC Fore = ");
 2fa:	8d e1       	ldi	r24, 0x1D	; 29
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
			USART0_Println(printnum); // Call function to write string to USART0
 302:	c2 01       	movw	r24, r4
 304:	0e 94 9e 00 	call	0x13c	; 0x13c <USART0_Println>
			
			avgAdcReadMiddleFinger = avgAdcReadMiddleFinger/20;
 308:	98 01       	movw	r18, r16
 30a:	ad ec       	ldi	r26, 0xCD	; 205
 30c:	bc ec       	ldi	r27, 0xCC	; 204
 30e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__umulhisi3>
 312:	92 95       	swap	r25
 314:	82 95       	swap	r24
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	89 27       	eor	r24, r25
 31a:	9f 70       	andi	r25, 0x0F	; 15
 31c:	89 27       	eor	r24, r25
 31e:	98 87       	std	Y+8, r25	; 0x08
 320:	8f 83       	std	Y+7, r24	; 0x07
			sprintf(printnum,"%u",avgAdcReadMiddleFinger); // Convert 10-bit ADC value (unsigned 16-bit integer) to a string
 322:	9f 93       	push	r25
 324:	8f 93       	push	r24
 326:	7f 92       	push	r7
 328:	6f 92       	push	r6
 32a:	5f 92       	push	r5
 32c:	4f 92       	push	r4
 32e:	0e 94 77 02 	call	0x4ee	; 0x4ee <sprintf>
			USART0_Print("ADC Middle = ");
 332:	89 e2       	ldi	r24, 0x29	; 41
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
			USART0_Println(printnum); // Call function to write string to USART0
 33a:	c2 01       	movw	r24, r4
 33c:	0e 94 9e 00 	call	0x13c	; 0x13c <USART0_Println>
			
			avgAdcReadRingFinger = avgAdcReadRingFinger/20;
 340:	97 01       	movw	r18, r14
 342:	ad ec       	ldi	r26, 0xCD	; 205
 344:	bc ec       	ldi	r27, 0xCC	; 204
 346:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__umulhisi3>
 34a:	92 95       	swap	r25
 34c:	82 95       	swap	r24
 34e:	8f 70       	andi	r24, 0x0F	; 15
 350:	89 27       	eor	r24, r25
 352:	9f 70       	andi	r25, 0x0F	; 15
 354:	89 27       	eor	r24, r25
 356:	9a 87       	std	Y+10, r25	; 0x0a
 358:	89 87       	std	Y+9, r24	; 0x09
			sprintf(printnum,"%u",avgAdcReadRingFinger); // Convert 10-bit ADC value (unsigned 16-bit integer) to a string
 35a:	9f 93       	push	r25
 35c:	8f 93       	push	r24
 35e:	7f 92       	push	r7
 360:	6f 92       	push	r6
 362:	5f 92       	push	r5
 364:	4f 92       	push	r4
 366:	0e 94 77 02 	call	0x4ee	; 0x4ee <sprintf>
			USART0_Print("ADC Ring = ");
 36a:	87 e3       	ldi	r24, 0x37	; 55
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
			USART0_Println(printnum); // Call function to write string to USART0
 372:	c2 01       	movw	r24, r4
 374:	0e 94 9e 00 	call	0x13c	; 0x13c <USART0_Println>
			
			//determine command
			memcpy(command,
				adcToCommand(
 378:	0f 2e       	mov	r0, r31
 37a:	fc e2       	ldi	r31, 0x2C	; 44
 37c:	ef 2e       	mov	r14, r31
 37e:	ff 24       	eor	r15, r15
 380:	f3 94       	inc	r15
 382:	f0 2d       	mov	r31, r0
 384:	0c e2       	ldi	r16, 0x2C	; 44
 386:	11 e0       	ldi	r17, 0x01	; 1
 388:	2c e2       	ldi	r18, 0x2C	; 44
 38a:	31 e0       	ldi	r19, 0x01	; 1
 38c:	49 85       	ldd	r20, Y+9	; 0x09
 38e:	5a 85       	ldd	r21, Y+10	; 0x0a
 390:	6f 81       	ldd	r22, Y+7	; 0x07
 392:	78 85       	ldd	r23, Y+8	; 0x08
 394:	c1 01       	movw	r24, r2
 396:	0e 94 c3 00 	call	0x186	; 0x186 <adcToCommand>
 39a:	fc 01       	movw	r30, r24
			sprintf(printnum,"%u",avgAdcReadRingFinger); // Convert 10-bit ADC value (unsigned 16-bit integer) to a string
			USART0_Print("ADC Ring = ");
			USART0_Println(printnum); // Call function to write string to USART0
			
			//determine command
			memcpy(command,
 39c:	95 e0       	ldi	r25, 0x05	; 5
 39e:	de 01       	movw	r26, r28
 3a0:	11 96       	adiw	r26, 0x01	; 1
 3a2:	01 90       	ld	r0, Z+
 3a4:	0d 92       	st	X+, r0
 3a6:	9a 95       	dec	r25
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x1b2>
					foreFingerThreshold,
					middleFingerThreshold,
					ringFingerThreshold),
				sizeof(command));
			//Write command to BT
			USART0_Println("--------------------------");
 3aa:	83 e4       	ldi	r24, 0x43	; 67
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 9e 00 	call	0x13c	; 0x13c <USART0_Println>
			USART0_Print(command);
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
			USART0_Println("--------------------------");
 3ba:	83 e4       	ldi	r24, 0x43	; 67
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 9e 00 	call	0x13c	; 0x13c <USART0_Println>
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
			//reset average calculators
			avgAdcReadForeFinger = 0;
			avgAdcReadMiddleFinger = 0;
			avgAdcReadRingFinger = 0;
			countAvg = 0;
 3cc:	e0 e0       	ldi	r30, 0x00	; 0
			USART0_Print(command);
			USART0_Println("--------------------------");
			//reset average calculators
			avgAdcReadForeFinger = 0;
			avgAdcReadMiddleFinger = 0;
			avgAdcReadRingFinger = 0;
 3ce:	e1 2c       	mov	r14, r1
 3d0:	f1 2c       	mov	r15, r1
			USART0_Println("--------------------------");
			USART0_Print(command);
			USART0_Println("--------------------------");
			//reset average calculators
			avgAdcReadForeFinger = 0;
			avgAdcReadMiddleFinger = 0;
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e0       	ldi	r17, 0x00	; 0
			//Write command to BT
			USART0_Println("--------------------------");
			USART0_Print(command);
			USART0_Println("--------------------------");
			//reset average calculators
			avgAdcReadForeFinger = 0;
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	46 cf       	rjmp	.-372    	; 0x268 <main+0x78>

000003dc <ADC_0_init>:
 */
int8_t ADC_0_init()
{

	/* Enable clock to write ADC registers */
	PRR0 &= ~(1 << PRADC);
 3dc:	e4 e6       	ldi	r30, 0x64	; 100
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	8e 7f       	andi	r24, 0xFE	; 254
 3e4:	80 83       	st	Z, r24

	ADMUX = (0x01 << REFS0)   /* AVCC with external capacitor at AREF pin */
 3e6:	80 e4       	ldi	r24, 0x40	; 64
 3e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	        | (0 << ADLAR)    /* Left Adjust Result: disabled */
	        | (0x00 << MUX0); /* ADC Single Ended Input pin 0 */

	ADCSRA = (1 << ADEN)        /* ADC: enabled */
 3ec:	81 e8       	ldi	r24, 0x81	; 129
 3ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	         | (0 << ADATE)     /* Auto Trigger: disabled */
	         | (0 << ADIE)      /* ADC Interrupt: disabled */
	         | (0x01 << ADPS0); /* 2 */
	ADCSRB = (0x00 << ADTS0)    /* Free Running mode */
 3f2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	         | (0 << ACME)      /* Analog Comparator Multiplexer: disabled */
	    ;

	DIDR0 = 1 << ADC2D    /* Disable digital input buffer for ADC2 */
 3f6:	8c e1       	ldi	r24, 0x1C	; 28
 3f8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	        | 1 << ADC3D  /* Disable digital input buffer for ADC3 */
	        | 1 << ADC4D; /* Disable digital input buffer for ADC4 */

	return 0;
}
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	08 95       	ret

00000400 <ADC_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 400:	42 98       	cbi	0x08, 2	; 8
 402:	43 98       	cbi	0x08, 3	; 8
 404:	44 98       	cbi	0x08, 4	; 8
 406:	0e 94 ee 01 	call	0x3dc	; 0x3dc <ADC_0_init>
 40a:	08 95       	ret

0000040c <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 40c:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 40e:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 410:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 412:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 414:	0e 94 44 02 	call	0x488	; 0x488 <USART_0_init>
 418:	08 95       	ret

0000041a <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 41a:	8d e3       	ldi	r24, 0x3D	; 61
 41c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 426:	94 b1       	in	r25, 0x04	; 4
 428:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 42a:	95 b1       	in	r25, 0x05	; 5
 42c:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 42e:	97 b1       	in	r25, 0x07	; 7
 430:	90 78       	andi	r25, 0x80	; 128
 432:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 434:	98 b1       	in	r25, 0x08	; 8
 436:	9f 67       	ori	r25, 0x7F	; 127
 438:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 43a:	9a b1       	in	r25, 0x0a	; 10
 43c:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 43e:	9b b1       	in	r25, 0x0b	; 11
 440:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 442:	8d b1       	in	r24, 0x0d	; 13
 444:	80 7f       	andi	r24, 0xF0	; 240
 446:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 448:	8e b1       	in	r24, 0x0e	; 14
 44a:	8f 60       	ori	r24, 0x0F	; 15
 44c:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	60 e8       	ldi	r22, 0x80	; 128
 452:	81 e6       	ldi	r24, 0x61	; 97
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 36 02 	call	0x46c	; 0x46c <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 45a:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 45c:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	ADC_0_initialization();
 45e:	0e 94 00 02 	call	0x400	; 0x400 <ADC_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 462:	0e 94 3d 02 	call	0x47a	; 0x47a <TIMER_0_init>

	ADC_0_initialization();

	TIMER_0_initialization();

	USART_0_initialization();
 466:	0e 94 06 02 	call	0x40c	; 0x40c <USART_0_initialization>
 46a:	08 95       	ret

0000046c <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 46c:	2f b7       	in	r18, 0x3f	; 63
	cli
 46e:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 470:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 472:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 474:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 476:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 478:	08 95       	ret

0000047a <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
 47a:	e4 e6       	ldi	r30, 0x64	; 100
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	87 7f       	andi	r24, 0xF7	; 247
 482:	80 83       	st	Z, r24
	//		 | 0 << OCIE1A /* Output Compare A Match Interrupt Enable: disabled */
	//		 | 0 << ICIE1 /* Input Capture Interrupt Enable: disabled */
	//		 | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	08 95       	ret

00000488 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 488:	e4 e6       	ldi	r30, 0x64	; 100
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	8d 7f       	andi	r24, 0xFD	; 253
 490:	80 83       	st	Z, r24
 492:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 496:	8c e0       	ldi	r24, 0x0C	; 12
 498:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 49c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4a0:	88 e9       	ldi	r24, 0x98	; 152
 4a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <__data_end+0x3>
 4ae:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__data_end+0x2>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	08 95       	ret

000004b6 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 4b6:	e0 ec       	ldi	r30, 0xC0	; 192
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	90 81       	ld	r25, Z
 4bc:	95 ff       	sbrs	r25, 5
 4be:	fd cf       	rjmp	.-6      	; 0x4ba <USART_0_write+0x4>
		;
	UDR0 = data;
 4c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4c4:	08 95       	ret

000004c6 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 4c6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <USART_0_write>
	return 0;
}
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	08 95       	ret

000004d0 <__umulhisi3>:
 4d0:	a2 9f       	mul	r26, r18
 4d2:	b0 01       	movw	r22, r0
 4d4:	b3 9f       	mul	r27, r19
 4d6:	c0 01       	movw	r24, r0
 4d8:	a3 9f       	mul	r26, r19
 4da:	70 0d       	add	r23, r0
 4dc:	81 1d       	adc	r24, r1
 4de:	11 24       	eor	r1, r1
 4e0:	91 1d       	adc	r25, r1
 4e2:	b2 9f       	mul	r27, r18
 4e4:	70 0d       	add	r23, r0
 4e6:	81 1d       	adc	r24, r1
 4e8:	11 24       	eor	r1, r1
 4ea:	91 1d       	adc	r25, r1
 4ec:	08 95       	ret

000004ee <sprintf>:
 4ee:	ae e0       	ldi	r26, 0x0E	; 14
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	ed e7       	ldi	r30, 0x7D	; 125
 4f4:	f2 e0       	ldi	r31, 0x02	; 2
 4f6:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__prologue_saves__+0x1c>
 4fa:	0d 89       	ldd	r16, Y+21	; 0x15
 4fc:	1e 89       	ldd	r17, Y+22	; 0x16
 4fe:	86 e0       	ldi	r24, 0x06	; 6
 500:	8c 83       	std	Y+4, r24	; 0x04
 502:	1a 83       	std	Y+2, r17	; 0x02
 504:	09 83       	std	Y+1, r16	; 0x01
 506:	8f ef       	ldi	r24, 0xFF	; 255
 508:	9f e7       	ldi	r25, 0x7F	; 127
 50a:	9e 83       	std	Y+6, r25	; 0x06
 50c:	8d 83       	std	Y+5, r24	; 0x05
 50e:	ae 01       	movw	r20, r28
 510:	47 5e       	subi	r20, 0xE7	; 231
 512:	5f 4f       	sbci	r21, 0xFF	; 255
 514:	6f 89       	ldd	r22, Y+23	; 0x17
 516:	78 8d       	ldd	r23, Y+24	; 0x18
 518:	ce 01       	movw	r24, r28
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	0e 94 99 02 	call	0x532	; 0x532 <vfprintf>
 520:	ef 81       	ldd	r30, Y+7	; 0x07
 522:	f8 85       	ldd	r31, Y+8	; 0x08
 524:	e0 0f       	add	r30, r16
 526:	f1 1f       	adc	r31, r17
 528:	10 82       	st	Z, r1
 52a:	2e 96       	adiw	r28, 0x0e	; 14
 52c:	e4 e0       	ldi	r30, 0x04	; 4
 52e:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__epilogue_restores__+0x1c>

00000532 <vfprintf>:
 532:	ab e0       	ldi	r26, 0x0B	; 11
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	ef e9       	ldi	r30, 0x9F	; 159
 538:	f2 e0       	ldi	r31, 0x02	; 2
 53a:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__prologue_saves__>
 53e:	6c 01       	movw	r12, r24
 540:	7b 01       	movw	r14, r22
 542:	8a 01       	movw	r16, r20
 544:	fc 01       	movw	r30, r24
 546:	17 82       	std	Z+7, r1	; 0x07
 548:	16 82       	std	Z+6, r1	; 0x06
 54a:	83 81       	ldd	r24, Z+3	; 0x03
 54c:	81 ff       	sbrs	r24, 1
 54e:	cc c1       	rjmp	.+920    	; 0x8e8 <vfprintf+0x3b6>
 550:	ce 01       	movw	r24, r28
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	3c 01       	movw	r6, r24
 556:	f6 01       	movw	r30, r12
 558:	93 81       	ldd	r25, Z+3	; 0x03
 55a:	f7 01       	movw	r30, r14
 55c:	93 fd       	sbrc	r25, 3
 55e:	85 91       	lpm	r24, Z+
 560:	93 ff       	sbrs	r25, 3
 562:	81 91       	ld	r24, Z+
 564:	7f 01       	movw	r14, r30
 566:	88 23       	and	r24, r24
 568:	09 f4       	brne	.+2      	; 0x56c <vfprintf+0x3a>
 56a:	ba c1       	rjmp	.+884    	; 0x8e0 <vfprintf+0x3ae>
 56c:	85 32       	cpi	r24, 0x25	; 37
 56e:	39 f4       	brne	.+14     	; 0x57e <vfprintf+0x4c>
 570:	93 fd       	sbrc	r25, 3
 572:	85 91       	lpm	r24, Z+
 574:	93 ff       	sbrs	r25, 3
 576:	81 91       	ld	r24, Z+
 578:	7f 01       	movw	r14, r30
 57a:	85 32       	cpi	r24, 0x25	; 37
 57c:	29 f4       	brne	.+10     	; 0x588 <vfprintf+0x56>
 57e:	b6 01       	movw	r22, r12
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 90 04 	call	0x920	; 0x920 <fputc>
 586:	e7 cf       	rjmp	.-50     	; 0x556 <vfprintf+0x24>
 588:	91 2c       	mov	r9, r1
 58a:	21 2c       	mov	r2, r1
 58c:	31 2c       	mov	r3, r1
 58e:	ff e1       	ldi	r31, 0x1F	; 31
 590:	f3 15       	cp	r31, r3
 592:	d8 f0       	brcs	.+54     	; 0x5ca <vfprintf+0x98>
 594:	8b 32       	cpi	r24, 0x2B	; 43
 596:	79 f0       	breq	.+30     	; 0x5b6 <vfprintf+0x84>
 598:	38 f4       	brcc	.+14     	; 0x5a8 <vfprintf+0x76>
 59a:	80 32       	cpi	r24, 0x20	; 32
 59c:	79 f0       	breq	.+30     	; 0x5bc <vfprintf+0x8a>
 59e:	83 32       	cpi	r24, 0x23	; 35
 5a0:	a1 f4       	brne	.+40     	; 0x5ca <vfprintf+0x98>
 5a2:	23 2d       	mov	r18, r3
 5a4:	20 61       	ori	r18, 0x10	; 16
 5a6:	1d c0       	rjmp	.+58     	; 0x5e2 <vfprintf+0xb0>
 5a8:	8d 32       	cpi	r24, 0x2D	; 45
 5aa:	61 f0       	breq	.+24     	; 0x5c4 <vfprintf+0x92>
 5ac:	80 33       	cpi	r24, 0x30	; 48
 5ae:	69 f4       	brne	.+26     	; 0x5ca <vfprintf+0x98>
 5b0:	23 2d       	mov	r18, r3
 5b2:	21 60       	ori	r18, 0x01	; 1
 5b4:	16 c0       	rjmp	.+44     	; 0x5e2 <vfprintf+0xb0>
 5b6:	83 2d       	mov	r24, r3
 5b8:	82 60       	ori	r24, 0x02	; 2
 5ba:	38 2e       	mov	r3, r24
 5bc:	e3 2d       	mov	r30, r3
 5be:	e4 60       	ori	r30, 0x04	; 4
 5c0:	3e 2e       	mov	r3, r30
 5c2:	2a c0       	rjmp	.+84     	; 0x618 <vfprintf+0xe6>
 5c4:	f3 2d       	mov	r31, r3
 5c6:	f8 60       	ori	r31, 0x08	; 8
 5c8:	1d c0       	rjmp	.+58     	; 0x604 <vfprintf+0xd2>
 5ca:	37 fc       	sbrc	r3, 7
 5cc:	2d c0       	rjmp	.+90     	; 0x628 <vfprintf+0xf6>
 5ce:	20 ed       	ldi	r18, 0xD0	; 208
 5d0:	28 0f       	add	r18, r24
 5d2:	2a 30       	cpi	r18, 0x0A	; 10
 5d4:	40 f0       	brcs	.+16     	; 0x5e6 <vfprintf+0xb4>
 5d6:	8e 32       	cpi	r24, 0x2E	; 46
 5d8:	b9 f4       	brne	.+46     	; 0x608 <vfprintf+0xd6>
 5da:	36 fc       	sbrc	r3, 6
 5dc:	81 c1       	rjmp	.+770    	; 0x8e0 <vfprintf+0x3ae>
 5de:	23 2d       	mov	r18, r3
 5e0:	20 64       	ori	r18, 0x40	; 64
 5e2:	32 2e       	mov	r3, r18
 5e4:	19 c0       	rjmp	.+50     	; 0x618 <vfprintf+0xe6>
 5e6:	36 fe       	sbrs	r3, 6
 5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <vfprintf+0xc4>
 5ea:	8a e0       	ldi	r24, 0x0A	; 10
 5ec:	98 9e       	mul	r9, r24
 5ee:	20 0d       	add	r18, r0
 5f0:	11 24       	eor	r1, r1
 5f2:	92 2e       	mov	r9, r18
 5f4:	11 c0       	rjmp	.+34     	; 0x618 <vfprintf+0xe6>
 5f6:	ea e0       	ldi	r30, 0x0A	; 10
 5f8:	2e 9e       	mul	r2, r30
 5fa:	20 0d       	add	r18, r0
 5fc:	11 24       	eor	r1, r1
 5fe:	22 2e       	mov	r2, r18
 600:	f3 2d       	mov	r31, r3
 602:	f0 62       	ori	r31, 0x20	; 32
 604:	3f 2e       	mov	r3, r31
 606:	08 c0       	rjmp	.+16     	; 0x618 <vfprintf+0xe6>
 608:	8c 36       	cpi	r24, 0x6C	; 108
 60a:	21 f4       	brne	.+8      	; 0x614 <vfprintf+0xe2>
 60c:	83 2d       	mov	r24, r3
 60e:	80 68       	ori	r24, 0x80	; 128
 610:	38 2e       	mov	r3, r24
 612:	02 c0       	rjmp	.+4      	; 0x618 <vfprintf+0xe6>
 614:	88 36       	cpi	r24, 0x68	; 104
 616:	41 f4       	brne	.+16     	; 0x628 <vfprintf+0xf6>
 618:	f7 01       	movw	r30, r14
 61a:	93 fd       	sbrc	r25, 3
 61c:	85 91       	lpm	r24, Z+
 61e:	93 ff       	sbrs	r25, 3
 620:	81 91       	ld	r24, Z+
 622:	7f 01       	movw	r14, r30
 624:	81 11       	cpse	r24, r1
 626:	b3 cf       	rjmp	.-154    	; 0x58e <vfprintf+0x5c>
 628:	98 2f       	mov	r25, r24
 62a:	9f 7d       	andi	r25, 0xDF	; 223
 62c:	95 54       	subi	r25, 0x45	; 69
 62e:	93 30       	cpi	r25, 0x03	; 3
 630:	28 f4       	brcc	.+10     	; 0x63c <vfprintf+0x10a>
 632:	0c 5f       	subi	r16, 0xFC	; 252
 634:	1f 4f       	sbci	r17, 0xFF	; 255
 636:	9f e3       	ldi	r25, 0x3F	; 63
 638:	99 83       	std	Y+1, r25	; 0x01
 63a:	0d c0       	rjmp	.+26     	; 0x656 <vfprintf+0x124>
 63c:	83 36       	cpi	r24, 0x63	; 99
 63e:	31 f0       	breq	.+12     	; 0x64c <vfprintf+0x11a>
 640:	83 37       	cpi	r24, 0x73	; 115
 642:	71 f0       	breq	.+28     	; 0x660 <vfprintf+0x12e>
 644:	83 35       	cpi	r24, 0x53	; 83
 646:	09 f0       	breq	.+2      	; 0x64a <vfprintf+0x118>
 648:	59 c0       	rjmp	.+178    	; 0x6fc <vfprintf+0x1ca>
 64a:	21 c0       	rjmp	.+66     	; 0x68e <vfprintf+0x15c>
 64c:	f8 01       	movw	r30, r16
 64e:	80 81       	ld	r24, Z
 650:	89 83       	std	Y+1, r24	; 0x01
 652:	0e 5f       	subi	r16, 0xFE	; 254
 654:	1f 4f       	sbci	r17, 0xFF	; 255
 656:	88 24       	eor	r8, r8
 658:	83 94       	inc	r8
 65a:	91 2c       	mov	r9, r1
 65c:	53 01       	movw	r10, r6
 65e:	13 c0       	rjmp	.+38     	; 0x686 <vfprintf+0x154>
 660:	28 01       	movw	r4, r16
 662:	f2 e0       	ldi	r31, 0x02	; 2
 664:	4f 0e       	add	r4, r31
 666:	51 1c       	adc	r5, r1
 668:	f8 01       	movw	r30, r16
 66a:	a0 80       	ld	r10, Z
 66c:	b1 80       	ldd	r11, Z+1	; 0x01
 66e:	36 fe       	sbrs	r3, 6
 670:	03 c0       	rjmp	.+6      	; 0x678 <vfprintf+0x146>
 672:	69 2d       	mov	r22, r9
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	02 c0       	rjmp	.+4      	; 0x67c <vfprintf+0x14a>
 678:	6f ef       	ldi	r22, 0xFF	; 255
 67a:	7f ef       	ldi	r23, 0xFF	; 255
 67c:	c5 01       	movw	r24, r10
 67e:	0e 94 85 04 	call	0x90a	; 0x90a <strnlen>
 682:	4c 01       	movw	r8, r24
 684:	82 01       	movw	r16, r4
 686:	f3 2d       	mov	r31, r3
 688:	ff 77       	andi	r31, 0x7F	; 127
 68a:	3f 2e       	mov	r3, r31
 68c:	16 c0       	rjmp	.+44     	; 0x6ba <vfprintf+0x188>
 68e:	28 01       	movw	r4, r16
 690:	22 e0       	ldi	r18, 0x02	; 2
 692:	42 0e       	add	r4, r18
 694:	51 1c       	adc	r5, r1
 696:	f8 01       	movw	r30, r16
 698:	a0 80       	ld	r10, Z
 69a:	b1 80       	ldd	r11, Z+1	; 0x01
 69c:	36 fe       	sbrs	r3, 6
 69e:	03 c0       	rjmp	.+6      	; 0x6a6 <vfprintf+0x174>
 6a0:	69 2d       	mov	r22, r9
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <vfprintf+0x178>
 6a6:	6f ef       	ldi	r22, 0xFF	; 255
 6a8:	7f ef       	ldi	r23, 0xFF	; 255
 6aa:	c5 01       	movw	r24, r10
 6ac:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <strnlen_P>
 6b0:	4c 01       	movw	r8, r24
 6b2:	f3 2d       	mov	r31, r3
 6b4:	f0 68       	ori	r31, 0x80	; 128
 6b6:	3f 2e       	mov	r3, r31
 6b8:	82 01       	movw	r16, r4
 6ba:	33 fc       	sbrc	r3, 3
 6bc:	1b c0       	rjmp	.+54     	; 0x6f4 <vfprintf+0x1c2>
 6be:	82 2d       	mov	r24, r2
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	88 16       	cp	r8, r24
 6c4:	99 06       	cpc	r9, r25
 6c6:	b0 f4       	brcc	.+44     	; 0x6f4 <vfprintf+0x1c2>
 6c8:	b6 01       	movw	r22, r12
 6ca:	80 e2       	ldi	r24, 0x20	; 32
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 90 04 	call	0x920	; 0x920 <fputc>
 6d2:	2a 94       	dec	r2
 6d4:	f4 cf       	rjmp	.-24     	; 0x6be <vfprintf+0x18c>
 6d6:	f5 01       	movw	r30, r10
 6d8:	37 fc       	sbrc	r3, 7
 6da:	85 91       	lpm	r24, Z+
 6dc:	37 fe       	sbrs	r3, 7
 6de:	81 91       	ld	r24, Z+
 6e0:	5f 01       	movw	r10, r30
 6e2:	b6 01       	movw	r22, r12
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 90 04 	call	0x920	; 0x920 <fputc>
 6ea:	21 10       	cpse	r2, r1
 6ec:	2a 94       	dec	r2
 6ee:	21 e0       	ldi	r18, 0x01	; 1
 6f0:	82 1a       	sub	r8, r18
 6f2:	91 08       	sbc	r9, r1
 6f4:	81 14       	cp	r8, r1
 6f6:	91 04       	cpc	r9, r1
 6f8:	71 f7       	brne	.-36     	; 0x6d6 <vfprintf+0x1a4>
 6fa:	e8 c0       	rjmp	.+464    	; 0x8cc <vfprintf+0x39a>
 6fc:	84 36       	cpi	r24, 0x64	; 100
 6fe:	11 f0       	breq	.+4      	; 0x704 <vfprintf+0x1d2>
 700:	89 36       	cpi	r24, 0x69	; 105
 702:	41 f5       	brne	.+80     	; 0x754 <vfprintf+0x222>
 704:	f8 01       	movw	r30, r16
 706:	37 fe       	sbrs	r3, 7
 708:	07 c0       	rjmp	.+14     	; 0x718 <vfprintf+0x1e6>
 70a:	60 81       	ld	r22, Z
 70c:	71 81       	ldd	r23, Z+1	; 0x01
 70e:	82 81       	ldd	r24, Z+2	; 0x02
 710:	93 81       	ldd	r25, Z+3	; 0x03
 712:	0c 5f       	subi	r16, 0xFC	; 252
 714:	1f 4f       	sbci	r17, 0xFF	; 255
 716:	08 c0       	rjmp	.+16     	; 0x728 <vfprintf+0x1f6>
 718:	60 81       	ld	r22, Z
 71a:	71 81       	ldd	r23, Z+1	; 0x01
 71c:	07 2e       	mov	r0, r23
 71e:	00 0c       	add	r0, r0
 720:	88 0b       	sbc	r24, r24
 722:	99 0b       	sbc	r25, r25
 724:	0e 5f       	subi	r16, 0xFE	; 254
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	f3 2d       	mov	r31, r3
 72a:	ff 76       	andi	r31, 0x6F	; 111
 72c:	3f 2e       	mov	r3, r31
 72e:	97 ff       	sbrs	r25, 7
 730:	09 c0       	rjmp	.+18     	; 0x744 <vfprintf+0x212>
 732:	90 95       	com	r25
 734:	80 95       	com	r24
 736:	70 95       	com	r23
 738:	61 95       	neg	r22
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	8f 4f       	sbci	r24, 0xFF	; 255
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	f0 68       	ori	r31, 0x80	; 128
 742:	3f 2e       	mov	r3, r31
 744:	2a e0       	ldi	r18, 0x0A	; 10
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	a3 01       	movw	r20, r6
 74a:	0e 94 cc 04 	call	0x998	; 0x998 <__ultoa_invert>
 74e:	88 2e       	mov	r8, r24
 750:	86 18       	sub	r8, r6
 752:	45 c0       	rjmp	.+138    	; 0x7de <vfprintf+0x2ac>
 754:	85 37       	cpi	r24, 0x75	; 117
 756:	31 f4       	brne	.+12     	; 0x764 <vfprintf+0x232>
 758:	23 2d       	mov	r18, r3
 75a:	2f 7e       	andi	r18, 0xEF	; 239
 75c:	b2 2e       	mov	r11, r18
 75e:	2a e0       	ldi	r18, 0x0A	; 10
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	25 c0       	rjmp	.+74     	; 0x7ae <vfprintf+0x27c>
 764:	93 2d       	mov	r25, r3
 766:	99 7f       	andi	r25, 0xF9	; 249
 768:	b9 2e       	mov	r11, r25
 76a:	8f 36       	cpi	r24, 0x6F	; 111
 76c:	c1 f0       	breq	.+48     	; 0x79e <vfprintf+0x26c>
 76e:	18 f4       	brcc	.+6      	; 0x776 <vfprintf+0x244>
 770:	88 35       	cpi	r24, 0x58	; 88
 772:	79 f0       	breq	.+30     	; 0x792 <vfprintf+0x260>
 774:	b5 c0       	rjmp	.+362    	; 0x8e0 <vfprintf+0x3ae>
 776:	80 37       	cpi	r24, 0x70	; 112
 778:	19 f0       	breq	.+6      	; 0x780 <vfprintf+0x24e>
 77a:	88 37       	cpi	r24, 0x78	; 120
 77c:	21 f0       	breq	.+8      	; 0x786 <vfprintf+0x254>
 77e:	b0 c0       	rjmp	.+352    	; 0x8e0 <vfprintf+0x3ae>
 780:	e9 2f       	mov	r30, r25
 782:	e0 61       	ori	r30, 0x10	; 16
 784:	be 2e       	mov	r11, r30
 786:	b4 fe       	sbrs	r11, 4
 788:	0d c0       	rjmp	.+26     	; 0x7a4 <vfprintf+0x272>
 78a:	fb 2d       	mov	r31, r11
 78c:	f4 60       	ori	r31, 0x04	; 4
 78e:	bf 2e       	mov	r11, r31
 790:	09 c0       	rjmp	.+18     	; 0x7a4 <vfprintf+0x272>
 792:	34 fe       	sbrs	r3, 4
 794:	0a c0       	rjmp	.+20     	; 0x7aa <vfprintf+0x278>
 796:	29 2f       	mov	r18, r25
 798:	26 60       	ori	r18, 0x06	; 6
 79a:	b2 2e       	mov	r11, r18
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <vfprintf+0x278>
 79e:	28 e0       	ldi	r18, 0x08	; 8
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	05 c0       	rjmp	.+10     	; 0x7ae <vfprintf+0x27c>
 7a4:	20 e1       	ldi	r18, 0x10	; 16
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <vfprintf+0x27c>
 7aa:	20 e1       	ldi	r18, 0x10	; 16
 7ac:	32 e0       	ldi	r19, 0x02	; 2
 7ae:	f8 01       	movw	r30, r16
 7b0:	b7 fe       	sbrs	r11, 7
 7b2:	07 c0       	rjmp	.+14     	; 0x7c2 <vfprintf+0x290>
 7b4:	60 81       	ld	r22, Z
 7b6:	71 81       	ldd	r23, Z+1	; 0x01
 7b8:	82 81       	ldd	r24, Z+2	; 0x02
 7ba:	93 81       	ldd	r25, Z+3	; 0x03
 7bc:	0c 5f       	subi	r16, 0xFC	; 252
 7be:	1f 4f       	sbci	r17, 0xFF	; 255
 7c0:	06 c0       	rjmp	.+12     	; 0x7ce <vfprintf+0x29c>
 7c2:	60 81       	ld	r22, Z
 7c4:	71 81       	ldd	r23, Z+1	; 0x01
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 5f       	subi	r16, 0xFE	; 254
 7cc:	1f 4f       	sbci	r17, 0xFF	; 255
 7ce:	a3 01       	movw	r20, r6
 7d0:	0e 94 cc 04 	call	0x998	; 0x998 <__ultoa_invert>
 7d4:	88 2e       	mov	r8, r24
 7d6:	86 18       	sub	r8, r6
 7d8:	fb 2d       	mov	r31, r11
 7da:	ff 77       	andi	r31, 0x7F	; 127
 7dc:	3f 2e       	mov	r3, r31
 7de:	36 fe       	sbrs	r3, 6
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <vfprintf+0x2ca>
 7e2:	23 2d       	mov	r18, r3
 7e4:	2e 7f       	andi	r18, 0xFE	; 254
 7e6:	a2 2e       	mov	r10, r18
 7e8:	89 14       	cp	r8, r9
 7ea:	58 f4       	brcc	.+22     	; 0x802 <vfprintf+0x2d0>
 7ec:	34 fe       	sbrs	r3, 4
 7ee:	0b c0       	rjmp	.+22     	; 0x806 <vfprintf+0x2d4>
 7f0:	32 fc       	sbrc	r3, 2
 7f2:	09 c0       	rjmp	.+18     	; 0x806 <vfprintf+0x2d4>
 7f4:	83 2d       	mov	r24, r3
 7f6:	8e 7e       	andi	r24, 0xEE	; 238
 7f8:	a8 2e       	mov	r10, r24
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <vfprintf+0x2d4>
 7fc:	b8 2c       	mov	r11, r8
 7fe:	a3 2c       	mov	r10, r3
 800:	03 c0       	rjmp	.+6      	; 0x808 <vfprintf+0x2d6>
 802:	b8 2c       	mov	r11, r8
 804:	01 c0       	rjmp	.+2      	; 0x808 <vfprintf+0x2d6>
 806:	b9 2c       	mov	r11, r9
 808:	a4 fe       	sbrs	r10, 4
 80a:	0f c0       	rjmp	.+30     	; 0x82a <vfprintf+0x2f8>
 80c:	fe 01       	movw	r30, r28
 80e:	e8 0d       	add	r30, r8
 810:	f1 1d       	adc	r31, r1
 812:	80 81       	ld	r24, Z
 814:	80 33       	cpi	r24, 0x30	; 48
 816:	21 f4       	brne	.+8      	; 0x820 <vfprintf+0x2ee>
 818:	9a 2d       	mov	r25, r10
 81a:	99 7e       	andi	r25, 0xE9	; 233
 81c:	a9 2e       	mov	r10, r25
 81e:	09 c0       	rjmp	.+18     	; 0x832 <vfprintf+0x300>
 820:	a2 fe       	sbrs	r10, 2
 822:	06 c0       	rjmp	.+12     	; 0x830 <vfprintf+0x2fe>
 824:	b3 94       	inc	r11
 826:	b3 94       	inc	r11
 828:	04 c0       	rjmp	.+8      	; 0x832 <vfprintf+0x300>
 82a:	8a 2d       	mov	r24, r10
 82c:	86 78       	andi	r24, 0x86	; 134
 82e:	09 f0       	breq	.+2      	; 0x832 <vfprintf+0x300>
 830:	b3 94       	inc	r11
 832:	a3 fc       	sbrc	r10, 3
 834:	11 c0       	rjmp	.+34     	; 0x858 <vfprintf+0x326>
 836:	a0 fe       	sbrs	r10, 0
 838:	06 c0       	rjmp	.+12     	; 0x846 <vfprintf+0x314>
 83a:	b2 14       	cp	r11, r2
 83c:	88 f4       	brcc	.+34     	; 0x860 <vfprintf+0x32e>
 83e:	28 0c       	add	r2, r8
 840:	92 2c       	mov	r9, r2
 842:	9b 18       	sub	r9, r11
 844:	0e c0       	rjmp	.+28     	; 0x862 <vfprintf+0x330>
 846:	b2 14       	cp	r11, r2
 848:	60 f4       	brcc	.+24     	; 0x862 <vfprintf+0x330>
 84a:	b6 01       	movw	r22, r12
 84c:	80 e2       	ldi	r24, 0x20	; 32
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 90 04 	call	0x920	; 0x920 <fputc>
 854:	b3 94       	inc	r11
 856:	f7 cf       	rjmp	.-18     	; 0x846 <vfprintf+0x314>
 858:	b2 14       	cp	r11, r2
 85a:	18 f4       	brcc	.+6      	; 0x862 <vfprintf+0x330>
 85c:	2b 18       	sub	r2, r11
 85e:	02 c0       	rjmp	.+4      	; 0x864 <vfprintf+0x332>
 860:	98 2c       	mov	r9, r8
 862:	21 2c       	mov	r2, r1
 864:	a4 fe       	sbrs	r10, 4
 866:	10 c0       	rjmp	.+32     	; 0x888 <vfprintf+0x356>
 868:	b6 01       	movw	r22, r12
 86a:	80 e3       	ldi	r24, 0x30	; 48
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 90 04 	call	0x920	; 0x920 <fputc>
 872:	a2 fe       	sbrs	r10, 2
 874:	17 c0       	rjmp	.+46     	; 0x8a4 <vfprintf+0x372>
 876:	a1 fc       	sbrc	r10, 1
 878:	03 c0       	rjmp	.+6      	; 0x880 <vfprintf+0x34e>
 87a:	88 e7       	ldi	r24, 0x78	; 120
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	02 c0       	rjmp	.+4      	; 0x884 <vfprintf+0x352>
 880:	88 e5       	ldi	r24, 0x58	; 88
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	b6 01       	movw	r22, r12
 886:	0c c0       	rjmp	.+24     	; 0x8a0 <vfprintf+0x36e>
 888:	8a 2d       	mov	r24, r10
 88a:	86 78       	andi	r24, 0x86	; 134
 88c:	59 f0       	breq	.+22     	; 0x8a4 <vfprintf+0x372>
 88e:	a1 fe       	sbrs	r10, 1
 890:	02 c0       	rjmp	.+4      	; 0x896 <vfprintf+0x364>
 892:	8b e2       	ldi	r24, 0x2B	; 43
 894:	01 c0       	rjmp	.+2      	; 0x898 <vfprintf+0x366>
 896:	80 e2       	ldi	r24, 0x20	; 32
 898:	a7 fc       	sbrc	r10, 7
 89a:	8d e2       	ldi	r24, 0x2D	; 45
 89c:	b6 01       	movw	r22, r12
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	0e 94 90 04 	call	0x920	; 0x920 <fputc>
 8a4:	89 14       	cp	r8, r9
 8a6:	38 f4       	brcc	.+14     	; 0x8b6 <vfprintf+0x384>
 8a8:	b6 01       	movw	r22, r12
 8aa:	80 e3       	ldi	r24, 0x30	; 48
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 90 04 	call	0x920	; 0x920 <fputc>
 8b2:	9a 94       	dec	r9
 8b4:	f7 cf       	rjmp	.-18     	; 0x8a4 <vfprintf+0x372>
 8b6:	8a 94       	dec	r8
 8b8:	f3 01       	movw	r30, r6
 8ba:	e8 0d       	add	r30, r8
 8bc:	f1 1d       	adc	r31, r1
 8be:	80 81       	ld	r24, Z
 8c0:	b6 01       	movw	r22, r12
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 90 04 	call	0x920	; 0x920 <fputc>
 8c8:	81 10       	cpse	r8, r1
 8ca:	f5 cf       	rjmp	.-22     	; 0x8b6 <vfprintf+0x384>
 8cc:	22 20       	and	r2, r2
 8ce:	09 f4       	brne	.+2      	; 0x8d2 <vfprintf+0x3a0>
 8d0:	42 ce       	rjmp	.-892    	; 0x556 <vfprintf+0x24>
 8d2:	b6 01       	movw	r22, r12
 8d4:	80 e2       	ldi	r24, 0x20	; 32
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 90 04 	call	0x920	; 0x920 <fputc>
 8dc:	2a 94       	dec	r2
 8de:	f6 cf       	rjmp	.-20     	; 0x8cc <vfprintf+0x39a>
 8e0:	f6 01       	movw	r30, r12
 8e2:	86 81       	ldd	r24, Z+6	; 0x06
 8e4:	97 81       	ldd	r25, Z+7	; 0x07
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <vfprintf+0x3ba>
 8e8:	8f ef       	ldi	r24, 0xFF	; 255
 8ea:	9f ef       	ldi	r25, 0xFF	; 255
 8ec:	2b 96       	adiw	r28, 0x0b	; 11
 8ee:	e2 e1       	ldi	r30, 0x12	; 18
 8f0:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__epilogue_restores__>

000008f4 <strnlen_P>:
 8f4:	fc 01       	movw	r30, r24
 8f6:	05 90       	lpm	r0, Z+
 8f8:	61 50       	subi	r22, 0x01	; 1
 8fa:	70 40       	sbci	r23, 0x00	; 0
 8fc:	01 10       	cpse	r0, r1
 8fe:	d8 f7       	brcc	.-10     	; 0x8f6 <strnlen_P+0x2>
 900:	80 95       	com	r24
 902:	90 95       	com	r25
 904:	8e 0f       	add	r24, r30
 906:	9f 1f       	adc	r25, r31
 908:	08 95       	ret

0000090a <strnlen>:
 90a:	fc 01       	movw	r30, r24
 90c:	61 50       	subi	r22, 0x01	; 1
 90e:	70 40       	sbci	r23, 0x00	; 0
 910:	01 90       	ld	r0, Z+
 912:	01 10       	cpse	r0, r1
 914:	d8 f7       	brcc	.-10     	; 0x90c <strnlen+0x2>
 916:	80 95       	com	r24
 918:	90 95       	com	r25
 91a:	8e 0f       	add	r24, r30
 91c:	9f 1f       	adc	r25, r31
 91e:	08 95       	ret

00000920 <fputc>:
 920:	0f 93       	push	r16
 922:	1f 93       	push	r17
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	fb 01       	movw	r30, r22
 92a:	23 81       	ldd	r18, Z+3	; 0x03
 92c:	21 fd       	sbrc	r18, 1
 92e:	03 c0       	rjmp	.+6      	; 0x936 <fputc+0x16>
 930:	8f ef       	ldi	r24, 0xFF	; 255
 932:	9f ef       	ldi	r25, 0xFF	; 255
 934:	2c c0       	rjmp	.+88     	; 0x98e <fputc+0x6e>
 936:	22 ff       	sbrs	r18, 2
 938:	16 c0       	rjmp	.+44     	; 0x966 <fputc+0x46>
 93a:	46 81       	ldd	r20, Z+6	; 0x06
 93c:	57 81       	ldd	r21, Z+7	; 0x07
 93e:	24 81       	ldd	r18, Z+4	; 0x04
 940:	35 81       	ldd	r19, Z+5	; 0x05
 942:	42 17       	cp	r20, r18
 944:	53 07       	cpc	r21, r19
 946:	44 f4       	brge	.+16     	; 0x958 <fputc+0x38>
 948:	a0 81       	ld	r26, Z
 94a:	b1 81       	ldd	r27, Z+1	; 0x01
 94c:	9d 01       	movw	r18, r26
 94e:	2f 5f       	subi	r18, 0xFF	; 255
 950:	3f 4f       	sbci	r19, 0xFF	; 255
 952:	31 83       	std	Z+1, r19	; 0x01
 954:	20 83       	st	Z, r18
 956:	8c 93       	st	X, r24
 958:	26 81       	ldd	r18, Z+6	; 0x06
 95a:	37 81       	ldd	r19, Z+7	; 0x07
 95c:	2f 5f       	subi	r18, 0xFF	; 255
 95e:	3f 4f       	sbci	r19, 0xFF	; 255
 960:	37 83       	std	Z+7, r19	; 0x07
 962:	26 83       	std	Z+6, r18	; 0x06
 964:	14 c0       	rjmp	.+40     	; 0x98e <fputc+0x6e>
 966:	8b 01       	movw	r16, r22
 968:	ec 01       	movw	r28, r24
 96a:	fb 01       	movw	r30, r22
 96c:	00 84       	ldd	r0, Z+8	; 0x08
 96e:	f1 85       	ldd	r31, Z+9	; 0x09
 970:	e0 2d       	mov	r30, r0
 972:	09 95       	icall
 974:	89 2b       	or	r24, r25
 976:	e1 f6       	brne	.-72     	; 0x930 <fputc+0x10>
 978:	d8 01       	movw	r26, r16
 97a:	16 96       	adiw	r26, 0x06	; 6
 97c:	8d 91       	ld	r24, X+
 97e:	9c 91       	ld	r25, X
 980:	17 97       	sbiw	r26, 0x07	; 7
 982:	01 96       	adiw	r24, 0x01	; 1
 984:	17 96       	adiw	r26, 0x07	; 7
 986:	9c 93       	st	X, r25
 988:	8e 93       	st	-X, r24
 98a:	16 97       	sbiw	r26, 0x06	; 6
 98c:	ce 01       	movw	r24, r28
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	1f 91       	pop	r17
 994:	0f 91       	pop	r16
 996:	08 95       	ret

00000998 <__ultoa_invert>:
 998:	fa 01       	movw	r30, r20
 99a:	aa 27       	eor	r26, r26
 99c:	28 30       	cpi	r18, 0x08	; 8
 99e:	51 f1       	breq	.+84     	; 0x9f4 <__ultoa_invert+0x5c>
 9a0:	20 31       	cpi	r18, 0x10	; 16
 9a2:	81 f1       	breq	.+96     	; 0xa04 <__ultoa_invert+0x6c>
 9a4:	e8 94       	clt
 9a6:	6f 93       	push	r22
 9a8:	6e 7f       	andi	r22, 0xFE	; 254
 9aa:	6e 5f       	subi	r22, 0xFE	; 254
 9ac:	7f 4f       	sbci	r23, 0xFF	; 255
 9ae:	8f 4f       	sbci	r24, 0xFF	; 255
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	af 4f       	sbci	r26, 0xFF	; 255
 9b4:	b1 e0       	ldi	r27, 0x01	; 1
 9b6:	3e d0       	rcall	.+124    	; 0xa34 <__ultoa_invert+0x9c>
 9b8:	b4 e0       	ldi	r27, 0x04	; 4
 9ba:	3c d0       	rcall	.+120    	; 0xa34 <__ultoa_invert+0x9c>
 9bc:	67 0f       	add	r22, r23
 9be:	78 1f       	adc	r23, r24
 9c0:	89 1f       	adc	r24, r25
 9c2:	9a 1f       	adc	r25, r26
 9c4:	a1 1d       	adc	r26, r1
 9c6:	68 0f       	add	r22, r24
 9c8:	79 1f       	adc	r23, r25
 9ca:	8a 1f       	adc	r24, r26
 9cc:	91 1d       	adc	r25, r1
 9ce:	a1 1d       	adc	r26, r1
 9d0:	6a 0f       	add	r22, r26
 9d2:	71 1d       	adc	r23, r1
 9d4:	81 1d       	adc	r24, r1
 9d6:	91 1d       	adc	r25, r1
 9d8:	a1 1d       	adc	r26, r1
 9da:	20 d0       	rcall	.+64     	; 0xa1c <__ultoa_invert+0x84>
 9dc:	09 f4       	brne	.+2      	; 0x9e0 <__ultoa_invert+0x48>
 9de:	68 94       	set
 9e0:	3f 91       	pop	r19
 9e2:	2a e0       	ldi	r18, 0x0A	; 10
 9e4:	26 9f       	mul	r18, r22
 9e6:	11 24       	eor	r1, r1
 9e8:	30 19       	sub	r19, r0
 9ea:	30 5d       	subi	r19, 0xD0	; 208
 9ec:	31 93       	st	Z+, r19
 9ee:	de f6       	brtc	.-74     	; 0x9a6 <__ultoa_invert+0xe>
 9f0:	cf 01       	movw	r24, r30
 9f2:	08 95       	ret
 9f4:	46 2f       	mov	r20, r22
 9f6:	47 70       	andi	r20, 0x07	; 7
 9f8:	40 5d       	subi	r20, 0xD0	; 208
 9fa:	41 93       	st	Z+, r20
 9fc:	b3 e0       	ldi	r27, 0x03	; 3
 9fe:	0f d0       	rcall	.+30     	; 0xa1e <__ultoa_invert+0x86>
 a00:	c9 f7       	brne	.-14     	; 0x9f4 <__ultoa_invert+0x5c>
 a02:	f6 cf       	rjmp	.-20     	; 0x9f0 <__ultoa_invert+0x58>
 a04:	46 2f       	mov	r20, r22
 a06:	4f 70       	andi	r20, 0x0F	; 15
 a08:	40 5d       	subi	r20, 0xD0	; 208
 a0a:	4a 33       	cpi	r20, 0x3A	; 58
 a0c:	18 f0       	brcs	.+6      	; 0xa14 <__ultoa_invert+0x7c>
 a0e:	49 5d       	subi	r20, 0xD9	; 217
 a10:	31 fd       	sbrc	r19, 1
 a12:	40 52       	subi	r20, 0x20	; 32
 a14:	41 93       	st	Z+, r20
 a16:	02 d0       	rcall	.+4      	; 0xa1c <__ultoa_invert+0x84>
 a18:	a9 f7       	brne	.-22     	; 0xa04 <__ultoa_invert+0x6c>
 a1a:	ea cf       	rjmp	.-44     	; 0x9f0 <__ultoa_invert+0x58>
 a1c:	b4 e0       	ldi	r27, 0x04	; 4
 a1e:	a6 95       	lsr	r26
 a20:	97 95       	ror	r25
 a22:	87 95       	ror	r24
 a24:	77 95       	ror	r23
 a26:	67 95       	ror	r22
 a28:	ba 95       	dec	r27
 a2a:	c9 f7       	brne	.-14     	; 0xa1e <__ultoa_invert+0x86>
 a2c:	00 97       	sbiw	r24, 0x00	; 0
 a2e:	61 05       	cpc	r22, r1
 a30:	71 05       	cpc	r23, r1
 a32:	08 95       	ret
 a34:	9b 01       	movw	r18, r22
 a36:	ac 01       	movw	r20, r24
 a38:	0a 2e       	mov	r0, r26
 a3a:	06 94       	lsr	r0
 a3c:	57 95       	ror	r21
 a3e:	47 95       	ror	r20
 a40:	37 95       	ror	r19
 a42:	27 95       	ror	r18
 a44:	ba 95       	dec	r27
 a46:	c9 f7       	brne	.-14     	; 0xa3a <__ultoa_invert+0xa2>
 a48:	62 0f       	add	r22, r18
 a4a:	73 1f       	adc	r23, r19
 a4c:	84 1f       	adc	r24, r20
 a4e:	95 1f       	adc	r25, r21
 a50:	a0 1d       	adc	r26, r0
 a52:	08 95       	ret

00000a54 <__prologue_saves__>:
 a54:	2f 92       	push	r2
 a56:	3f 92       	push	r3
 a58:	4f 92       	push	r4
 a5a:	5f 92       	push	r5
 a5c:	6f 92       	push	r6
 a5e:	7f 92       	push	r7
 a60:	8f 92       	push	r8
 a62:	9f 92       	push	r9
 a64:	af 92       	push	r10
 a66:	bf 92       	push	r11
 a68:	cf 92       	push	r12
 a6a:	df 92       	push	r13
 a6c:	ef 92       	push	r14
 a6e:	ff 92       	push	r15
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	cd b7       	in	r28, 0x3d	; 61
 a7a:	de b7       	in	r29, 0x3e	; 62
 a7c:	ca 1b       	sub	r28, r26
 a7e:	db 0b       	sbc	r29, r27
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	f8 94       	cli
 a84:	de bf       	out	0x3e, r29	; 62
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	cd bf       	out	0x3d, r28	; 61
 a8a:	09 94       	ijmp

00000a8c <__epilogue_restores__>:
 a8c:	2a 88       	ldd	r2, Y+18	; 0x12
 a8e:	39 88       	ldd	r3, Y+17	; 0x11
 a90:	48 88       	ldd	r4, Y+16	; 0x10
 a92:	5f 84       	ldd	r5, Y+15	; 0x0f
 a94:	6e 84       	ldd	r6, Y+14	; 0x0e
 a96:	7d 84       	ldd	r7, Y+13	; 0x0d
 a98:	8c 84       	ldd	r8, Y+12	; 0x0c
 a9a:	9b 84       	ldd	r9, Y+11	; 0x0b
 a9c:	aa 84       	ldd	r10, Y+10	; 0x0a
 a9e:	b9 84       	ldd	r11, Y+9	; 0x09
 aa0:	c8 84       	ldd	r12, Y+8	; 0x08
 aa2:	df 80       	ldd	r13, Y+7	; 0x07
 aa4:	ee 80       	ldd	r14, Y+6	; 0x06
 aa6:	fd 80       	ldd	r15, Y+5	; 0x05
 aa8:	0c 81       	ldd	r16, Y+4	; 0x04
 aaa:	1b 81       	ldd	r17, Y+3	; 0x03
 aac:	aa 81       	ldd	r26, Y+2	; 0x02
 aae:	b9 81       	ldd	r27, Y+1	; 0x01
 ab0:	ce 0f       	add	r28, r30
 ab2:	d1 1d       	adc	r29, r1
 ab4:	0f b6       	in	r0, 0x3f	; 63
 ab6:	f8 94       	cli
 ab8:	de bf       	out	0x3e, r29	; 62
 aba:	0f be       	out	0x3f, r0	; 63
 abc:	cd bf       	out	0x3d, r28	; 61
 abe:	ed 01       	movw	r28, r26
 ac0:	08 95       	ret

00000ac2 <_exit>:
 ac2:	f8 94       	cli

00000ac4 <__stop_program>:
 ac4:	ff cf       	rjmp	.-2      	; 0xac4 <__stop_program>
