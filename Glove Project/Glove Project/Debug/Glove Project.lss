
Glove Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000440  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080014c  0080014c  00000520  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000578  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ecf  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000faf  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e35  00000000  00000000  00003636  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  0000446c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bbf  00000000  00000000  000047e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000720  00000000  00000000  0000539f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005abf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_5>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e4       	ldi	r30, 0x40	; 64
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 34       	cpi	r26, 0x4C	; 76
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e4       	ldi	r26, 0x4C	; 76
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 35       	cpi	r26, 0x55	; 85
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  ea:	0c 94 1e 02 	jmp	0x43c	; 0x43c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 b4 01 	call	0x368	; 0x368 <system_init>
  f6:	08 95       	ret

000000f8 <USART0_Print>:
		return ACTIVE_REVERSE_COMMAND;
	}
	else{
		return SLOW_STOP_COMMAND;
	}
}
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	7c 01       	movw	r14, r24
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	06 c0       	rjmp	.+12     	; 0x11a <USART0_Print+0x22>
 10e:	f7 01       	movw	r30, r14
 110:	81 91       	ld	r24, Z+
 112:	7f 01       	movw	r14, r30
 114:	0e 94 11 02 	call	0x422	; 0x422 <USART_0_write>
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	f8 01       	movw	r30, r16
 11c:	01 90       	ld	r0, Z+
 11e:	00 20       	and	r0, r0
 120:	e9 f7       	brne	.-6      	; 0x11c <USART0_Print+0x24>
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	e0 1b       	sub	r30, r16
 126:	f1 0b       	sbc	r31, r17
 128:	ce 17       	cp	r28, r30
 12a:	df 07       	cpc	r29, r31
 12c:	80 f3       	brcs	.-32     	; 0x10e <USART0_Print+0x16>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <main>:
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
 13c:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	// DO NOT DELETE
	//==========================================
	int GLOVE_STATE = START;
	DDRC |= 0x01;
 140:	38 9a       	sbi	0x07, 0	; 7
	uint16_t middleFingerAvg = 100;
	uint16_t ringFingerAvg = 100;
	
	uint8_t calCountAvg = 0;
	uint8_t countAvg = 0;
	USART0_Print("Starting...");
 142:	8e e0       	ldi	r24, 0x0E	; 14
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
	PORTC |=(1<<0);
 14a:	40 9a       	sbi	0x08, 0	; 8
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
	// DO NOT DELETE
	//==========================================
	int GLOVE_STATE = START;
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0
					GLOVE_STATE = ACTIVE_MODE;
					buttonFlag = BUTTON_NOT_PRESSED;
				}
				else if(buttonFlag == BUTTON_LONG_PRESS){
					PORTC &= 0xFE;
					GLOVE_STATE = CALIBRATION;
 150:	ee 24       	eor	r14, r14
 152:	e3 94       	inc	r14
 154:	f1 2c       	mov	r15, r1
		switch (GLOVE_STATE){
			case START:
				//send command to stop motors
				if(buttonFlag == BUTTON_SHORT_PRESS){
					PORTC &= 0xFE;
					GLOVE_STATE = ACTIVE_MODE;
 156:	00 e1       	ldi	r16, 0x10	; 16
 158:	10 e0       	ldi	r17, 0x00	; 0
	PORTC |=(1<<0);
	while(1){
		//read ADC
		//ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
		//while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
		adcReadForeFinger = ADC_0_get_conversion(5);
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	0e 94 92 01 	call	0x324	; 0x324 <ADC_0_get_conversion>
		adcReadForeFinger = adcReadForeFinger >> (ADC_0_get_resolution() - 8);
 160:	0e 94 a0 01 	call	0x340	; 0x340 <ADC_0_get_resolution>
		adcReadMiddleFinger = ADC_0_get_conversion(6);
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 92 01 	call	0x324	; 0x324 <ADC_0_get_conversion>
		adcReadMiddleFinger = adcReadMiddleFinger >> (ADC_0_get_resolution() - 8);
 16a:	0e 94 a0 01 	call	0x340	; 0x340 <ADC_0_get_resolution>
		adcReadRingFinger = ADC_0_get_conversion(7);
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	0e 94 92 01 	call	0x324	; 0x324 <ADC_0_get_conversion>
		adcReadRingFinger = adcReadRingFinger >> (ADC_0_get_resolution() - 8);
 174:	0e 94 a0 01 	call	0x340	; 0x340 <ADC_0_get_resolution>
		switch (GLOVE_STATE){
 178:	c1 30       	cpi	r28, 0x01	; 1
 17a:	d1 05       	cpc	r29, r1
 17c:	f1 f0       	breq	.+60     	; 0x1ba <main+0x7e>
 17e:	c0 31       	cpi	r28, 0x10	; 16
 180:	d1 05       	cpc	r29, r1
 182:	69 f1       	breq	.+90     	; 0x1de <main+0xa2>
 184:	20 97       	sbiw	r28, 0x00	; 0
 186:	49 f7       	brne	.-46     	; 0x15a <main+0x1e>
			case START:
				//send command to stop motors
				if(buttonFlag == BUTTON_SHORT_PRESS){
 188:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 18c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	91 05       	cpc	r25, r1
 194:	41 f4       	brne	.+16     	; 0x1a6 <main+0x6a>
					PORTC &= 0xFE;
 196:	40 98       	cbi	0x08, 0	; 8
					GLOVE_STATE = ACTIVE_MODE;
					buttonFlag = BUTTON_NOT_PRESSED;
 198:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__data_end+0x1>
 19c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
		switch (GLOVE_STATE){
			case START:
				//send command to stop motors
				if(buttonFlag == BUTTON_SHORT_PRESS){
					PORTC &= 0xFE;
					GLOVE_STATE = ACTIVE_MODE;
 1a0:	c0 2f       	mov	r28, r16
 1a2:	d1 2f       	mov	r29, r17
 1a4:	da cf       	rjmp	.-76     	; 0x15a <main+0x1e>
					buttonFlag = BUTTON_NOT_PRESSED;
				}
				else if(buttonFlag == BUTTON_LONG_PRESS){
 1a6:	02 97       	sbiw	r24, 0x02	; 2
 1a8:	c1 f6       	brne	.-80     	; 0x15a <main+0x1e>
					PORTC &= 0xFE;
 1aa:	40 98       	cbi	0x08, 0	; 8
					GLOVE_STATE = CALIBRATION;
					buttonFlag = BUTTON_NOT_PRESSED;
 1ac:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__data_end+0x1>
 1b0:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
					GLOVE_STATE = ACTIVE_MODE;
					buttonFlag = BUTTON_NOT_PRESSED;
				}
				else if(buttonFlag == BUTTON_LONG_PRESS){
					PORTC &= 0xFE;
					GLOVE_STATE = CALIBRATION;
 1b4:	ce 2d       	mov	r28, r14
 1b6:	df 2d       	mov	r29, r15
 1b8:	d0 cf       	rjmp	.-96     	; 0x15a <main+0x1e>
					memcpy(command, START_COMMAND, sizeof(command));
			//		USART0_Print(command);
				}
				break;
			case CALIBRATION:
				USART0_Print("Calibration");
 1ba:	8a e1       	ldi	r24, 0x1A	; 26
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
				if(buttonFlag == BUTTON_SHORT_PRESS || buttonFlag == BUTTON_LONG_PRESS){
 1c2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 1c6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	02 97       	sbiw	r24, 0x02	; 2
 1ce:	28 f6       	brcc	.-118    	; 0x15a <main+0x1e>
					GLOVE_STATE = START;
					buttonFlag = BUTTON_NOT_PRESSED;
 1d0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__data_end+0x1>
 1d4:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
				}
				break;
			case CALIBRATION:
				USART0_Print("Calibration");
				if(buttonFlag == BUTTON_SHORT_PRESS || buttonFlag == BUTTON_LONG_PRESS){
					GLOVE_STATE = START;
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	d0 e0       	ldi	r29, 0x00	; 0
 1dc:	be cf       	rjmp	.-132    	; 0x15a <main+0x1e>
					calCountAvg = 0;
					GLOVE_STATE = START;
				}
				break;
			case ACTIVE_MODE:
				USART0_Print("Active mode");
 1de:	86 e2       	ldi	r24, 0x26	; 38
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
				if(buttonFlag == BUTTON_SHORT_PRESS || buttonFlag == BUTTON_LONG_PRESS){
 1e6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 1ea:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	02 97       	sbiw	r24, 0x02	; 2
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <main+0xba>
 1f4:	b2 cf       	rjmp	.-156    	; 0x15a <main+0x1e>
					GLOVE_STATE = START;
					buttonFlag = BUTTON_NOT_PRESSED;
 1f6:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__data_end+0x1>
 1fa:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
				}
				break;
			case ACTIVE_MODE:
				USART0_Print("Active mode");
				if(buttonFlag == BUTTON_SHORT_PRESS || buttonFlag == BUTTON_LONG_PRESS){
					GLOVE_STATE = START;
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	ab cf       	rjmp	.-170    	; 0x15a <main+0x1e>

00000204 <__vector_5>:
	return 1;
}


ISR(PCINT2_vect) // Interrupt Routine for INT0 (Pin PD2) Interrupt //PCTINT2_vect
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
		TIMSK0 |= (_BV(OCIE0A)); // Enable Timer 0 Interrupt
 214:	ee e6       	ldi	r30, 0x6E	; 110
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	80 83       	st	Z, r24
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_14>:


ISR(TIMER0_COMPA_vect) // Interrupt Routine for Timer 0 Compare Match A
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
	/* Timer 0 has a minimum frequency of (f_clock/(prescaler * (1+OCR0A)) which in this case = (8MHz/(1024*(1 + 255)) = 30.5Hz
	   this is too fast for a 'long press' of the pushbutton, so we allow the timer to interrupt 60 times (about 2 seconds) before polling the pushbutton pin to check if it is still
	   being pulled low   
	*/

	incrementer = incrementer + 1;
 250:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <incrementer>
 254:	8f 5f       	subi	r24, 0xFF	; 255
 256:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <incrementer>
	if (incrementer > 60) 
 25a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <incrementer>
 25e:	8d 33       	cpi	r24, 0x3D	; 61
 260:	28 f1       	brcs	.+74     	; 0x2ac <__vector_14+0x7e>
	{
		if(PORTD_get_pin_level(PORTD2) < 1){ // If the pin is still being pulled low by the pushbutton
 262:	4a 99       	sbic	0x09, 2	; 9
 264:	12 c0       	rjmp	.+36     	; 0x28a <__vector_14+0x5c>
			USART0_Print("Long Press\n");
 266:	82 e3       	ldi	r24, 0x32	; 50
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
			buttonFlag = BUTTON_LONG_PRESS;
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
 276:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
			TIMSK0 &= ~(_BV(OCIE0A)); // Disable Timer 0 interrupt
 27a:	ee e6       	ldi	r30, 0x6E	; 110
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
			incrementer = 0;
 284:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <incrementer>
 288:	11 c0       	rjmp	.+34     	; 0x2ac <__vector_14+0x7e>
		}
		else{
			USART0_Print("Short Press\n");
 28a:	8e e3       	ldi	r24, 0x3E	; 62
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
			buttonFlag = BUTTON_SHORT_PRESS;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
 29a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
			TIMSK0 &= ~(_BV(OCIE0A)); // Disable Timer 0 interrupt
 29e:	ee e6       	ldi	r30, 0x6E	; 110
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	8d 7f       	andi	r24, 0xFD	; 253
 2a6:	80 83       	st	Z, r24
			incrementer = 0;
 2a8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <incrementer>
		}
	}
	else{ }  // don't do anything if the incrementer hasn't reached its desired value
	
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
 2ce:	e4 e6       	ldi	r30, 0x64	; 100
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	8e 7f       	andi	r24, 0xFE	; 254
 2d6:	80 83       	st	Z, r24
 2d8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 2dc:	81 e8       	ldi	r24, 0x81	; 129
 2de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 2e2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 2e6:	80 e2       	ldi	r24, 0x20	; 32
 2e8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret

000002f0 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x0f;
 2f0:	ec e7       	ldi	r30, 0x7C	; 124
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	90 81       	ld	r25, Z
 2f6:	90 7f       	andi	r25, 0xF0	; 240
 2f8:	90 83       	st	Z, r25
	ADMUX |= channel;
 2fa:	90 81       	ld	r25, Z
 2fc:	89 2b       	or	r24, r25
 2fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 300:	ea e7       	ldi	r30, 0x7A	; 122
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	80 64       	ori	r24, 0x40	; 64
 308:	80 83       	st	Z, r24
 30a:	08 95       	ret

0000030c <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
 30c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
 310:	82 95       	swap	r24
 312:	81 70       	andi	r24, 0x01	; 1
 314:	08 95       	ret

00000316 <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
 316:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 31a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 31e:	90 e0       	ldi	r25, 0x00	; 0
}
 320:	92 2b       	or	r25, r18
 322:	08 95       	ret

00000324 <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
 324:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
 328:	0e 94 86 01 	call	0x30c	; 0x30c <ADC_0_is_conversion_done>
 32c:	88 23       	and	r24, r24
 32e:	e1 f3       	breq	.-8      	; 0x328 <ADC_0_get_conversion+0x4>
		;
	res = ADC_0_get_conversion_result();
 330:	0e 94 8b 01 	call	0x316	; 0x316 <ADC_0_get_conversion_result>
	ADCSRA |= (1 << ADIF);
 334:	ea e7       	ldi	r30, 0x7A	; 122
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	20 81       	ld	r18, Z
 33a:	20 61       	ori	r18, 0x10	; 16
 33c:	20 83       	st	Z, r18
	return res;
}
 33e:	08 95       	ret

00000340 <ADC_0_get_resolution>:
 * \return The number of bits in the ADC conversion result
 */
uint8_t ADC_0_get_resolution()
{
	return 10;
}
 340:	8a e0       	ldi	r24, 0x0A	; 10
 342:	08 95       	ret

00000344 <EXTERNAL_IRQ_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 344:	52 98       	cbi	0x0a, 2	; 10
 346:	5a 98       	cbi	0x0b, 2	; 11
 348:	0e 94 df 01 	call	0x3be	; 0x3be <EXTERNAL_IRQ_0_init>
 34c:	08 95       	ret

0000034e <ADC_0_initialization>:
 34e:	45 98       	cbi	0x08, 5	; 8
 350:	72 98       	cbi	0x0e, 2	; 14
 352:	73 98       	cbi	0x0e, 3	; 14
 354:	0e 94 67 01 	call	0x2ce	; 0x2ce <ADC_0_init>
 358:	08 95       	ret

0000035a <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 35a:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 35c:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 35e:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 360:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 362:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <USART_0_init>
 366:	08 95       	ret

00000368 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 368:	8d e3       	ldi	r24, 0x3D	; 61
 36a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 374:	94 b1       	in	r25, 0x04	; 4
 376:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 378:	95 b1       	in	r25, 0x05	; 5
 37a:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 37c:	97 b1       	in	r25, 0x07	; 7
 37e:	90 78       	andi	r25, 0x80	; 128
 380:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 382:	98 b1       	in	r25, 0x08	; 8
 384:	9f 67       	ori	r25, 0x7F	; 127
 386:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 388:	9a b1       	in	r25, 0x0a	; 10
 38a:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 38c:	9b b1       	in	r25, 0x0b	; 11
 38e:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 390:	8d b1       	in	r24, 0x0d	; 13
 392:	80 7f       	andi	r24, 0xF0	; 240
 394:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 396:	8e b1       	in	r24, 0x0e	; 14
 398:	8f 60       	ori	r24, 0x0F	; 15
 39a:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	60 e8       	ldi	r22, 0x80	; 128
 3a0:	81 e6       	ldi	r24, 0x61	; 97
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 3a8:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 3aa:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	EXTERNAL_IRQ_0_initialization();
 3ac:	0e 94 a2 01 	call	0x344	; 0x344 <EXTERNAL_IRQ_0_initialization>

	ADC_0_initialization();
 3b0:	0e 94 a7 01 	call	0x34e	; 0x34e <ADC_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 3b4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <TIMER_0_init>

	ADC_0_initialization();

	TIMER_0_initialization();

	USART_0_initialization();
 3b8:	0e 94 ad 01 	call	0x35a	; 0x35a <USART_0_initialization>
 3bc:	08 95       	ret

000003be <EXTERNAL_IRQ_0_init>:
 * \return Initialization status.
 */
int8_t EXTERNAL_IRQ_0_init()
{

	PCICR = (1 << PCIE2); // Enable pin change interrupt 2
 3be:	84 e0       	ldi	r24, 0x04	; 4
 3c0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

	PCMSK2 = (1 << PCINT18); // Pin change enable mask 18
 3c4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	
	EIMSK |= _BV(INT0);  // Enable interrupts on INT0 pin
 3c8:	e8 9a       	sbi	0x1d, 0	; 29
	EIMSK &= ~(_BV(INT1)); // Disable Interrupts on INT1 pin
 3ca:	e9 98       	cbi	0x1d, 1	; 29

	EICRA = 0x03; // The rising edge of INT0 pin generates an interrupt (press of the button, falling edge is release of the button)
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>

	sei();
 3d2:	78 94       	sei

	return 0;
}
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	08 95       	ret

000003d8 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 3d8:	2f b7       	in	r18, 0x3f	; 63
	cli
 3da:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 3dc:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 3de:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 3e0:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 3e2:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 3e4:	08 95       	ret

000003e6 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
 3e6:	e4 e6       	ldi	r30, 0x64	; 100
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	87 7f       	andi	r24, 0xF7	; 247
 3ee:	80 83       	st	Z, r24
	//		 | 0 << OCIE1A /* Output Compare A Match Interrupt Enable: disabled */
	//		 | 0 << ICIE1 /* Input Capture Interrupt Enable: disabled */
	//		 | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret

000003f4 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 3f4:	e4 e6       	ldi	r30, 0x64	; 100
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	8d 7f       	andi	r24, 0xFD	; 253
 3fc:	80 83       	st	Z, r24
 3fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 402:	83 e3       	ldi	r24, 0x33	; 51
 404:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 408:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 40c:	88 e9       	ldi	r24, 0x98	; 152
 40e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <__iob+0x3>
 41a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <__iob+0x2>
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret

00000422 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 422:	e0 ec       	ldi	r30, 0xC0	; 192
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	90 81       	ld	r25, Z
 428:	95 ff       	sbrs	r25, 5
 42a:	fd cf       	rjmp	.-6      	; 0x426 <USART_0_write+0x4>
		;
	UDR0 = data;
 42c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 430:	08 95       	ret

00000432 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 432:	0e 94 11 02 	call	0x422	; 0x422 <USART_0_write>
	return 0;
}
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	08 95       	ret

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
