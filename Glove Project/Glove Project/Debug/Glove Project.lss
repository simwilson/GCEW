
Glove Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000040a  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800136  00800136  000004d4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000528  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b7b  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e87  00000000  00000000  00002293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c9f  00000000  00000000  0000311a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a12  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a5  00000000  00000000  00004a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000050cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e0       	ldi	r30, 0x0A	; 10
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 33       	cpi	r26, 0x36	; 54
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e3       	ldi	r26, 0x36	; 54
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 33       	cpi	r26, 0x3C	; 60
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  ea:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 99 01 	call	0x332	; 0x332 <system_init>
  f6:	08 95       	ret

000000f8 <USART0_Print>:
	TCCR0A &= ~(_BV(COM0A0)); // To set normal port operation on OC0A Pin
	TCCR0A &= ~(_BV(COM0A1)); // To set normal port operation on OC0A Pin
	TCCR0A &= ~(_BV(COM0B0)); // To set normal port operation on OC0B Pin
	TCCR0A &= ~(_BV(COM0B1)); // To set normal port operation on OC0B Pin

	OCR0A = 255; // Timer 0 compare match #, choose a range between 0-255 to adjust interrupt frequency
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	7c 01       	movw	r14, r24
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	06 c0       	rjmp	.+12     	; 0x11a <USART0_Print+0x22>
 10e:	f7 01       	movw	r30, r14
 110:	81 91       	ld	r24, Z+
 112:	7f 01       	movw	r14, r30
 114:	0e 94 e7 01 	call	0x3ce	; 0x3ce <USART_0_write>
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	f8 01       	movw	r30, r16
 11c:	01 90       	ld	r0, Z+
 11e:	00 20       	and	r0, r0
 120:	e9 f7       	brne	.-6      	; 0x11c <USART0_Print+0x24>
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	e0 1b       	sub	r30, r16
 126:	f1 0b       	sbc	r31, r17
 128:	ce 17       	cp	r28, r30
 12a:	df 07       	cpc	r29, r31
 12c:	80 f3       	brcs	.-32     	; 0x10e <USART0_Print+0x16>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <adcToCommand>:
	uint16_t avgAdcValueMiddleFinger, 
	uint16_t avgAdcValueRingFinger,
	uint16_t foreFingerThreshold,
	uint16_t middleFingerThreshold,
	uint16_t ringFingerThreshold
){
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
	//convert ADC values to state command
	if(avgAdcValueForeFinger < foreFingerThreshold
 144:	82 17       	cp	r24, r18
 146:	93 07       	cpc	r25, r19
 148:	48 f4       	brcc	.+18     	; 0x15c <adcToCommand+0x20>
	&& avgAdcValueMiddleFinger < middleFingerThreshold
 14a:	60 17       	cp	r22, r16
 14c:	71 07       	cpc	r23, r17
 14e:	c0 f4       	brcc	.+48     	; 0x180 <adcToCommand+0x44>
	&& avgAdcValueRingFinger < ringFingerThreshold){
 150:	4e 15       	cp	r20, r14
 152:	5f 05       	cpc	r21, r15
 154:	c0 f0       	brcs	.+48     	; 0x186 <adcToCommand+0x4a>
		return ACTIVE_FORWARD_COMMAND;
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold
	&& avgAdcValueMiddleFinger < middleFingerThreshold){
		return ACTIVE_RIGHT_FORWARD_COMMAND;
 156:	8c e2       	ldi	r24, 0x2C	; 44
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	20 c0       	rjmp	.+64     	; 0x19c <adcToCommand+0x60>
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold
 15c:	60 17       	cp	r22, r16
 15e:	71 07       	cpc	r23, r17
 160:	30 f4       	brcc	.+12     	; 0x16e <adcToCommand+0x32>
	&& avgAdcValueRingFinger < ringFingerThreshold){
 162:	4e 15       	cp	r20, r14
 164:	5f 05       	cpc	r21, r15
 166:	90 f4       	brcc	.+36     	; 0x18c <adcToCommand+0x50>
		return ACTIVE_LEFT_FORWARD_COMMAND;
 168:	82 e2       	ldi	r24, 0x22	; 34
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	17 c0       	rjmp	.+46     	; 0x19c <adcToCommand+0x60>
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold){
		return ACTIVE_RIGHT_COMMAND;
	}
	else if(avgAdcValueRingFinger < ringFingerThreshold){
 16e:	4e 15       	cp	r20, r14
 170:	5f 05       	cpc	r21, r15
 172:	78 f0       	brcs	.+30     	; 0x192 <adcToCommand+0x56>
		return ACTIVE_LEFT_COMMAND;
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold){
 174:	60 17       	cp	r22, r16
 176:	71 07       	cpc	r23, r17
 178:	78 f0       	brcs	.+30     	; 0x198 <adcToCommand+0x5c>
		return ACTIVE_REVERSE_COMMAND;
	}
	else{
		return SLOW_STOP_COMMAND;
 17a:	83 e1       	ldi	r24, 0x13	; 19
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e c0       	rjmp	.+28     	; 0x19c <adcToCommand+0x60>
	else if(avgAdcValueMiddleFinger < middleFingerThreshold
	&& avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_LEFT_FORWARD_COMMAND;
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold){
		return ACTIVE_RIGHT_COMMAND;
 180:	81 e3       	ldi	r24, 0x31	; 49
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0b c0       	rjmp	.+22     	; 0x19c <adcToCommand+0x60>
){
	//convert ADC values to state command
	if(avgAdcValueForeFinger < foreFingerThreshold
	&& avgAdcValueMiddleFinger < middleFingerThreshold
	&& avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_FORWARD_COMMAND;
 186:	8d e1       	ldi	r24, 0x1D	; 29
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	08 c0       	rjmp	.+16     	; 0x19c <adcToCommand+0x60>
	}
	else if(avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_LEFT_COMMAND;
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold){
		return ACTIVE_REVERSE_COMMAND;
 18c:	88 e1       	ldi	r24, 0x18	; 24
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	05 c0       	rjmp	.+10     	; 0x19c <adcToCommand+0x60>
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold){
		return ACTIVE_RIGHT_COMMAND;
	}
	else if(avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_LEFT_COMMAND;
 192:	87 e2       	ldi	r24, 0x27	; 39
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	02 c0       	rjmp	.+4      	; 0x19c <adcToCommand+0x60>
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold){
		return ACTIVE_REVERSE_COMMAND;
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	91 e0       	ldi	r25, 0x01	; 1
	}
	else{
		return SLOW_STOP_COMMAND;
	}
}
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	08 95       	ret

000001a6 <main>:

int main(void)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <main+0x6>
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <main+0x8>
 1ae:	1f 92       	push	r1
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
 1b4:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	// DO NOT DELETE
	//==========================================
	DDRC |= 0x01;
 1b8:	38 9a       	sbi	0x07, 0	; 7
	
	char command[] = "s00e"; 
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	ee e0       	ldi	r30, 0x0E	; 14
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	de 01       	movw	r26, r28
 1c2:	11 96       	adiw	r26, 0x01	; 1
 1c4:	01 90       	ld	r0, Z+
 1c6:	0d 92       	st	X+, r0
 1c8:	8a 95       	dec	r24
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x1e>
	uint16_t ringFingerThreshold = 300;
	
	uint8_t countAvg = 0;
	
	//USART0_Print("Starting...");
	PORTC |=(1<<0);
 1cc:	40 9a       	sbi	0x08, 0	; 8
	
	uint16_t foreFingerThreshold = 300;
	uint16_t middleFingerThreshold = 300;
	uint16_t ringFingerThreshold = 300;
	
	uint8_t countAvg = 0;
 1ce:	f1 2c       	mov	r15, r1
	uint16_t adcReadMiddleFinger = 0;
	uint16_t adcReadRingFinger = 0;
	
	uint16_t avgAdcReadForeFinger = 0;
	uint16_t avgAdcReadMiddleFinger = 0;
	uint16_t avgAdcReadRingFinger = 0;
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t adcReadForeFinger = 0;
	uint16_t adcReadMiddleFinger = 0;
	uint16_t adcReadRingFinger = 0;
	
	uint16_t avgAdcReadForeFinger = 0;
	uint16_t avgAdcReadMiddleFinger = 0;
 1d4:	e0 e0       	ldi	r30, 0x00	; 0
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
	
	uint16_t adcReadForeFinger = 0;
	uint16_t adcReadMiddleFinger = 0;
	uint16_t adcReadRingFinger = 0;
	
	uint16_t avgAdcReadForeFinger = 0;
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	10 e0       	ldi	r17, 0x00	; 0
	//USART0_Print("Starting...");
	PORTC |=(1<<0);
	
	while(1){
		//read ADC
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 1dc:	0f 2e       	mov	r0, r31
 1de:	fc e7       	ldi	r31, 0x7C	; 124
 1e0:	8f 2e       	mov	r8, r31
 1e2:	91 2c       	mov	r9, r1
 1e4:	f0 2d       	mov	r31, r0
 1e6:	0f 2e       	mov	r0, r31
 1e8:	f2 e4       	ldi	r31, 0x42	; 66
 1ea:	7f 2e       	mov	r7, r31
 1ec:	f0 2d       	mov	r31, r0
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x02 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 1ee:	0f 2e       	mov	r0, r31
 1f0:	fa e7       	ldi	r31, 0x7A	; 122
 1f2:	cf 2e       	mov	r12, r31
 1f4:	d1 2c       	mov	r13, r1
 1f6:	f0 2d       	mov	r31, r0
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
		adcReadForeFinger = ADC;
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f8 e7       	ldi	r31, 0x78	; 120
 1fc:	af 2e       	mov	r10, r31
 1fe:	b1 2c       	mov	r11, r1
 200:	f0 2d       	mov	r31, r0
		
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 202:	0f 2e       	mov	r0, r31
 204:	f3 e4       	ldi	r31, 0x43	; 67
 206:	6f 2e       	mov	r6, r31
 208:	f0 2d       	mov	r31, r0
			| (0x03 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
		adcReadMiddleFinger = ADC;
		
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 20a:	0f 2e       	mov	r0, r31
 20c:	f4 e4       	ldi	r31, 0x44	; 68
 20e:	5f 2e       	mov	r5, r31
 210:	f0 2d       	mov	r31, r0
	//USART0_Print("Starting...");
	PORTC |=(1<<0);
	
	while(1){
		//read ADC
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 212:	d4 01       	movw	r26, r8
 214:	7c 92       	st	X, r7
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x02 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 216:	d6 01       	movw	r26, r12
 218:	8c 91       	ld	r24, X
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	8c 93       	st	X, r24
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
 21e:	d6 01       	movw	r26, r12
 220:	8c 91       	ld	r24, X
 222:	86 fd       	sbrc	r24, 6
 224:	fc cf       	rjmp	.-8      	; 0x21e <main+0x78>
		adcReadForeFinger = ADC;
 226:	d5 01       	movw	r26, r10
 228:	6d 91       	ld	r22, X+
 22a:	7c 91       	ld	r23, X
		
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 22c:	d4 01       	movw	r26, r8
 22e:	6c 92       	st	X, r6
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x03 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 230:	d6 01       	movw	r26, r12
 232:	8c 91       	ld	r24, X
 234:	80 64       	ori	r24, 0x40	; 64
 236:	8c 93       	st	X, r24
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
 238:	d6 01       	movw	r26, r12
 23a:	8c 91       	ld	r24, X
 23c:	86 fd       	sbrc	r24, 6
 23e:	fc cf       	rjmp	.-8      	; 0x238 <main+0x92>
		adcReadMiddleFinger = ADC;
 240:	d5 01       	movw	r26, r10
 242:	4d 91       	ld	r20, X+
 244:	5c 91       	ld	r21, X
		
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 246:	d4 01       	movw	r26, r8
 248:	5c 92       	st	X, r5
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x04 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 24a:	d6 01       	movw	r26, r12
 24c:	8c 91       	ld	r24, X
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	8c 93       	st	X, r24
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
 252:	d6 01       	movw	r26, r12
 254:	8c 91       	ld	r24, X
 256:	86 fd       	sbrc	r24, 6
 258:	fc cf       	rjmp	.-8      	; 0x252 <main+0xac>
		adcReadRingFinger = ADC;	
 25a:	d5 01       	movw	r26, r10
 25c:	8d 91       	ld	r24, X+
 25e:	9c 91       	ld	r25, X
		
		//calculate averages
		if(countAvg < 20){
 260:	b3 e1       	ldi	r27, 0x13	; 19
 262:	bf 15       	cp	r27, r15
 264:	40 f0       	brcs	.+16     	; 0x276 <main+0xd0>
			avgAdcReadForeFinger += adcReadForeFinger;
 266:	06 0f       	add	r16, r22
 268:	17 1f       	adc	r17, r23
			avgAdcReadMiddleFinger += adcReadMiddleFinger;
 26a:	e4 0f       	add	r30, r20
 26c:	f5 1f       	adc	r31, r21
			avgAdcReadRingFinger += adcReadRingFinger;
 26e:	28 0f       	add	r18, r24
 270:	39 1f       	adc	r19, r25
			countAvg += 1;
 272:	f3 94       	inc	r15
 274:	ce cf       	rjmp	.-100    	; 0x212 <main+0x6c>
			//USART0_Print("ADC Ring = ");
			//USART0_Println(printnum); // Call function to write string to USART0
			
			//determine command
			memcpy(command,
				adcToCommand(
 276:	ad ec       	ldi	r26, 0xCD	; 205
 278:	bc ec       	ldi	r27, 0xCC	; 204
 27a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__umulhisi3>
 27e:	ac 01       	movw	r20, r24
 280:	52 95       	swap	r21
 282:	42 95       	swap	r20
 284:	4f 70       	andi	r20, 0x0F	; 15
 286:	45 27       	eor	r20, r21
 288:	5f 70       	andi	r21, 0x0F	; 15
 28a:	45 27       	eor	r20, r21
 28c:	9f 01       	movw	r18, r30
 28e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__umulhisi3>
 292:	fc 01       	movw	r30, r24
 294:	f2 95       	swap	r31
 296:	e2 95       	swap	r30
 298:	ef 70       	andi	r30, 0x0F	; 15
 29a:	ef 27       	eor	r30, r31
 29c:	ff 70       	andi	r31, 0x0F	; 15
 29e:	ef 27       	eor	r30, r31
 2a0:	98 01       	movw	r18, r16
 2a2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__umulhisi3>
 2a6:	0f 2e       	mov	r0, r31
 2a8:	fc e2       	ldi	r31, 0x2C	; 44
 2aa:	ef 2e       	mov	r14, r31
 2ac:	ff 24       	eor	r15, r15
 2ae:	f3 94       	inc	r15
 2b0:	f0 2d       	mov	r31, r0
 2b2:	0c e2       	ldi	r16, 0x2C	; 44
 2b4:	11 e0       	ldi	r17, 0x01	; 1
 2b6:	2c e2       	ldi	r18, 0x2C	; 44
 2b8:	31 e0       	ldi	r19, 0x01	; 1
 2ba:	bf 01       	movw	r22, r30
 2bc:	92 95       	swap	r25
 2be:	82 95       	swap	r24
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	89 27       	eor	r24, r25
 2c4:	9f 70       	andi	r25, 0x0F	; 15
 2c6:	89 27       	eor	r24, r25
 2c8:	0e 94 9e 00 	call	0x13c	; 0x13c <adcToCommand>
 2cc:	fc 01       	movw	r30, r24
			//sprintf(printnum,"%u",avgAdcReadRingFinger); // Convert 10-bit ADC value (unsigned 16-bit integer) to a string
			//USART0_Print("ADC Ring = ");
			//USART0_Println(printnum); // Call function to write string to USART0
			
			//determine command
			memcpy(command,
 2ce:	95 e0       	ldi	r25, 0x05	; 5
 2d0:	de 01       	movw	r26, r28
 2d2:	11 96       	adiw	r26, 0x01	; 1
 2d4:	01 90       	ld	r0, Z+
 2d6:	0d 92       	st	X+, r0
 2d8:	9a 95       	dec	r25
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x12e>
					middleFingerThreshold,
					ringFingerThreshold),
				sizeof(command));
			//Write command to BT
		//	USART0_Println("--------------------------");
			USART0_Print(command);
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
		//	USART0_Println("--------------------------");
			//reset average calculators
			avgAdcReadForeFinger = 0;
			avgAdcReadMiddleFinger = 0;
			avgAdcReadRingFinger = 0;
			countAvg = 0;
 2e4:	f1 2c       	mov	r15, r1
			USART0_Print(command);
		//	USART0_Println("--------------------------");
			//reset average calculators
			avgAdcReadForeFinger = 0;
			avgAdcReadMiddleFinger = 0;
			avgAdcReadRingFinger = 0;
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
		//	USART0_Println("--------------------------");
			USART0_Print(command);
		//	USART0_Println("--------------------------");
			//reset average calculators
			avgAdcReadForeFinger = 0;
			avgAdcReadMiddleFinger = 0;
 2ea:	e0 e0       	ldi	r30, 0x00	; 0
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
			//Write command to BT
		//	USART0_Println("--------------------------");
			USART0_Print(command);
		//	USART0_Println("--------------------------");
			//reset average calculators
			avgAdcReadForeFinger = 0;
 2ee:	00 e0       	ldi	r16, 0x00	; 0
 2f0:	10 e0       	ldi	r17, 0x00	; 0
 2f2:	8f cf       	rjmp	.-226    	; 0x212 <main+0x6c>

000002f4 <ADC_0_init>:
 */
int8_t ADC_0_init()
{

	/* Enable clock to write ADC registers */
	PRR0 &= ~(1 << PRADC);
 2f4:	e4 e6       	ldi	r30, 0x64	; 100
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	8e 7f       	andi	r24, 0xFE	; 254
 2fc:	80 83       	st	Z, r24

	ADMUX = (0x01 << REFS0)   /* AVCC with external capacitor at AREF pin */
 2fe:	80 e4       	ldi	r24, 0x40	; 64
 300:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	        | (0 << ADLAR)    /* Left Adjust Result: disabled */
	        | (0x00 << MUX0); /* ADC Single Ended Input pin 0 */

	ADCSRA = (1 << ADEN)        /* ADC: enabled */
 304:	81 e8       	ldi	r24, 0x81	; 129
 306:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	         | (0 << ADATE)     /* Auto Trigger: disabled */
	         | (0 << ADIE)      /* ADC Interrupt: disabled */
	         | (0x01 << ADPS0); /* 2 */
	ADCSRB = (0x00 << ADTS0)    /* Free Running mode */
 30a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	         | (0 << ACME)      /* Analog Comparator Multiplexer: disabled */
	    ;

	DIDR0 = 1 << ADC2D    /* Disable digital input buffer for ADC2 */
 30e:	8c e1       	ldi	r24, 0x1C	; 28
 310:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	        | 1 << ADC3D  /* Disable digital input buffer for ADC3 */
	        | 1 << ADC4D; /* Disable digital input buffer for ADC4 */

	return 0;
}
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret

00000318 <ADC_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 318:	42 98       	cbi	0x08, 2	; 8
 31a:	43 98       	cbi	0x08, 3	; 8
 31c:	44 98       	cbi	0x08, 4	; 8
 31e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <ADC_0_init>
 322:	08 95       	ret

00000324 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 324:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 326:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 328:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 32a:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 32c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <USART_0_init>
 330:	08 95       	ret

00000332 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 332:	8d e3       	ldi	r24, 0x3D	; 61
 334:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 33e:	94 b1       	in	r25, 0x04	; 4
 340:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 342:	95 b1       	in	r25, 0x05	; 5
 344:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 346:	97 b1       	in	r25, 0x07	; 7
 348:	90 78       	andi	r25, 0x80	; 128
 34a:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 34c:	98 b1       	in	r25, 0x08	; 8
 34e:	9f 67       	ori	r25, 0x7F	; 127
 350:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 352:	9a b1       	in	r25, 0x0a	; 10
 354:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 356:	9b b1       	in	r25, 0x0b	; 11
 358:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 35a:	8d b1       	in	r24, 0x0d	; 13
 35c:	80 7f       	andi	r24, 0xF0	; 240
 35e:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 360:	8e b1       	in	r24, 0x0e	; 14
 362:	8f 60       	ori	r24, 0x0F	; 15
 364:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	60 e8       	ldi	r22, 0x80	; 128
 36a:	81 e6       	ldi	r24, 0x61	; 97
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 c2 01 	call	0x384	; 0x384 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 372:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 374:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	ADC_0_initialization();
 376:	0e 94 8c 01 	call	0x318	; 0x318 <ADC_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 37a:	0e 94 c9 01 	call	0x392	; 0x392 <TIMER_0_init>

	ADC_0_initialization();

	TIMER_0_initialization();

	USART_0_initialization();
 37e:	0e 94 92 01 	call	0x324	; 0x324 <USART_0_initialization>
 382:	08 95       	ret

00000384 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 384:	2f b7       	in	r18, 0x3f	; 63
	cli
 386:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 388:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 38a:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 38c:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 38e:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 390:	08 95       	ret

00000392 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
 392:	e4 e6       	ldi	r30, 0x64	; 100
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	87 7f       	andi	r24, 0xF7	; 247
 39a:	80 83       	st	Z, r24
	//		 | 0 << OCIE1A /* Output Compare A Match Interrupt Enable: disabled */
	//		 | 0 << ICIE1 /* Input Capture Interrupt Enable: disabled */
	//		 | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret

000003a0 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 3a0:	e4 e6       	ldi	r30, 0x64	; 100
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	8d 7f       	andi	r24, 0xFD	; 253
 3a8:	80 83       	st	Z, r24
 3aa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 3ae:	8c e0       	ldi	r24, 0x0C	; 12
 3b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 3b4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 3b8:	88 e9       	ldi	r24, 0x98	; 152
 3ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x3>
 3c6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end+0x2>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret

000003ce <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 3ce:	e0 ec       	ldi	r30, 0xC0	; 192
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	90 81       	ld	r25, Z
 3d4:	95 ff       	sbrs	r25, 5
 3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <USART_0_write+0x4>
		;
	UDR0 = data;
 3d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3dc:	08 95       	ret

000003de <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 3de:	0e 94 e7 01 	call	0x3ce	; 0x3ce <USART_0_write>
	return 0;
}
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	08 95       	ret

000003e8 <__umulhisi3>:
 3e8:	a2 9f       	mul	r26, r18
 3ea:	b0 01       	movw	r22, r0
 3ec:	b3 9f       	mul	r27, r19
 3ee:	c0 01       	movw	r24, r0
 3f0:	a3 9f       	mul	r26, r19
 3f2:	70 0d       	add	r23, r0
 3f4:	81 1d       	adc	r24, r1
 3f6:	11 24       	eor	r1, r1
 3f8:	91 1d       	adc	r25, r1
 3fa:	b2 9f       	mul	r27, r18
 3fc:	70 0d       	add	r23, r0
 3fe:	81 1d       	adc	r24, r1
 400:	11 24       	eor	r1, r1
 402:	91 1d       	adc	r25, r1
 404:	08 95       	ret

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
