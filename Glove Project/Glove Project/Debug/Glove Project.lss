
Glove Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  0000046c  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080015e  0080015e  0000055e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000005b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bf3  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e87  00000000  00000000  00002393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cb8  00000000  00000000  0000321a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2a  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a5  00000000  00000000  00004b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000051ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e6       	ldi	r30, 0x6C	; 108
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 35       	cpi	r26, 0x5E	; 94
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e5       	ldi	r26, 0x5E	; 94
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 36       	cpi	r26, 0x64	; 100
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  ea:	0c 94 34 02 	jmp	0x468	; 0x468 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 ca 01 	call	0x394	; 0x394 <system_init>
  f6:	08 95       	ret

000000f8 <USART0_Print>:
	TCCR0A &= ~(_BV(COM0A0)); // To set normal port operation on OC0A Pin
	TCCR0A &= ~(_BV(COM0A1)); // To set normal port operation on OC0A Pin
	TCCR0A &= ~(_BV(COM0B0)); // To set normal port operation on OC0B Pin
	TCCR0A &= ~(_BV(COM0B1)); // To set normal port operation on OC0B Pin

	OCR0A = 255; // Timer 0 compare match #, choose a range between 0-255 to adjust interrupt frequency
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	7c 01       	movw	r14, r24
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	06 c0       	rjmp	.+12     	; 0x11a <USART0_Print+0x22>
 10e:	f7 01       	movw	r30, r14
 110:	81 91       	ld	r24, Z+
 112:	7f 01       	movw	r14, r30
 114:	0e 94 18 02 	call	0x430	; 0x430 <USART_0_write>
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	f8 01       	movw	r30, r16
 11c:	01 90       	ld	r0, Z+
 11e:	00 20       	and	r0, r0
 120:	e9 f7       	brne	.-6      	; 0x11c <USART0_Print+0x24>
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	e0 1b       	sub	r30, r16
 126:	f1 0b       	sbc	r31, r17
 128:	ce 17       	cp	r28, r30
 12a:	df 07       	cpc	r29, r31
 12c:	80 f3       	brcs	.-32     	; 0x10e <USART0_Print+0x16>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <USART0_Println>:
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	8c 01       	movw	r16, r24
 14a:	7c 01       	movw	r14, r24
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0
 150:	06 c0       	rjmp	.+12     	; 0x15e <USART0_Println+0x22>
 152:	f7 01       	movw	r30, r14
 154:	81 91       	ld	r24, Z+
 156:	7f 01       	movw	r14, r30
 158:	0e 94 18 02 	call	0x430	; 0x430 <USART_0_write>
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	f8 01       	movw	r30, r16
 160:	01 90       	ld	r0, Z+
 162:	00 20       	and	r0, r0
 164:	e9 f7       	brne	.-6      	; 0x160 <USART0_Println+0x24>
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	e0 1b       	sub	r30, r16
 16a:	f1 0b       	sbc	r31, r17
 16c:	ce 17       	cp	r28, r30
 16e:	df 07       	cpc	r29, r31
 170:	80 f3       	brcs	.-32     	; 0x152 <USART0_Println+0x16>
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	0e 94 18 02 	call	0x430	; 0x430 <USART_0_write>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	08 95       	ret

00000186 <adcToCommand>:
	uint16_t avgAdcValueMiddleFinger, 
	uint16_t avgAdcValueRingFinger,
	uint16_t foreFingerThreshold,
	uint16_t middleFingerThreshold,
	uint16_t ringFingerThreshold
){
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
	//convert ADC values to state command
	if(avgAdcValueForeFinger < foreFingerThreshold
 18e:	82 17       	cp	r24, r18
 190:	93 07       	cpc	r25, r19
 192:	48 f4       	brcc	.+18     	; 0x1a6 <adcToCommand+0x20>
	&& avgAdcValueMiddleFinger < middleFingerThreshold
 194:	60 17       	cp	r22, r16
 196:	71 07       	cpc	r23, r17
 198:	c0 f4       	brcc	.+48     	; 0x1ca <adcToCommand+0x44>
	&& avgAdcValueRingFinger < ringFingerThreshold){
 19a:	4e 15       	cp	r20, r14
 19c:	5f 05       	cpc	r21, r15
 19e:	c0 f0       	brcs	.+48     	; 0x1d0 <adcToCommand+0x4a>
		return ACTIVE_FORWARD_COMMAND;
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold
	&& avgAdcValueMiddleFinger < middleFingerThreshold){
		return ACTIVE_RIGHT_FORWARD_COMMAND;
 1a0:	83 e5       	ldi	r24, 0x53	; 83
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	20 c0       	rjmp	.+64     	; 0x1e6 <adcToCommand+0x60>
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold
 1a6:	60 17       	cp	r22, r16
 1a8:	71 07       	cpc	r23, r17
 1aa:	30 f4       	brcc	.+12     	; 0x1b8 <adcToCommand+0x32>
	&& avgAdcValueRingFinger < ringFingerThreshold){
 1ac:	4e 15       	cp	r20, r14
 1ae:	5f 05       	cpc	r21, r15
 1b0:	90 f4       	brcc	.+36     	; 0x1d6 <adcToCommand+0x50>
		return ACTIVE_LEFT_FORWARD_COMMAND;
 1b2:	89 e4       	ldi	r24, 0x49	; 73
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	17 c0       	rjmp	.+46     	; 0x1e6 <adcToCommand+0x60>
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold){
		return ACTIVE_RIGHT_COMMAND;
	}
	else if(avgAdcValueRingFinger < ringFingerThreshold){
 1b8:	4e 15       	cp	r20, r14
 1ba:	5f 05       	cpc	r21, r15
 1bc:	78 f0       	brcs	.+30     	; 0x1dc <adcToCommand+0x56>
		return ACTIVE_LEFT_COMMAND;
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold){
 1be:	60 17       	cp	r22, r16
 1c0:	71 07       	cpc	r23, r17
 1c2:	78 f0       	brcs	.+30     	; 0x1e2 <adcToCommand+0x5c>
		return ACTIVE_REVERSE_COMMAND;
	}
	else{
		return SLOW_STOP_COMMAND;
 1c4:	8a e3       	ldi	r24, 0x3A	; 58
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e c0       	rjmp	.+28     	; 0x1e6 <adcToCommand+0x60>
	else if(avgAdcValueMiddleFinger < middleFingerThreshold
	&& avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_LEFT_FORWARD_COMMAND;
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold){
		return ACTIVE_RIGHT_COMMAND;
 1ca:	88 e5       	ldi	r24, 0x58	; 88
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <adcToCommand+0x60>
){
	//convert ADC values to state command
	if(avgAdcValueForeFinger < foreFingerThreshold
	&& avgAdcValueMiddleFinger < middleFingerThreshold
	&& avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_FORWARD_COMMAND;
 1d0:	84 e4       	ldi	r24, 0x44	; 68
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <adcToCommand+0x60>
	}
	else if(avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_LEFT_COMMAND;
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold){
		return ACTIVE_REVERSE_COMMAND;
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <adcToCommand+0x60>
	}
	else if(avgAdcValueForeFinger < foreFingerThreshold){
		return ACTIVE_RIGHT_COMMAND;
	}
	else if(avgAdcValueRingFinger < ringFingerThreshold){
		return ACTIVE_LEFT_COMMAND;
 1dc:	8e e4       	ldi	r24, 0x4E	; 78
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <adcToCommand+0x60>
	}
	else if(avgAdcValueMiddleFinger < middleFingerThreshold){
		return ACTIVE_REVERSE_COMMAND;
 1e2:	8f e3       	ldi	r24, 0x3F	; 63
 1e4:	91 e0       	ldi	r25, 0x01	; 1
	}
	else{
		return SLOW_STOP_COMMAND;
	}
}
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <main>:

int main(void)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <main+0x6>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <main+0x8>
 1f8:	1f 92       	push	r1
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
 1fe:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	// DO NOT DELETE
	//==========================================
	DDRC |= 0x01;
 202:	38 9a       	sbi	0x07, 0	; 7
	
	char command[] = "s00e"; 
 204:	85 e0       	ldi	r24, 0x05	; 5
 206:	e5 e3       	ldi	r30, 0x35	; 53
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	de 01       	movw	r26, r28
 20c:	11 96       	adiw	r26, 0x01	; 1
 20e:	01 90       	ld	r0, Z+
 210:	0d 92       	st	X+, r0
 212:	8a 95       	dec	r24
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x1e>
	uint16_t middleFingerThreshold = 300;
	uint16_t ringFingerThreshold = 300;
	
	uint8_t countAvg = 0;
	
	USART0_Print("Starting...");
 216:	8e e0       	ldi	r24, 0x0E	; 14
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
	PORTC |=(1<<0);
 21e:	40 9a       	sbi	0x08, 0	; 8
	
	uint16_t foreFingerThreshold = 300;
	uint16_t middleFingerThreshold = 300;
	uint16_t ringFingerThreshold = 300;
	
	uint8_t countAvg = 0;
 220:	f1 2c       	mov	r15, r1
	uint16_t adcReadMiddleFinger = 0;
	uint16_t adcReadRingFinger = 0;
	
	uint16_t avgAdcReadForeFinger = 0;
	uint16_t avgAdcReadMiddleFinger = 0;
	uint16_t avgAdcReadRingFinger = 0;
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t adcReadForeFinger = 0;
	uint16_t adcReadMiddleFinger = 0;
	uint16_t adcReadRingFinger = 0;
	
	uint16_t avgAdcReadForeFinger = 0;
	uint16_t avgAdcReadMiddleFinger = 0;
 226:	e0 e0       	ldi	r30, 0x00	; 0
 228:	f0 e0       	ldi	r31, 0x00	; 0
	
	uint16_t adcReadForeFinger = 0;
	uint16_t adcReadMiddleFinger = 0;
	uint16_t adcReadRingFinger = 0;
	
	uint16_t avgAdcReadForeFinger = 0;
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	10 e0       	ldi	r17, 0x00	; 0
	USART0_Print("Starting...");
	PORTC |=(1<<0);
	
	while(1){
		//read ADC
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 22e:	0f 2e       	mov	r0, r31
 230:	fc e7       	ldi	r31, 0x7C	; 124
 232:	8f 2e       	mov	r8, r31
 234:	91 2c       	mov	r9, r1
 236:	f0 2d       	mov	r31, r0
 238:	0f 2e       	mov	r0, r31
 23a:	f6 e4       	ldi	r31, 0x46	; 70
 23c:	7f 2e       	mov	r7, r31
 23e:	f0 2d       	mov	r31, r0
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x06 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 240:	0f 2e       	mov	r0, r31
 242:	fa e7       	ldi	r31, 0x7A	; 122
 244:	cf 2e       	mov	r12, r31
 246:	d1 2c       	mov	r13, r1
 248:	f0 2d       	mov	r31, r0
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
		adcReadForeFinger = ADC;
 24a:	0f 2e       	mov	r0, r31
 24c:	f8 e7       	ldi	r31, 0x78	; 120
 24e:	af 2e       	mov	r10, r31
 250:	b1 2c       	mov	r11, r1
 252:	f0 2d       	mov	r31, r0
		
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 254:	0f 2e       	mov	r0, r31
 256:	f7 e4       	ldi	r31, 0x47	; 71
 258:	6f 2e       	mov	r6, r31
 25a:	f0 2d       	mov	r31, r0
			| (0x07 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
		adcReadMiddleFinger = ADC;
		
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 25c:	0f 2e       	mov	r0, r31
 25e:	f5 e4       	ldi	r31, 0x45	; 69
 260:	5f 2e       	mov	r5, r31
 262:	f0 2d       	mov	r31, r0
	USART0_Print("Starting...");
	PORTC |=(1<<0);
	
	while(1){
		//read ADC
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 264:	d4 01       	movw	r26, r8
 266:	7c 92       	st	X, r7
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x06 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 268:	d6 01       	movw	r26, r12
 26a:	8c 91       	ld	r24, X
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	8c 93       	st	X, r24
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
 270:	d6 01       	movw	r26, r12
 272:	8c 91       	ld	r24, X
 274:	86 fd       	sbrc	r24, 6
 276:	fc cf       	rjmp	.-8      	; 0x270 <main+0x80>
		adcReadForeFinger = ADC;
 278:	d5 01       	movw	r26, r10
 27a:	6d 91       	ld	r22, X+
 27c:	7c 91       	ld	r23, X
		
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 27e:	d4 01       	movw	r26, r8
 280:	6c 92       	st	X, r6
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x07 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 282:	d6 01       	movw	r26, r12
 284:	8c 91       	ld	r24, X
 286:	80 64       	ori	r24, 0x40	; 64
 288:	8c 93       	st	X, r24
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
 28a:	d6 01       	movw	r26, r12
 28c:	8c 91       	ld	r24, X
 28e:	86 fd       	sbrc	r24, 6
 290:	fc cf       	rjmp	.-8      	; 0x28a <main+0x9a>
		adcReadMiddleFinger = ADC;
 292:	d5 01       	movw	r26, r10
 294:	4d 91       	ld	r20, X+
 296:	5c 91       	ld	r21, X
		
		ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 298:	d4 01       	movw	r26, r8
 29a:	5c 92       	st	X, r5
			| (0 << ADLAR)    /* Left Adjust Result: disabled */
			| (0x05 << MUX0); /* ADC Single Ended Input pin 0 */
		ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
 29c:	d6 01       	movw	r26, r12
 29e:	8c 91       	ld	r24, X
 2a0:	80 64       	ori	r24, 0x40	; 64
 2a2:	8c 93       	st	X, r24
		while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
 2a4:	d6 01       	movw	r26, r12
 2a6:	8c 91       	ld	r24, X
 2a8:	86 fd       	sbrc	r24, 6
 2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <main+0xb4>
		adcReadRingFinger = ADC;	
 2ac:	d5 01       	movw	r26, r10
 2ae:	8d 91       	ld	r24, X+
 2b0:	9c 91       	ld	r25, X
		
		//calculate averages
		if(countAvg < 20){
 2b2:	b3 e1       	ldi	r27, 0x13	; 19
 2b4:	bf 15       	cp	r27, r15
 2b6:	40 f0       	brcs	.+16     	; 0x2c8 <main+0xd8>
			avgAdcReadForeFinger += adcReadForeFinger;
 2b8:	06 0f       	add	r16, r22
 2ba:	17 1f       	adc	r17, r23
			avgAdcReadMiddleFinger += adcReadMiddleFinger;
 2bc:	e4 0f       	add	r30, r20
 2be:	f5 1f       	adc	r31, r21
			avgAdcReadRingFinger += adcReadRingFinger;
 2c0:	28 0f       	add	r18, r24
 2c2:	39 1f       	adc	r19, r25
			countAvg += 1;
 2c4:	f3 94       	inc	r15
 2c6:	ce cf       	rjmp	.-100    	; 0x264 <main+0x74>
			//USART0_Print("ADC Ring = ");
			//USART0_Println(printnum); // Call function to write string to USART0
			
			//determine command
			memcpy(command,
				adcToCommand(
 2c8:	ad ec       	ldi	r26, 0xCD	; 205
 2ca:	bc ec       	ldi	r27, 0xCC	; 204
 2cc:	0e 94 25 02 	call	0x44a	; 0x44a <__umulhisi3>
 2d0:	ac 01       	movw	r20, r24
 2d2:	52 95       	swap	r21
 2d4:	42 95       	swap	r20
 2d6:	4f 70       	andi	r20, 0x0F	; 15
 2d8:	45 27       	eor	r20, r21
 2da:	5f 70       	andi	r21, 0x0F	; 15
 2dc:	45 27       	eor	r20, r21
 2de:	9f 01       	movw	r18, r30
 2e0:	0e 94 25 02 	call	0x44a	; 0x44a <__umulhisi3>
 2e4:	fc 01       	movw	r30, r24
 2e6:	f2 95       	swap	r31
 2e8:	e2 95       	swap	r30
 2ea:	ef 70       	andi	r30, 0x0F	; 15
 2ec:	ef 27       	eor	r30, r31
 2ee:	ff 70       	andi	r31, 0x0F	; 15
 2f0:	ef 27       	eor	r30, r31
 2f2:	98 01       	movw	r18, r16
 2f4:	0e 94 25 02 	call	0x44a	; 0x44a <__umulhisi3>
 2f8:	0f 2e       	mov	r0, r31
 2fa:	fc e2       	ldi	r31, 0x2C	; 44
 2fc:	ef 2e       	mov	r14, r31
 2fe:	ff 24       	eor	r15, r15
 300:	f3 94       	inc	r15
 302:	f0 2d       	mov	r31, r0
 304:	0c e2       	ldi	r16, 0x2C	; 44
 306:	11 e0       	ldi	r17, 0x01	; 1
 308:	2c e2       	ldi	r18, 0x2C	; 44
 30a:	31 e0       	ldi	r19, 0x01	; 1
 30c:	bf 01       	movw	r22, r30
 30e:	92 95       	swap	r25
 310:	82 95       	swap	r24
 312:	8f 70       	andi	r24, 0x0F	; 15
 314:	89 27       	eor	r24, r25
 316:	9f 70       	andi	r25, 0x0F	; 15
 318:	89 27       	eor	r24, r25
 31a:	0e 94 c3 00 	call	0x186	; 0x186 <adcToCommand>
 31e:	fc 01       	movw	r30, r24
			//sprintf(printnum,"%u",avgAdcReadRingFinger); // Convert 10-bit ADC value (unsigned 16-bit integer) to a string
			//USART0_Print("ADC Ring = ");
			//USART0_Println(printnum); // Call function to write string to USART0
			
			//determine command
			memcpy(command,
 320:	95 e0       	ldi	r25, 0x05	; 5
 322:	de 01       	movw	r26, r28
 324:	11 96       	adiw	r26, 0x01	; 1
 326:	01 90       	ld	r0, Z+
 328:	0d 92       	st	X+, r0
 32a:	9a 95       	dec	r25
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x136>
					foreFingerThreshold,
					middleFingerThreshold,
					ringFingerThreshold),
				sizeof(command));
			//Write command to BT
			USART0_Println("--------------------------");
 32e:	8a e1       	ldi	r24, 0x1A	; 26
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 9e 00 	call	0x13c	; 0x13c <USART0_Println>
			USART0_Print(command);
 336:	ce 01       	movw	r24, r28
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART0_Print>
			USART0_Println("--------------------------");
 33e:	8a e1       	ldi	r24, 0x1A	; 26
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 9e 00 	call	0x13c	; 0x13c <USART0_Println>
			//reset average calculators
			avgAdcReadForeFinger = 0;
			avgAdcReadMiddleFinger = 0;
			avgAdcReadRingFinger = 0;
			countAvg = 0;
 346:	f1 2c       	mov	r15, r1
			USART0_Print(command);
			USART0_Println("--------------------------");
			//reset average calculators
			avgAdcReadForeFinger = 0;
			avgAdcReadMiddleFinger = 0;
			avgAdcReadRingFinger = 0;
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
			USART0_Println("--------------------------");
			USART0_Print(command);
			USART0_Println("--------------------------");
			//reset average calculators
			avgAdcReadForeFinger = 0;
			avgAdcReadMiddleFinger = 0;
 34c:	e0 e0       	ldi	r30, 0x00	; 0
 34e:	f0 e0       	ldi	r31, 0x00	; 0
			//Write command to BT
			USART0_Println("--------------------------");
			USART0_Print(command);
			USART0_Println("--------------------------");
			//reset average calculators
			avgAdcReadForeFinger = 0;
 350:	00 e0       	ldi	r16, 0x00	; 0
 352:	10 e0       	ldi	r17, 0x00	; 0
 354:	87 cf       	rjmp	.-242    	; 0x264 <main+0x74>

00000356 <ADC_0_init>:
 */
int8_t ADC_0_init()
{

	/* Enable clock to write ADC registers */
	PRR0 &= ~(1 << PRADC);
 356:	e4 e6       	ldi	r30, 0x64	; 100
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	8e 7f       	andi	r24, 0xFE	; 254
 35e:	80 83       	st	Z, r24

	ADMUX = (0x01 << REFS0)   /* AREF, Internal Vref turned off */
 360:	86 e4       	ldi	r24, 0x46	; 70
 362:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	        | (0 << ADLAR)    /* Left Adjust Result: disabled */
	        | (0x06 << MUX0); /* ADC Single Ended Input pin 0 */

	ADCSRA = (1 << ADEN)        /* ADC: enabled */
 366:	81 e8       	ldi	r24, 0x81	; 129
 368:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	         | (0 << ADATE)     /* Auto Trigger: disabled */
	         | (0 << ADIE)      /* ADC Interrupt: disabled */
	         | (0x01 << ADPS0); /* 2 */
	ADCSRB = (0x00 << ADTS0)    /* Free Running mode */
 36c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	         | (0 << ACME)      /* Analog Comparator Multiplexer: disabled */
	    ;

	DIDR0 = 1 << ADC5D; /* Disable digital input buffer for ADC5 */
 370:	80 e2       	ldi	r24, 0x20	; 32
 372:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	return 0;
}
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret

0000037a <ADC_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 37a:	45 98       	cbi	0x08, 5	; 8
 37c:	72 98       	cbi	0x0e, 2	; 14
 37e:	73 98       	cbi	0x0e, 3	; 14
 380:	0e 94 ab 01 	call	0x356	; 0x356 <ADC_0_init>
 384:	08 95       	ret

00000386 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 386:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 388:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 38a:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 38c:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 38e:	0e 94 01 02 	call	0x402	; 0x402 <USART_0_init>
 392:	08 95       	ret

00000394 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 394:	8d e3       	ldi	r24, 0x3D	; 61
 396:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 3a0:	94 b1       	in	r25, 0x04	; 4
 3a2:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 3a4:	95 b1       	in	r25, 0x05	; 5
 3a6:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 3a8:	97 b1       	in	r25, 0x07	; 7
 3aa:	90 78       	andi	r25, 0x80	; 128
 3ac:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 3ae:	98 b1       	in	r25, 0x08	; 8
 3b0:	9f 67       	ori	r25, 0x7F	; 127
 3b2:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 3b4:	9a b1       	in	r25, 0x0a	; 10
 3b6:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 3b8:	9b b1       	in	r25, 0x0b	; 11
 3ba:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 3bc:	8d b1       	in	r24, 0x0d	; 13
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 3c2:	8e b1       	in	r24, 0x0e	; 14
 3c4:	8f 60       	ori	r24, 0x0F	; 15
 3c6:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	60 e8       	ldi	r22, 0x80	; 128
 3cc:	81 e6       	ldi	r24, 0x61	; 97
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 3d4:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 3d6:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	ADC_0_initialization();
 3d8:	0e 94 bd 01 	call	0x37a	; 0x37a <ADC_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 3dc:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <TIMER_0_init>

	ADC_0_initialization();

	TIMER_0_initialization();

	USART_0_initialization();
 3e0:	0e 94 c3 01 	call	0x386	; 0x386 <USART_0_initialization>
 3e4:	08 95       	ret

000003e6 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 3e6:	2f b7       	in	r18, 0x3f	; 63
	cli
 3e8:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 3ea:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 3ec:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 3ee:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 3f0:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 3f2:	08 95       	ret

000003f4 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
 3f4:	e4 e6       	ldi	r30, 0x64	; 100
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	87 7f       	andi	r24, 0xF7	; 247
 3fc:	80 83       	st	Z, r24
	//		 | 0 << OCIE1A /* Output Compare A Match Interrupt Enable: disabled */
	//		 | 0 << ICIE1 /* Input Capture Interrupt Enable: disabled */
	//		 | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	08 95       	ret

00000402 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 402:	e4 e6       	ldi	r30, 0x64	; 100
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	8d 7f       	andi	r24, 0xFD	; 253
 40a:	80 83       	st	Z, r24
 40c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 410:	83 e3       	ldi	r24, 0x33	; 51
 412:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 416:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 41a:	88 e9       	ldi	r24, 0x98	; 152
 41c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x3>
 428:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end+0x2>
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret

00000430 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 430:	e0 ec       	ldi	r30, 0xC0	; 192
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	90 81       	ld	r25, Z
 436:	95 ff       	sbrs	r25, 5
 438:	fd cf       	rjmp	.-6      	; 0x434 <USART_0_write+0x4>
		;
	UDR0 = data;
 43a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 43e:	08 95       	ret

00000440 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 440:	0e 94 18 02 	call	0x430	; 0x430 <USART_0_write>
	return 0;
}
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	08 95       	ret

0000044a <__umulhisi3>:
 44a:	a2 9f       	mul	r26, r18
 44c:	b0 01       	movw	r22, r0
 44e:	b3 9f       	mul	r27, r19
 450:	c0 01       	movw	r24, r0
 452:	a3 9f       	mul	r26, r19
 454:	70 0d       	add	r23, r0
 456:	81 1d       	adc	r24, r1
 458:	11 24       	eor	r1, r1
 45a:	91 1d       	adc	r25, r1
 45c:	b2 9f       	mul	r27, r18
 45e:	70 0d       	add	r23, r0
 460:	81 1d       	adc	r24, r1
 462:	11 24       	eor	r1, r1
 464:	91 1d       	adc	r25, r1
 466:	08 95       	ret

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
