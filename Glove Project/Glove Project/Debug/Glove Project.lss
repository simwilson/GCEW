
Glove Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000004d8  0000056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080013c  0080013c  000005a8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000600  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f21  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100a  00000000  00000000  00002781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e50  00000000  00000000  0000378b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  000045dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb3  00000000  00000000  00004990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bb  00000000  00000000  00005543  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005bfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_5>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ed       	ldi	r30, 0xD8	; 216
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 33       	cpi	r26, 0x3C	; 60
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e3       	ldi	r26, 0x3C	; 60
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 34       	cpi	r26, 0x47	; 71
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  ea:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <system_init>
  f6:	08 95       	ret

000000f8 <__vector_3>:

#include <driver_init.h>
#include <compiler.h>

ISR(PCINT0_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1

	/* Insert your pin change 0 interrupt handling code here */
}
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <USART0_Print>:
		return ACTIVE_REVERSE;
	}
	else{
		return SLOW_STOP;
	}
}
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	8c 01       	movw	r16, r24
 11a:	7c 01       	movw	r14, r24
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	06 c0       	rjmp	.+12     	; 0x12e <USART0_Print+0x22>
 122:	f7 01       	movw	r30, r14
 124:	81 91       	ld	r24, Z+
 126:	7f 01       	movw	r14, r30
 128:	0e 94 2d 02 	call	0x45a	; 0x45a <USART_0_write>
 12c:	21 96       	adiw	r28, 0x01	; 1
 12e:	f8 01       	movw	r30, r16
 130:	01 90       	ld	r0, Z+
 132:	00 20       	and	r0, r0
 134:	e9 f7       	brne	.-6      	; 0x130 <USART0_Print+0x24>
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	e0 1b       	sub	r30, r16
 13a:	f1 0b       	sbc	r31, r17
 13c:	ce 17       	cp	r28, r30
 13e:	df 07       	cpc	r29, r31
 140:	80 f3       	brcs	.-32     	; 0x122 <USART0_Print+0x16>
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	08 95       	ret

00000150 <main>:

int main(void)
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <main+0x6>
 156:	00 d0       	rcall	.+0      	; 0x158 <main+0x8>
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
 15e:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	// DO NOT DELETE
	//==========================================
	
	char command[] = "s00e"; 
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	ea e1       	ldi	r30, 0x1A	; 26
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	de 01       	movw	r26, r28
 16a:	11 96       	adiw	r26, 0x01	; 1
 16c:	01 90       	ld	r0, Z+
 16e:	0d 92       	st	X+, r0
 170:	8a 95       	dec	r24
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x1c>
	uint16_t middleFingerAvg = 100;
	uint16_t ringFingerAvg = 100;
	
	uint8_t calCountAvg = 0;
	uint8_t countAvg = 0;
	USART0_Print("Starting...");
 174:	8e e0       	ldi	r24, 0x0E	; 14
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 86 00 	call	0x10c	; 0x10c <USART0_Print>
				if(buttonFlag == BUTTON_SHORT_PRESS){
					GLOVE_STATE = ACTIVE_MODE;
					buttonFlag = BUTTON_NOT_PRESSED;
				}
				else if(buttonFlag == BUTTON_LONG_PRESS){
					GLOVE_STATE = CALIBRATION;
 17c:	01 e0       	ldi	r16, 0x01	; 1
 17e:	10 e0       	ldi	r17, 0x00	; 0
		adcReadRingFinger = adcReadRingFinger >> (ADC_0_get_resolution() - 8);
		switch (GLOVE_STATE){
			case START:
				//send command to stop motors
				if(buttonFlag == BUTTON_SHORT_PRESS){
					GLOVE_STATE = ACTIVE_MODE;
 180:	68 94       	set
 182:	ee 24       	eor	r14, r14
 184:	e4 f8       	bld	r14, 4
 186:	f1 2c       	mov	r15, r1
		//ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
		//while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
		//adcReadForeFinger=ADC;
		//adcReadMiddleFinger=ADC;
		//adcReadRingFinger=ADC;
		adcReadForeFinger = ADC_0_get_conversion(5);
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	0e 94 b5 01 	call	0x36a	; 0x36a <ADC_0_get_conversion>
		adcReadForeFinger = adcReadForeFinger >> (ADC_0_get_resolution() - 8);
 18e:	0e 94 c3 01 	call	0x386	; 0x386 <ADC_0_get_resolution>
		adcReadMiddleFinger = ADC_0_get_conversion(6);
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	0e 94 b5 01 	call	0x36a	; 0x36a <ADC_0_get_conversion>
		adcReadMiddleFinger = adcReadMiddleFinger >> (ADC_0_get_resolution() - 8);
 198:	0e 94 c3 01 	call	0x386	; 0x386 <ADC_0_get_resolution>
		adcReadRingFinger = ADC_0_get_conversion(7);
 19c:	87 e0       	ldi	r24, 0x07	; 7
 19e:	0e 94 b5 01 	call	0x36a	; 0x36a <ADC_0_get_conversion>
		adcReadRingFinger = adcReadRingFinger >> (ADC_0_get_resolution() - 8);
 1a2:	0e 94 c3 01 	call	0x386	; 0x386 <ADC_0_get_resolution>
		switch (GLOVE_STATE){
 1a6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <GLOVE_STATE>
 1aa:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <GLOVE_STATE+0x1>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	91 05       	cpc	r25, r1
 1b2:	79 f1       	breq	.+94     	; 0x212 <main+0xc2>
 1b4:	80 31       	cpi	r24, 0x10	; 16
 1b6:	91 05       	cpc	r25, r1
 1b8:	09 f4       	brne	.+2      	; 0x1bc <main+0x6c>
 1ba:	41 c0       	rjmp	.+130    	; 0x23e <main+0xee>
 1bc:	89 2b       	or	r24, r25
 1be:	21 f7       	brne	.-56     	; 0x188 <main+0x38>
			case START:
				//send command to stop motors
				if(buttonFlag == BUTTON_SHORT_PRESS){
 1c0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 1c4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	91 05       	cpc	r25, r1
 1cc:	49 f4       	brne	.+18     	; 0x1e0 <main+0x90>
					GLOVE_STATE = ACTIVE_MODE;
 1ce:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <GLOVE_STATE+0x1>
 1d2:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <GLOVE_STATE>
					buttonFlag = BUTTON_NOT_PRESSED;
 1d6:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 1da:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
 1de:	d4 cf       	rjmp	.-88     	; 0x188 <main+0x38>
				}
				else if(buttonFlag == BUTTON_LONG_PRESS){
 1e0:	02 97       	sbiw	r24, 0x02	; 2
 1e2:	49 f4       	brne	.+18     	; 0x1f6 <main+0xa6>
					GLOVE_STATE = CALIBRATION;
 1e4:	10 93 3f 01 	sts	0x013F, r17	; 0x80013f <GLOVE_STATE+0x1>
 1e8:	00 93 3e 01 	sts	0x013E, r16	; 0x80013e <GLOVE_STATE>
					buttonFlag = BUTTON_NOT_PRESSED;
 1ec:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 1f0:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
 1f4:	c9 cf       	rjmp	.-110    	; 0x188 <main+0x38>
				}
				else{
					//send START mode command
					memcpy(command, START_COMMAND, sizeof(command));
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	ea e1       	ldi	r30, 0x1A	; 26
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	de 01       	movw	r26, r28
 1fe:	11 96       	adiw	r26, 0x01	; 1
 200:	01 90       	ld	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	8a 95       	dec	r24
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0xb0>
					USART0_Print(command);
 208:	ce 01       	movw	r24, r28
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	0e 94 86 00 	call	0x10c	; 0x10c <USART0_Print>
 210:	bb cf       	rjmp	.-138    	; 0x188 <main+0x38>
				}
				break;
			case CALIBRATION:
				if(buttonFlag == BUTTON_SHORT_PRESS || BUTTON_LONG_PRESS){
					GLOVE_STATE = START;
 212:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <GLOVE_STATE+0x1>
 216:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <GLOVE_STATE>
					buttonFlag = BUTTON_NOT_PRESSED;
 21a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 21e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
					calCountAvg = 0;
				}
				//send command to stop motors
				memcpy(command, SLOW_STOP, sizeof(command));
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	ef e1       	ldi	r30, 0x1F	; 31
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	de 01       	movw	r26, r28
 22a:	11 96       	adiw	r26, 0x01	; 1
 22c:	01 90       	ld	r0, Z+
 22e:	0d 92       	st	X+, r0
 230:	8a 95       	dec	r24
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0xdc>
				USART0_Print(command);
 234:	ce 01       	movw	r24, r28
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	0e 94 86 00 	call	0x10c	; 0x10c <USART0_Print>
 23c:	a5 cf       	rjmp	.-182    	; 0x188 <main+0x38>
					GLOVE_STATE = START;
				}
				break;
			case ACTIVE_MODE:
				if(buttonFlag == BUTTON_SHORT_PRESS || BUTTON_LONG_PRESS){
					GLOVE_STATE = START;
 23e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <GLOVE_STATE+0x1>
 242:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <GLOVE_STATE>
					buttonFlag = BUTTON_NOT_PRESSED;
 246:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 24a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
						avgAdcReadMiddleFinger = 0;
						avgAdcReadRingFinger = 0;
						countAvg = 0;
					}	
				}
				break;
 24e:	9c cf       	rjmp	.-200    	; 0x188 <main+0x38>

00000250 <__vector_5>:
	return 1;
}


ISR(PCINT2_vect) // Interrupt Routine for INT0 ( Pin PD2) Interrupt
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	8f 93       	push	r24
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
		TIMSK0 |= (_BV(OCIE0A)); // Enable Timer 0 Interrupt
 260:	ee e6       	ldi	r30, 0x6E	; 110
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
}
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	8f 91       	pop	r24
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_14>:


ISR(TIMER0_COMPA_vect) // Interrupt Routine for Timer 0 Compare Match A
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	/* Timer 0 has a minimum frequency of (f_clock/(prescaler * (1+OCR0A)) which in this case = (8MHz/(1024*(1 + 255)) = 30.5Hz
	   this is too fast for a 'long press' of the pushbutton, so we allow the timer to interrupt 60 times (about 2 seconds) before polling the pushbutton pin to check if it is still
	   being pulled low   
	*/

	incrementer = incrementer + 1;
 29c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <incrementer>
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <incrementer>
	if (incrementer > 60) 
 2a6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <incrementer>
 2aa:	8d 33       	cpi	r24, 0x3D	; 61
 2ac:	28 f1       	brcs	.+74     	; 0x2f8 <__vector_14+0x7e>
	{
		if(PORTD_get_pin_level(PORTD2) < 1){ // If the pin is still being pulled low by the pushbutton
 2ae:	4a 99       	sbic	0x09, 2	; 9
 2b0:	12 c0       	rjmp	.+36     	; 0x2d6 <__vector_14+0x5c>
			printf("Long Press\n");
 2b2:	84 e2       	ldi	r24, 0x24	; 36
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 3a 02 	call	0x474	; 0x474 <puts>
			buttonFlag = BUTTON_LONG_PRESS;
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 2c2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
			TIMSK0 &= ~(_BV(OCIE0A)); // Disable Timer 0 interrupt
 2c6:	ee e6       	ldi	r30, 0x6E	; 110
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	8d 7f       	andi	r24, 0xFD	; 253
 2ce:	80 83       	st	Z, r24
			incrementer = 0;
 2d0:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <incrementer>
 2d4:	11 c0       	rjmp	.+34     	; 0x2f8 <__vector_14+0x7e>
		}
		else{
			printf("Short Press\n");
 2d6:	8f e2       	ldi	r24, 0x2F	; 47
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 3a 02 	call	0x474	; 0x474 <puts>
			buttonFlag = BUTTON_SHORT_PRESS;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 2e6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
			TIMSK0 &= ~(_BV(OCIE0A)); // Disable Timer 0 interrupt
 2ea:	ee e6       	ldi	r30, 0x6E	; 110
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	8d 7f       	andi	r24, 0xFD	; 253
 2f2:	80 83       	st	Z, r24
			incrementer = 0;
 2f4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <incrementer>
		}
	}
	else{ }  // don't do anything if the incrementer hasn't reached its desired value
	
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
 31a:	e4 e6       	ldi	r30, 0x64	; 100
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	8e 7f       	andi	r24, 0xFE	; 254
 322:	80 83       	st	Z, r24
 324:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 328:	81 e8       	ldi	r24, 0x81	; 129
 32a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 32e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	08 95       	ret

00000336 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x0f;
 336:	ec e7       	ldi	r30, 0x7C	; 124
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	90 81       	ld	r25, Z
 33c:	90 7f       	andi	r25, 0xF0	; 240
 33e:	90 83       	st	Z, r25
	ADMUX |= channel;
 340:	90 81       	ld	r25, Z
 342:	89 2b       	or	r24, r25
 344:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 346:	ea e7       	ldi	r30, 0x7A	; 122
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	80 64       	ori	r24, 0x40	; 64
 34e:	80 83       	st	Z, r24
 350:	08 95       	ret

00000352 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
 352:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
 356:	82 95       	swap	r24
 358:	81 70       	andi	r24, 0x01	; 1
 35a:	08 95       	ret

0000035c <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
 35c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 360:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 364:	90 e0       	ldi	r25, 0x00	; 0
}
 366:	92 2b       	or	r25, r18
 368:	08 95       	ret

0000036a <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
 36a:	0e 94 9b 01 	call	0x336	; 0x336 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
 36e:	0e 94 a9 01 	call	0x352	; 0x352 <ADC_0_is_conversion_done>
 372:	88 23       	and	r24, r24
 374:	e1 f3       	breq	.-8      	; 0x36e <ADC_0_get_conversion+0x4>
		;
	res = ADC_0_get_conversion_result();
 376:	0e 94 ae 01 	call	0x35c	; 0x35c <ADC_0_get_conversion_result>
	ADCSRA |= (1 << ADIF);
 37a:	ea e7       	ldi	r30, 0x7A	; 122
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	20 81       	ld	r18, Z
 380:	20 61       	ori	r18, 0x10	; 16
 382:	20 83       	st	Z, r18
	return res;
}
 384:	08 95       	ret

00000386 <ADC_0_get_resolution>:
 * \return The number of bits in the ADC conversion result
 */
uint8_t ADC_0_get_resolution()
{
	return 10;
}
 386:	8a e0       	ldi	r24, 0x0A	; 10
 388:	08 95       	ret

0000038a <EXTERNAL_IRQ_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 38a:	20 98       	cbi	0x04, 0	; 4
 38c:	28 98       	cbi	0x05, 0	; 5
 38e:	0e 94 01 02 	call	0x402	; 0x402 <EXTERNAL_IRQ_0_init>
 392:	08 95       	ret

00000394 <ADC_0_initialization>:
 394:	72 98       	cbi	0x0e, 2	; 14
 396:	73 98       	cbi	0x0e, 3	; 14
 398:	0e 94 8d 01 	call	0x31a	; 0x31a <ADC_0_init>
 39c:	08 95       	ret

0000039e <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 39e:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 3a0:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 3a2:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 3a4:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 3a6:	0e 94 16 02 	call	0x42c	; 0x42c <USART_0_init>
 3aa:	08 95       	ret

000003ac <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 3ac:	8d e3       	ldi	r24, 0x3D	; 61
 3ae:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 3b8:	94 b1       	in	r25, 0x04	; 4
 3ba:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 3bc:	95 b1       	in	r25, 0x05	; 5
 3be:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 3c0:	97 b1       	in	r25, 0x07	; 7
 3c2:	90 78       	andi	r25, 0x80	; 128
 3c4:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 3c6:	98 b1       	in	r25, 0x08	; 8
 3c8:	9f 67       	ori	r25, 0x7F	; 127
 3ca:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 3cc:	9a b1       	in	r25, 0x0a	; 10
 3ce:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 3d0:	9b b1       	in	r25, 0x0b	; 11
 3d2:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 3d4:	8d b1       	in	r24, 0x0d	; 13
 3d6:	80 7f       	andi	r24, 0xF0	; 240
 3d8:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 3da:	8e b1       	in	r24, 0x0e	; 14
 3dc:	8f 60       	ori	r24, 0x0F	; 15
 3de:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	60 e8       	ldi	r22, 0x80	; 128
 3e4:	81 e6       	ldi	r24, 0x61	; 97
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 08 02 	call	0x410	; 0x410 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 3ec:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 3ee:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	EXTERNAL_IRQ_0_initialization();
 3f0:	0e 94 c5 01 	call	0x38a	; 0x38a <EXTERNAL_IRQ_0_initialization>

	ADC_0_initialization();
 3f4:	0e 94 ca 01 	call	0x394	; 0x394 <ADC_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 3f8:	0e 94 0f 02 	call	0x41e	; 0x41e <TIMER_0_init>

	ADC_0_initialization();

	TIMER_0_initialization();

	USART_0_initialization();
 3fc:	0e 94 cf 01 	call	0x39e	; 0x39e <USART_0_initialization>
 400:	08 95       	ret

00000402 <EXTERNAL_IRQ_0_init>:
 * \return Initialization status.
 */
int8_t EXTERNAL_IRQ_0_init()
{

	PCICR = (1 << PCIE0); // Enable pin change interrupt 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

	PCMSK0 = (1 << PCINT0); // Pin change enable mask 0
 408:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>

	return 0;
}
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret

00000410 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 410:	2f b7       	in	r18, 0x3f	; 63
	cli
 412:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 414:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 416:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 418:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 41a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 41c:	08 95       	ret

0000041e <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
 41e:	e4 e6       	ldi	r30, 0x64	; 100
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	87 7f       	andi	r24, 0xF7	; 247
 426:	80 83       	st	Z, r24
	//		 | 0 << OCIE1A /* Output Compare A Match Interrupt Enable: disabled */
	//		 | 0 << ICIE1 /* Input Capture Interrupt Enable: disabled */
	//		 | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret

0000042c <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 42c:	e4 e6       	ldi	r30, 0x64	; 100
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	8d 7f       	andi	r24, 0xFD	; 253
 434:	80 83       	st	Z, r24
 436:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 43a:	83 e3       	ldi	r24, 0x33	; 51
 43c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 440:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 444:	88 e9       	ldi	r24, 0x98	; 152
 446:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <__iob+0x3>
 452:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__iob+0x2>
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	08 95       	ret

0000045a <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 45a:	e0 ec       	ldi	r30, 0xC0	; 192
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	90 81       	ld	r25, Z
 460:	95 ff       	sbrs	r25, 5
 462:	fd cf       	rjmp	.-6      	; 0x45e <USART_0_write+0x4>
		;
	UDR0 = data;
 464:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 468:	08 95       	ret

0000046a <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 46a:	0e 94 2d 02 	call	0x45a	; 0x45a <USART_0_write>
	return 0;
}
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	08 95       	ret

00000474 <puts>:
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <__iob+0x2>
 480:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <__iob+0x3>
 484:	23 81       	ldd	r18, Z+3	; 0x03
 486:	21 ff       	sbrs	r18, 1
 488:	1b c0       	rjmp	.+54     	; 0x4c0 <puts+0x4c>
 48a:	8c 01       	movw	r16, r24
 48c:	d0 e0       	ldi	r29, 0x00	; 0
 48e:	c0 e0       	ldi	r28, 0x00	; 0
 490:	f8 01       	movw	r30, r16
 492:	81 91       	ld	r24, Z+
 494:	8f 01       	movw	r16, r30
 496:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <__iob+0x2>
 49a:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <__iob+0x3>
 49e:	db 01       	movw	r26, r22
 4a0:	18 96       	adiw	r26, 0x08	; 8
 4a2:	ed 91       	ld	r30, X+
 4a4:	fc 91       	ld	r31, X
 4a6:	19 97       	sbiw	r26, 0x09	; 9
 4a8:	88 23       	and	r24, r24
 4aa:	31 f0       	breq	.+12     	; 0x4b8 <puts+0x44>
 4ac:	09 95       	icall
 4ae:	89 2b       	or	r24, r25
 4b0:	79 f3       	breq	.-34     	; 0x490 <puts+0x1c>
 4b2:	df ef       	ldi	r29, 0xFF	; 255
 4b4:	cf ef       	ldi	r28, 0xFF	; 255
 4b6:	ec cf       	rjmp	.-40     	; 0x490 <puts+0x1c>
 4b8:	8a e0       	ldi	r24, 0x0A	; 10
 4ba:	09 95       	icall
 4bc:	89 2b       	or	r24, r25
 4be:	19 f0       	breq	.+6      	; 0x4c6 <puts+0x52>
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	9f ef       	ldi	r25, 0xFF	; 255
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <puts+0x56>
 4c6:	8d 2f       	mov	r24, r29
 4c8:	9c 2f       	mov	r25, r28
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	08 95       	ret

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
