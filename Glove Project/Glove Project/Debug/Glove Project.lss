
Glove Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000004fe  00000592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080013c  0080013c  000005ce  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000620  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f55  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100a  00000000  00000000  000027d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e9a  00000000  00000000  000037df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  0000467c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000beb  00000000  00000000  00004a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a3  00000000  00000000  0000561b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005dbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_5>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee ef       	ldi	r30, 0xFE	; 254
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 33       	cpi	r26, 0x3C	; 60
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e3       	ldi	r26, 0x3C	; 60
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 34       	cpi	r26, 0x45	; 69
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  ea:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <system_init>
  f6:	08 95       	ret

000000f8 <__vector_5>:

#include <driver_init.h>
#include <compiler.h>

ISR(PCINT2_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1

	/* Insert your pin change 2 interrupt handling code here */
}
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <USART0_Print>:
		return ACTIVE_REVERSE_COMMAND;
	}
	else{
		return SLOW_STOP_COMMAND;
	}
}
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	8c 01       	movw	r16, r24
 11a:	7c 01       	movw	r14, r24
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	06 c0       	rjmp	.+12     	; 0x12e <USART0_Print+0x22>
 122:	f7 01       	movw	r30, r14
 124:	81 91       	ld	r24, Z+
 126:	7f 01       	movw	r14, r30
 128:	0e 94 40 02 	call	0x480	; 0x480 <USART_0_write>
 12c:	21 96       	adiw	r28, 0x01	; 1
 12e:	f8 01       	movw	r30, r16
 130:	01 90       	ld	r0, Z+
 132:	00 20       	and	r0, r0
 134:	e9 f7       	brne	.-6      	; 0x130 <USART0_Print+0x24>
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	e0 1b       	sub	r30, r16
 13a:	f1 0b       	sbc	r31, r17
 13c:	ce 17       	cp	r28, r30
 13e:	df 07       	cpc	r29, r31
 140:	80 f3       	brcs	.-32     	; 0x122 <USART0_Print+0x16>
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	08 95       	ret

00000150 <main>:

int main(void)
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <main+0x6>
 156:	00 d0       	rcall	.+0      	; 0x158 <main+0x8>
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
 15e:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	// DO NOT DELETE
	//==========================================
	int GLOVE_STATE = START;
	DDRC |= 0x01;
 162:	38 9a       	sbi	0x07, 0	; 7
	
	char command[] = "s00e"; 
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	ea e1       	ldi	r30, 0x1A	; 26
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	de 01       	movw	r26, r28
 16c:	11 96       	adiw	r26, 0x01	; 1
 16e:	01 90       	ld	r0, Z+
 170:	0d 92       	st	X+, r0
 172:	8a 95       	dec	r24
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x1e>
	uint16_t middleFingerAvg = 100;
	uint16_t ringFingerAvg = 100;
	
	uint8_t calCountAvg = 0;
	uint8_t countAvg = 0;
	USART0_Print("Starting...");
 176:	8e e0       	ldi	r24, 0x0E	; 14
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 86 00 	call	0x10c	; 0x10c <USART0_Print>
	PORTC |=(1<<0);
 17e:	40 9a       	sbi	0x08, 0	; 8
	//==========================================
	// DO NOT DELETE
	atmel_start_init();
	// DO NOT DELETE
	//==========================================
	int GLOVE_STATE = START;
 180:	00 e0       	ldi	r16, 0x00	; 0
 182:	10 e0       	ldi	r17, 0x00	; 0
					GLOVE_STATE = ACTIVE_MODE;
					buttonFlag = BUTTON_NOT_PRESSED;
				}
				else if(buttonFlag == BUTTON_LONG_PRESS){
					PORTC &= 0xFE;
					GLOVE_STATE = CALIBRATION;
 184:	ee 24       	eor	r14, r14
 186:	e3 94       	inc	r14
 188:	f1 2c       	mov	r15, r1
		switch (GLOVE_STATE){
			case START:
				//send command to stop motors
				if(buttonFlag == BUTTON_SHORT_PRESS){
					PORTC &= 0xFE;
					GLOVE_STATE = ACTIVE_MODE;
 18a:	68 94       	set
 18c:	cc 24       	eor	r12, r12
 18e:	c4 f8       	bld	r12, 4
 190:	d1 2c       	mov	r13, r1
	PORTC |=(1<<0);
	while (1){
		//read ADC
		//ADCSRA |= (1 << ADSC); // Set ADC Conversion Start Bit
		//while ((ADCSRA & (1 << ADSC)) ) { } // wait for ADC conversion to complete
		adcReadForeFinger = ADC_0_get_conversion(5);
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	0e 94 c7 01 	call	0x38e	; 0x38e <ADC_0_get_conversion>
		adcReadForeFinger = adcReadForeFinger >> (ADC_0_get_resolution() - 8);
 198:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_0_get_resolution>
		adcReadMiddleFinger = ADC_0_get_conversion(6);
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	0e 94 c7 01 	call	0x38e	; 0x38e <ADC_0_get_conversion>
		adcReadMiddleFinger = adcReadMiddleFinger >> (ADC_0_get_resolution() - 8);
 1a2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_0_get_resolution>
		adcReadRingFinger = ADC_0_get_conversion(7);
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	0e 94 c7 01 	call	0x38e	; 0x38e <ADC_0_get_conversion>
		adcReadRingFinger = adcReadRingFinger >> (ADC_0_get_resolution() - 8);
 1ac:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_0_get_resolution>
		switch (GLOVE_STATE){
 1b0:	01 30       	cpi	r16, 0x01	; 1
 1b2:	11 05       	cpc	r17, r1
 1b4:	71 f1       	breq	.+92     	; 0x212 <main+0xc2>
 1b6:	00 31       	cpi	r16, 0x10	; 16
 1b8:	11 05       	cpc	r17, r1
 1ba:	09 f4       	brne	.+2      	; 0x1be <main+0x6e>
 1bc:	46 c0       	rjmp	.+140    	; 0x24a <main+0xfa>
 1be:	01 15       	cp	r16, r1
 1c0:	11 05       	cpc	r17, r1
 1c2:	39 f7       	brne	.-50     	; 0x192 <main+0x42>
			case START:
				//send command to stop motors
				if(buttonFlag == BUTTON_SHORT_PRESS){
 1c4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 1c8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	91 05       	cpc	r25, r1
 1d0:	41 f4       	brne	.+16     	; 0x1e2 <main+0x92>
					PORTC &= 0xFE;
 1d2:	40 98       	cbi	0x08, 0	; 8
					GLOVE_STATE = ACTIVE_MODE;
					buttonFlag = BUTTON_NOT_PRESSED;
 1d4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 1d8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
		switch (GLOVE_STATE){
			case START:
				//send command to stop motors
				if(buttonFlag == BUTTON_SHORT_PRESS){
					PORTC &= 0xFE;
					GLOVE_STATE = ACTIVE_MODE;
 1dc:	0c 2d       	mov	r16, r12
 1de:	1d 2d       	mov	r17, r13
 1e0:	d8 cf       	rjmp	.-80     	; 0x192 <main+0x42>
					buttonFlag = BUTTON_NOT_PRESSED;
				}
				else if(buttonFlag == BUTTON_LONG_PRESS){
 1e2:	02 97       	sbiw	r24, 0x02	; 2
 1e4:	41 f4       	brne	.+16     	; 0x1f6 <main+0xa6>
					PORTC &= 0xFE;
 1e6:	40 98       	cbi	0x08, 0	; 8
					GLOVE_STATE = CALIBRATION;
					buttonFlag = BUTTON_NOT_PRESSED;
 1e8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 1ec:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
					GLOVE_STATE = ACTIVE_MODE;
					buttonFlag = BUTTON_NOT_PRESSED;
				}
				else if(buttonFlag == BUTTON_LONG_PRESS){
					PORTC &= 0xFE;
					GLOVE_STATE = CALIBRATION;
 1f0:	0e 2d       	mov	r16, r14
 1f2:	1f 2d       	mov	r17, r15
 1f4:	ce cf       	rjmp	.-100    	; 0x192 <main+0x42>
					buttonFlag = BUTTON_NOT_PRESSED;
				}
				else{
					//send START mode command
					memcpy(command, START_COMMAND, sizeof(command));
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	ea e1       	ldi	r30, 0x1A	; 26
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	de 01       	movw	r26, r28
 1fe:	11 96       	adiw	r26, 0x01	; 1
 200:	01 90       	ld	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	8a 95       	dec	r24
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0xb0>
					USART0_Print(command);
 208:	ce 01       	movw	r24, r28
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	0e 94 86 00 	call	0x10c	; 0x10c <USART0_Print>
 210:	c0 cf       	rjmp	.-128    	; 0x192 <main+0x42>
					//PORTC |=(1<<0);
				}
				break;
			case CALIBRATION:
				PORTC &= 0xFE;
 212:	40 98       	cbi	0x08, 0	; 8
				if(buttonFlag == BUTTON_SHORT_PRESS || buttonFlag == BUTTON_LONG_PRESS){
 214:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 218:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	02 97       	sbiw	r24, 0x02	; 2
 220:	30 f4       	brcc	.+12     	; 0x22e <main+0xde>
					GLOVE_STATE = START;
					buttonFlag = BUTTON_NOT_PRESSED;
 222:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 226:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
				}
				break;
			case CALIBRATION:
				PORTC &= 0xFE;
				if(buttonFlag == BUTTON_SHORT_PRESS || buttonFlag == BUTTON_LONG_PRESS){
					GLOVE_STATE = START;
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	10 e0       	ldi	r17, 0x00	; 0
					buttonFlag = BUTTON_NOT_PRESSED;
					calCountAvg = 0;
				}
				//send command to stop motors
				memcpy(command, SLOW_STOP_COMMAND, sizeof(command));
 22e:	85 e0       	ldi	r24, 0x05	; 5
 230:	ef e1       	ldi	r30, 0x1F	; 31
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	de 01       	movw	r26, r28
 236:	11 96       	adiw	r26, 0x01	; 1
 238:	01 90       	ld	r0, Z+
 23a:	0d 92       	st	X+, r0
 23c:	8a 95       	dec	r24
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0xe8>
				USART0_Print(command);
 240:	ce 01       	movw	r24, r28
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	0e 94 86 00 	call	0x10c	; 0x10c <USART0_Print>
 248:	a4 cf       	rjmp	.-184    	; 0x192 <main+0x42>
					calCountAvg = 0;
					GLOVE_STATE = START;
				}
				break;
			case ACTIVE_MODE:
				PORTC &= 0xFE;
 24a:	40 98       	cbi	0x08, 0	; 8
				if(buttonFlag == BUTTON_SHORT_PRESS || buttonFlag == BUTTON_LONG_PRESS){
 24c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 250:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	02 97       	sbiw	r24, 0x02	; 2
 258:	08 f0       	brcs	.+2      	; 0x25c <main+0x10c>
 25a:	9b cf       	rjmp	.-202    	; 0x192 <main+0x42>
					GLOVE_STATE = START;
					buttonFlag = BUTTON_NOT_PRESSED;
 25c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 260:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
				}
				break;
			case ACTIVE_MODE:
				PORTC &= 0xFE;
				if(buttonFlag == BUTTON_SHORT_PRESS || buttonFlag == BUTTON_LONG_PRESS){
					GLOVE_STATE = START;
 264:	00 e0       	ldi	r16, 0x00	; 0
 266:	10 e0       	ldi	r17, 0x00	; 0
 268:	94 cf       	rjmp	.-216    	; 0x192 <main+0x42>

0000026a <__vector_3>:
	return 1;
}


ISR(PCINT0_vect) // PB2 is PCINT18 Interrupt Routine for INT0 (Pin PD2) Interrupt //PCTINT2_vect
{
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	8f 93       	push	r24
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
		TIMSK0 |= (_BV(OCIE0A)); // Enable Timer 0 Interrupt
 27a:	ee e6       	ldi	r30, 0x6E	; 110
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	82 60       	ori	r24, 0x02	; 2
 282:	80 83       	st	Z, r24
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_14>:


ISR(TIMER0_COMPA_vect) // Interrupt Routine for Timer 0 Compare Match A
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	/* Timer 0 has a minimum frequency of (f_clock/(prescaler * (1+OCR0A)) which in this case = (8MHz/(1024*(1 + 255)) = 30.5Hz
	   this is too fast for a 'long press' of the pushbutton, so we allow the timer to interrupt 60 times (about 2 seconds) before polling the pushbutton pin to check if it is still
	   being pulled low   
	*/

	incrementer = incrementer + 1;
 2b6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <incrementer>
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <incrementer>
	if (incrementer > 60) 
 2c0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <incrementer>
 2c4:	8d 33       	cpi	r24, 0x3D	; 61
 2c6:	38 f1       	brcs	.+78     	; 0x316 <__vector_14+0x82>
	{
		if(PORTD_get_pin_level(PORTD2) < 1){ // If the pin is still being pulled low by the pushbutton
 2c8:	4a 99       	sbic	0x09, 2	; 9
 2ca:	13 c0       	rjmp	.+38     	; 0x2f2 <__vector_14+0x5e>
			printf("Long Press\n");
 2cc:	84 e2       	ldi	r24, 0x24	; 36
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 4d 02 	call	0x49a	; 0x49a <puts>
			buttonFlag = BUTTON_LONG_PRESS;
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 2dc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
			PORTC &= 0xFE;
 2e0:	40 98       	cbi	0x08, 0	; 8
			TIMSK0 &= ~(_BV(OCIE0A)); // Disable Timer 0 interrupt
 2e2:	ee e6       	ldi	r30, 0x6E	; 110
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	8d 7f       	andi	r24, 0xFD	; 253
 2ea:	80 83       	st	Z, r24
			incrementer = 0;
 2ec:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <incrementer>
 2f0:	12 c0       	rjmp	.+36     	; 0x316 <__vector_14+0x82>
		}
		else{
			printf("Short Press\n");
 2f2:	8f e2       	ldi	r24, 0x2F	; 47
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 4d 02 	call	0x49a	; 0x49a <puts>
			buttonFlag = BUTTON_SHORT_PRESS;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 302:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
			PORTC &= 0xFE;
 306:	40 98       	cbi	0x08, 0	; 8
			TIMSK0 &= ~(_BV(OCIE0A)); // Disable Timer 0 interrupt
 308:	ee e6       	ldi	r30, 0x6E	; 110
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	8d 7f       	andi	r24, 0xFD	; 253
 310:	80 83       	st	Z, r24
			incrementer = 0;
 312:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <incrementer>
		}
	}
	else{ }  // don't do anything if the incrementer hasn't reached its desired value
	
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
 338:	e4 e6       	ldi	r30, 0x64	; 100
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	8e 7f       	andi	r24, 0xFE	; 254
 340:	80 83       	st	Z, r24
 342:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 346:	81 e8       	ldi	r24, 0x81	; 129
 348:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 34c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 350:	80 e2       	ldi	r24, 0x20	; 32
 352:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret

0000035a <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x0f;
 35a:	ec e7       	ldi	r30, 0x7C	; 124
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	90 81       	ld	r25, Z
 360:	90 7f       	andi	r25, 0xF0	; 240
 362:	90 83       	st	Z, r25
	ADMUX |= channel;
 364:	90 81       	ld	r25, Z
 366:	89 2b       	or	r24, r25
 368:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 36a:	ea e7       	ldi	r30, 0x7A	; 122
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	80 64       	ori	r24, 0x40	; 64
 372:	80 83       	st	Z, r24
 374:	08 95       	ret

00000376 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
 376:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
 37a:	82 95       	swap	r24
 37c:	81 70       	andi	r24, 0x01	; 1
 37e:	08 95       	ret

00000380 <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
 380:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 384:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 388:	90 e0       	ldi	r25, 0x00	; 0
}
 38a:	92 2b       	or	r25, r18
 38c:	08 95       	ret

0000038e <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
 38e:	0e 94 ad 01 	call	0x35a	; 0x35a <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
 392:	0e 94 bb 01 	call	0x376	; 0x376 <ADC_0_is_conversion_done>
 396:	88 23       	and	r24, r24
 398:	e1 f3       	breq	.-8      	; 0x392 <ADC_0_get_conversion+0x4>
		;
	res = ADC_0_get_conversion_result();
 39a:	0e 94 c0 01 	call	0x380	; 0x380 <ADC_0_get_conversion_result>
	ADCSRA |= (1 << ADIF);
 39e:	ea e7       	ldi	r30, 0x7A	; 122
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	20 81       	ld	r18, Z
 3a4:	20 61       	ori	r18, 0x10	; 16
 3a6:	20 83       	st	Z, r18
	return res;
}
 3a8:	08 95       	ret

000003aa <ADC_0_get_resolution>:
 * \return The number of bits in the ADC conversion result
 */
uint8_t ADC_0_get_resolution()
{
	return 10;
}
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	08 95       	ret

000003ae <EXTERNAL_IRQ_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 3ae:	52 98       	cbi	0x0a, 2	; 10
 3b0:	5a 98       	cbi	0x0b, 2	; 11
 3b2:	0e 94 14 02 	call	0x428	; 0x428 <EXTERNAL_IRQ_0_init>
 3b6:	08 95       	ret

000003b8 <ADC_0_initialization>:
 3b8:	45 98       	cbi	0x08, 5	; 8
 3ba:	72 98       	cbi	0x0e, 2	; 14
 3bc:	73 98       	cbi	0x0e, 3	; 14
 3be:	0e 94 9c 01 	call	0x338	; 0x338 <ADC_0_init>
 3c2:	08 95       	ret

000003c4 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 3c4:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 3c6:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 3c8:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 3ca:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 3cc:	0e 94 29 02 	call	0x452	; 0x452 <USART_0_init>
 3d0:	08 95       	ret

000003d2 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 3d2:	8d e3       	ldi	r24, 0x3D	; 61
 3d4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 3de:	94 b1       	in	r25, 0x04	; 4
 3e0:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 3e2:	95 b1       	in	r25, 0x05	; 5
 3e4:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 3e6:	97 b1       	in	r25, 0x07	; 7
 3e8:	90 78       	andi	r25, 0x80	; 128
 3ea:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 3ec:	98 b1       	in	r25, 0x08	; 8
 3ee:	9f 67       	ori	r25, 0x7F	; 127
 3f0:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 3f2:	9a b1       	in	r25, 0x0a	; 10
 3f4:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 3f6:	9b b1       	in	r25, 0x0b	; 11
 3f8:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 3fa:	8d b1       	in	r24, 0x0d	; 13
 3fc:	80 7f       	andi	r24, 0xF0	; 240
 3fe:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 400:	8e b1       	in	r24, 0x0e	; 14
 402:	8f 60       	ori	r24, 0x0F	; 15
 404:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	60 e8       	ldi	r22, 0x80	; 128
 40a:	81 e6       	ldi	r24, 0x61	; 97
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 1b 02 	call	0x436	; 0x436 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 412:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 414:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	EXTERNAL_IRQ_0_initialization();
 416:	0e 94 d7 01 	call	0x3ae	; 0x3ae <EXTERNAL_IRQ_0_initialization>

	ADC_0_initialization();
 41a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 41e:	0e 94 22 02 	call	0x444	; 0x444 <TIMER_0_init>

	ADC_0_initialization();

	TIMER_0_initialization();

	USART_0_initialization();
 422:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <USART_0_initialization>
 426:	08 95       	ret

00000428 <EXTERNAL_IRQ_0_init>:
 * \return Initialization status.
 */
int8_t EXTERNAL_IRQ_0_init()
{

	PCICR = (1 << PCIE2); // Enable pin change interrupt 2
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

	PCMSK2 = (1 << PCINT18); // Pin change enable mask 18
 42e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>

	return 0;
}
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret

00000436 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 436:	2f b7       	in	r18, 0x3f	; 63
	cli
 438:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 43a:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 43c:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 43e:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 440:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 442:	08 95       	ret

00000444 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
 444:	e4 e6       	ldi	r30, 0x64	; 100
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	87 7f       	andi	r24, 0xF7	; 247
 44c:	80 83       	st	Z, r24
	//		 | 0 << OCIE1A /* Output Compare A Match Interrupt Enable: disabled */
	//		 | 0 << ICIE1 /* Input Capture Interrupt Enable: disabled */
	//		 | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret

00000452 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 452:	e4 e6       	ldi	r30, 0x64	; 100
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	8d 7f       	andi	r24, 0xFD	; 253
 45a:	80 83       	st	Z, r24
 45c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 460:	83 e3       	ldi	r24, 0x33	; 51
 462:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 466:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 46a:	88 e9       	ldi	r24, 0x98	; 152
 46c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__iob+0x3>
 478:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <__iob+0x2>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	08 95       	ret

00000480 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 480:	e0 ec       	ldi	r30, 0xC0	; 192
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	90 81       	ld	r25, Z
 486:	95 ff       	sbrs	r25, 5
 488:	fd cf       	rjmp	.-6      	; 0x484 <USART_0_write+0x4>
		;
	UDR0 = data;
 48a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 48e:	08 95       	ret

00000490 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 490:	0e 94 40 02 	call	0x480	; 0x480 <USART_0_write>
	return 0;
}
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	08 95       	ret

0000049a <puts>:
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <__iob+0x2>
 4a6:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <__iob+0x3>
 4aa:	23 81       	ldd	r18, Z+3	; 0x03
 4ac:	21 ff       	sbrs	r18, 1
 4ae:	1b c0       	rjmp	.+54     	; 0x4e6 <puts+0x4c>
 4b0:	8c 01       	movw	r16, r24
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	f8 01       	movw	r30, r16
 4b8:	81 91       	ld	r24, Z+
 4ba:	8f 01       	movw	r16, r30
 4bc:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <__iob+0x2>
 4c0:	70 91 42 01 	lds	r23, 0x0142	; 0x800142 <__iob+0x3>
 4c4:	db 01       	movw	r26, r22
 4c6:	18 96       	adiw	r26, 0x08	; 8
 4c8:	ed 91       	ld	r30, X+
 4ca:	fc 91       	ld	r31, X
 4cc:	19 97       	sbiw	r26, 0x09	; 9
 4ce:	88 23       	and	r24, r24
 4d0:	31 f0       	breq	.+12     	; 0x4de <puts+0x44>
 4d2:	09 95       	icall
 4d4:	89 2b       	or	r24, r25
 4d6:	79 f3       	breq	.-34     	; 0x4b6 <puts+0x1c>
 4d8:	df ef       	ldi	r29, 0xFF	; 255
 4da:	cf ef       	ldi	r28, 0xFF	; 255
 4dc:	ec cf       	rjmp	.-40     	; 0x4b6 <puts+0x1c>
 4de:	8a e0       	ldi	r24, 0x0A	; 10
 4e0:	09 95       	icall
 4e2:	89 2b       	or	r24, r25
 4e4:	19 f0       	breq	.+6      	; 0x4ec <puts+0x52>
 4e6:	8f ef       	ldi	r24, 0xFF	; 255
 4e8:	9f ef       	ldi	r25, 0xFF	; 255
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <puts+0x56>
 4ec:	8d 2f       	mov	r24, r29
 4ee:	9c 2f       	mov	r25, r28
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
