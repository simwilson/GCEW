
GCEW_Glove.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000007e8  0000087c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800116  00800116  00000892  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000930  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001651  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7e  00000000  00000000  000020d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000977  00000000  00000000  00002e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  000037c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000859  00000000  00000000  0000398c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029a  00000000  00000000  000041e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000447f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ee       	ldi	r30, 0xE8	; 232
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 31       	cpi	r26, 0x16	; 22
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e1       	ldi	r26, 0x16	; 22
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 31       	cpi	r26, 0x1C	; 28
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  ea:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 b8 00 	call	0x170	; 0x170 <system_init>
  f6:	08 95       	ret

000000f8 <main>:
#include <atomic.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  f8:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>
	
	/* Replace with your application code */
	while (1) {
	_delay_ms(500);
	printf("Testing");
  fc:	ce e0       	ldi	r28, 0x0E	; 14
  fe:	d1 e0       	ldi	r29, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	84 e3       	ldi	r24, 0x34	; 52
 104:	9c e0       	ldi	r25, 0x0C	; 12
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0xe>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x18>
 110:	00 00       	nop
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	0e 94 14 01 	call	0x228	; 0x228 <printf>
	USART_0_write(10);
 11a:	8a e0       	ldi	r24, 0x0A	; 10
 11c:	0e 94 07 01 	call	0x20e	; 0x20e <USART_0_write>
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	ed cf       	rjmp	.-38     	; 0x100 <main+0x8>

00000126 <ADC_init>:
 */
int8_t ADC_init()
{

	/* Enable clock to write ADC registers */
	PRR0 &= ~(1 << PRADC);
 126:	e4 e6       	ldi	r30, 0x64	; 100
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	80 83       	st	Z, r24

	ADMUX = (0x01 << REFS0)   /* AVCC with external capacitor at AREF pin */
 130:	82 e4       	ldi	r24, 0x42	; 66
 132:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	        | (0 << ADLAR)    /* Left Adjust Result: disabled */
	        | (0x02 << MUX0); /* ADC Single Ended Input pin 2 */

	ADCSRA = (1 << ADEN)        /* ADC: enabled */
 136:	86 e8       	ldi	r24, 0x86	; 134
 138:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	         | (0 << ADATE)     /* Auto Trigger: disabled */
	         | (0 << ADIE)      /* ADC Interrupt: disabled */
	         | (0x06 << ADPS0); /* 64 */
	ADCSRB = (0x00 << ADTS0)    /* Free Running mode */
 13c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	         | (0 << ACME)      /* Analog Comparator Multiplexer: disabled */
	    ;

	DIDR0 = 1 << ADC2D    /* Disable digital input buffer for ADC2 */
 140:	8c e1       	ldi	r24, 0x1C	; 28
 142:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	        | 1 << ADC3D  /* Disable digital input buffer for ADC3 */
	        | 1 << ADC4D; /* Disable digital input buffer for ADC4 */

	return 0;
}
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret

0000014a <EXTERNAL_IRQ_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 14a:	55 98       	cbi	0x0a, 5	; 10
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRD &= ~(1 << pin);
 14c:	55 98       	cbi	0x0a, 5	; 10

		PORTD |= 1 << pin;
 14e:	5d 9a       	sbi	0x0b, 5	; 11
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	EXTERNAL_IRQ_0_init();
 150:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <EXTERNAL_IRQ_0_init>
 154:	08 95       	ret

00000156 <ADC_initialization>:
		DDRC &= ~(1 << pin);

		PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTC &= ~(1 << pin);
 156:	42 98       	cbi	0x08, 2	; 8
 158:	43 98       	cbi	0x08, 3	; 8
 15a:	44 98       	cbi	0x08, 4	; 8
	Flex2_set_pull_mode(PORT_PULL_OFF);

	// Disable pull-up.
	Flex1_set_pull_mode(PORT_PULL_OFF);

	ADC_init();
 15c:	0e 94 93 00 	call	0x126	; 0x126 <ADC_init>
 160:	08 95       	ret

00000162 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 162:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 164:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 166:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 168:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 16a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_0_init>
 16e:	08 95       	ret

00000170 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 170:	8d e3       	ldi	r24, 0x3D	; 61
 172:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 17c:	94 b1       	in	r25, 0x04	; 4
 17e:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 180:	95 b1       	in	r25, 0x05	; 5
 182:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 184:	97 b1       	in	r25, 0x07	; 7
 186:	90 78       	andi	r25, 0x80	; 128
 188:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 18a:	98 b1       	in	r25, 0x08	; 8
 18c:	9f 67       	ori	r25, 0x7F	; 127
 18e:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 190:	9a b1       	in	r25, 0x0a	; 10
 192:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 194:	9b b1       	in	r25, 0x0b	; 11
 196:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 198:	8d b1       	in	r24, 0x0d	; 13
 19a:	80 7f       	andi	r24, 0xF0	; 240
 19c:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 19e:	8e b1       	in	r24, 0x0e	; 14
 1a0:	8f 60       	ori	r24, 0x0F	; 15
 1a2:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	60 e8       	ldi	r22, 0x80	; 128
 1a8:	81 e6       	ldi	r24, 0x61	; 97
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 1b0:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 1b2:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	EXTERNAL_IRQ_0_initialization();
 1b4:	0e 94 a5 00 	call	0x14a	; 0x14a <EXTERNAL_IRQ_0_initialization>

	ADC_initialization();
 1b8:	0e 94 ab 00 	call	0x156	; 0x156 <ADC_initialization>

	USART_0_initialization();
 1bc:	0e 94 b1 00 	call	0x162	; 0x162 <USART_0_initialization>
 1c0:	08 95       	ret

000001c2 <EXTERNAL_IRQ_0_init>:
 * \return Initialization status.
 */
int8_t EXTERNAL_IRQ_0_init()
{

	PCICR = (1 << PCIE2); // Enable pin change interrupt 2
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

	PCMSK2 = (1 << PCINT21); // Pin change enable mask 21
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>

	return 0;
}
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 95       	ret

000001d2 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 1d2:	2f b7       	in	r18, 0x3f	; 63
	cli
 1d4:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1d6:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 1d8:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 1da:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 1dc:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 1de:	08 95       	ret

000001e0 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 1e0:	e4 e6       	ldi	r30, 0x64	; 100
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	8d 7f       	andi	r24, 0xFD	; 253
 1e8:	80 83       	st	Z, r24
 1ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1ee:	8c e0       	ldi	r24, 0x0C	; 12
 1f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1f4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1f8:	88 e9       	ldi	r24, 0x98	; 152
 1fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x3>
 206:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x2>
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret

0000020e <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 20e:	e0 ec       	ldi	r30, 0xC0	; 192
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	90 81       	ld	r25, Z
 214:	95 ff       	sbrs	r25, 5
 216:	fd cf       	rjmp	.-6      	; 0x212 <USART_0_write+0x4>
		;
	UDR0 = data;
 218:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 21c:	08 95       	ret

0000021e <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 21e:	0e 94 07 01 	call	0x20e	; 0x20e <USART_0_write>
	return 0;
}
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	08 95       	ret

00000228 <printf>:
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	ea e1       	ldi	r30, 0x1A	; 26
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	0c 94 cb 03 	jmp	0x796	; 0x796 <__prologue_saves__+0x20>
 234:	ae 01       	movw	r20, r28
 236:	4b 5f       	subi	r20, 0xFB	; 251
 238:	5f 4f       	sbci	r21, 0xFF	; 255
 23a:	fa 01       	movw	r30, r20
 23c:	61 91       	ld	r22, Z+
 23e:	71 91       	ld	r23, Z+
 240:	af 01       	movw	r20, r30
 242:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end+0x2>
 246:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x3>
 24a:	0e 94 2a 01 	call	0x254	; 0x254 <vfprintf>
 24e:	e2 e0       	ldi	r30, 0x02	; 2
 250:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__epilogue_restores__+0x20>

00000254 <vfprintf>:
 254:	ab e0       	ldi	r26, 0x0B	; 11
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e0 e3       	ldi	r30, 0x30	; 48
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	0c 94 bb 03 	jmp	0x776	; 0x776 <__prologue_saves__>
 260:	6c 01       	movw	r12, r24
 262:	7b 01       	movw	r14, r22
 264:	8a 01       	movw	r16, r20
 266:	fc 01       	movw	r30, r24
 268:	17 82       	std	Z+7, r1	; 0x07
 26a:	16 82       	std	Z+6, r1	; 0x06
 26c:	83 81       	ldd	r24, Z+3	; 0x03
 26e:	81 ff       	sbrs	r24, 1
 270:	cc c1       	rjmp	.+920    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 272:	ce 01       	movw	r24, r28
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	3c 01       	movw	r6, r24
 278:	f6 01       	movw	r30, r12
 27a:	93 81       	ldd	r25, Z+3	; 0x03
 27c:	f7 01       	movw	r30, r14
 27e:	93 fd       	sbrc	r25, 3
 280:	85 91       	lpm	r24, Z+
 282:	93 ff       	sbrs	r25, 3
 284:	81 91       	ld	r24, Z+
 286:	7f 01       	movw	r14, r30
 288:	88 23       	and	r24, r24
 28a:	09 f4       	brne	.+2      	; 0x28e <vfprintf+0x3a>
 28c:	ba c1       	rjmp	.+884    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 28e:	85 32       	cpi	r24, 0x25	; 37
 290:	39 f4       	brne	.+14     	; 0x2a0 <vfprintf+0x4c>
 292:	93 fd       	sbrc	r25, 3
 294:	85 91       	lpm	r24, Z+
 296:	93 ff       	sbrs	r25, 3
 298:	81 91       	ld	r24, Z+
 29a:	7f 01       	movw	r14, r30
 29c:	85 32       	cpi	r24, 0x25	; 37
 29e:	29 f4       	brne	.+10     	; 0x2aa <vfprintf+0x56>
 2a0:	b6 01       	movw	r22, r12
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 21 03 	call	0x642	; 0x642 <fputc>
 2a8:	e7 cf       	rjmp	.-50     	; 0x278 <vfprintf+0x24>
 2aa:	91 2c       	mov	r9, r1
 2ac:	21 2c       	mov	r2, r1
 2ae:	31 2c       	mov	r3, r1
 2b0:	ff e1       	ldi	r31, 0x1F	; 31
 2b2:	f3 15       	cp	r31, r3
 2b4:	d8 f0       	brcs	.+54     	; 0x2ec <vfprintf+0x98>
 2b6:	8b 32       	cpi	r24, 0x2B	; 43
 2b8:	79 f0       	breq	.+30     	; 0x2d8 <vfprintf+0x84>
 2ba:	38 f4       	brcc	.+14     	; 0x2ca <vfprintf+0x76>
 2bc:	80 32       	cpi	r24, 0x20	; 32
 2be:	79 f0       	breq	.+30     	; 0x2de <vfprintf+0x8a>
 2c0:	83 32       	cpi	r24, 0x23	; 35
 2c2:	a1 f4       	brne	.+40     	; 0x2ec <vfprintf+0x98>
 2c4:	23 2d       	mov	r18, r3
 2c6:	20 61       	ori	r18, 0x10	; 16
 2c8:	1d c0       	rjmp	.+58     	; 0x304 <vfprintf+0xb0>
 2ca:	8d 32       	cpi	r24, 0x2D	; 45
 2cc:	61 f0       	breq	.+24     	; 0x2e6 <vfprintf+0x92>
 2ce:	80 33       	cpi	r24, 0x30	; 48
 2d0:	69 f4       	brne	.+26     	; 0x2ec <vfprintf+0x98>
 2d2:	23 2d       	mov	r18, r3
 2d4:	21 60       	ori	r18, 0x01	; 1
 2d6:	16 c0       	rjmp	.+44     	; 0x304 <vfprintf+0xb0>
 2d8:	83 2d       	mov	r24, r3
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	38 2e       	mov	r3, r24
 2de:	e3 2d       	mov	r30, r3
 2e0:	e4 60       	ori	r30, 0x04	; 4
 2e2:	3e 2e       	mov	r3, r30
 2e4:	2a c0       	rjmp	.+84     	; 0x33a <vfprintf+0xe6>
 2e6:	f3 2d       	mov	r31, r3
 2e8:	f8 60       	ori	r31, 0x08	; 8
 2ea:	1d c0       	rjmp	.+58     	; 0x326 <vfprintf+0xd2>
 2ec:	37 fc       	sbrc	r3, 7
 2ee:	2d c0       	rjmp	.+90     	; 0x34a <vfprintf+0xf6>
 2f0:	20 ed       	ldi	r18, 0xD0	; 208
 2f2:	28 0f       	add	r18, r24
 2f4:	2a 30       	cpi	r18, 0x0A	; 10
 2f6:	40 f0       	brcs	.+16     	; 0x308 <vfprintf+0xb4>
 2f8:	8e 32       	cpi	r24, 0x2E	; 46
 2fa:	b9 f4       	brne	.+46     	; 0x32a <vfprintf+0xd6>
 2fc:	36 fc       	sbrc	r3, 6
 2fe:	81 c1       	rjmp	.+770    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 300:	23 2d       	mov	r18, r3
 302:	20 64       	ori	r18, 0x40	; 64
 304:	32 2e       	mov	r3, r18
 306:	19 c0       	rjmp	.+50     	; 0x33a <vfprintf+0xe6>
 308:	36 fe       	sbrs	r3, 6
 30a:	06 c0       	rjmp	.+12     	; 0x318 <vfprintf+0xc4>
 30c:	8a e0       	ldi	r24, 0x0A	; 10
 30e:	98 9e       	mul	r9, r24
 310:	20 0d       	add	r18, r0
 312:	11 24       	eor	r1, r1
 314:	92 2e       	mov	r9, r18
 316:	11 c0       	rjmp	.+34     	; 0x33a <vfprintf+0xe6>
 318:	ea e0       	ldi	r30, 0x0A	; 10
 31a:	2e 9e       	mul	r2, r30
 31c:	20 0d       	add	r18, r0
 31e:	11 24       	eor	r1, r1
 320:	22 2e       	mov	r2, r18
 322:	f3 2d       	mov	r31, r3
 324:	f0 62       	ori	r31, 0x20	; 32
 326:	3f 2e       	mov	r3, r31
 328:	08 c0       	rjmp	.+16     	; 0x33a <vfprintf+0xe6>
 32a:	8c 36       	cpi	r24, 0x6C	; 108
 32c:	21 f4       	brne	.+8      	; 0x336 <vfprintf+0xe2>
 32e:	83 2d       	mov	r24, r3
 330:	80 68       	ori	r24, 0x80	; 128
 332:	38 2e       	mov	r3, r24
 334:	02 c0       	rjmp	.+4      	; 0x33a <vfprintf+0xe6>
 336:	88 36       	cpi	r24, 0x68	; 104
 338:	41 f4       	brne	.+16     	; 0x34a <vfprintf+0xf6>
 33a:	f7 01       	movw	r30, r14
 33c:	93 fd       	sbrc	r25, 3
 33e:	85 91       	lpm	r24, Z+
 340:	93 ff       	sbrs	r25, 3
 342:	81 91       	ld	r24, Z+
 344:	7f 01       	movw	r14, r30
 346:	81 11       	cpse	r24, r1
 348:	b3 cf       	rjmp	.-154    	; 0x2b0 <vfprintf+0x5c>
 34a:	98 2f       	mov	r25, r24
 34c:	9f 7d       	andi	r25, 0xDF	; 223
 34e:	95 54       	subi	r25, 0x45	; 69
 350:	93 30       	cpi	r25, 0x03	; 3
 352:	28 f4       	brcc	.+10     	; 0x35e <vfprintf+0x10a>
 354:	0c 5f       	subi	r16, 0xFC	; 252
 356:	1f 4f       	sbci	r17, 0xFF	; 255
 358:	9f e3       	ldi	r25, 0x3F	; 63
 35a:	99 83       	std	Y+1, r25	; 0x01
 35c:	0d c0       	rjmp	.+26     	; 0x378 <vfprintf+0x124>
 35e:	83 36       	cpi	r24, 0x63	; 99
 360:	31 f0       	breq	.+12     	; 0x36e <vfprintf+0x11a>
 362:	83 37       	cpi	r24, 0x73	; 115
 364:	71 f0       	breq	.+28     	; 0x382 <vfprintf+0x12e>
 366:	83 35       	cpi	r24, 0x53	; 83
 368:	09 f0       	breq	.+2      	; 0x36c <vfprintf+0x118>
 36a:	59 c0       	rjmp	.+178    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 36c:	21 c0       	rjmp	.+66     	; 0x3b0 <vfprintf+0x15c>
 36e:	f8 01       	movw	r30, r16
 370:	80 81       	ld	r24, Z
 372:	89 83       	std	Y+1, r24	; 0x01
 374:	0e 5f       	subi	r16, 0xFE	; 254
 376:	1f 4f       	sbci	r17, 0xFF	; 255
 378:	88 24       	eor	r8, r8
 37a:	83 94       	inc	r8
 37c:	91 2c       	mov	r9, r1
 37e:	53 01       	movw	r10, r6
 380:	13 c0       	rjmp	.+38     	; 0x3a8 <vfprintf+0x154>
 382:	28 01       	movw	r4, r16
 384:	f2 e0       	ldi	r31, 0x02	; 2
 386:	4f 0e       	add	r4, r31
 388:	51 1c       	adc	r5, r1
 38a:	f8 01       	movw	r30, r16
 38c:	a0 80       	ld	r10, Z
 38e:	b1 80       	ldd	r11, Z+1	; 0x01
 390:	36 fe       	sbrs	r3, 6
 392:	03 c0       	rjmp	.+6      	; 0x39a <vfprintf+0x146>
 394:	69 2d       	mov	r22, r9
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <vfprintf+0x14a>
 39a:	6f ef       	ldi	r22, 0xFF	; 255
 39c:	7f ef       	ldi	r23, 0xFF	; 255
 39e:	c5 01       	movw	r24, r10
 3a0:	0e 94 16 03 	call	0x62c	; 0x62c <strnlen>
 3a4:	4c 01       	movw	r8, r24
 3a6:	82 01       	movw	r16, r4
 3a8:	f3 2d       	mov	r31, r3
 3aa:	ff 77       	andi	r31, 0x7F	; 127
 3ac:	3f 2e       	mov	r3, r31
 3ae:	16 c0       	rjmp	.+44     	; 0x3dc <vfprintf+0x188>
 3b0:	28 01       	movw	r4, r16
 3b2:	22 e0       	ldi	r18, 0x02	; 2
 3b4:	42 0e       	add	r4, r18
 3b6:	51 1c       	adc	r5, r1
 3b8:	f8 01       	movw	r30, r16
 3ba:	a0 80       	ld	r10, Z
 3bc:	b1 80       	ldd	r11, Z+1	; 0x01
 3be:	36 fe       	sbrs	r3, 6
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <vfprintf+0x174>
 3c2:	69 2d       	mov	r22, r9
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <vfprintf+0x178>
 3c8:	6f ef       	ldi	r22, 0xFF	; 255
 3ca:	7f ef       	ldi	r23, 0xFF	; 255
 3cc:	c5 01       	movw	r24, r10
 3ce:	0e 94 0b 03 	call	0x616	; 0x616 <strnlen_P>
 3d2:	4c 01       	movw	r8, r24
 3d4:	f3 2d       	mov	r31, r3
 3d6:	f0 68       	ori	r31, 0x80	; 128
 3d8:	3f 2e       	mov	r3, r31
 3da:	82 01       	movw	r16, r4
 3dc:	33 fc       	sbrc	r3, 3
 3de:	1b c0       	rjmp	.+54     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3e0:	82 2d       	mov	r24, r2
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	88 16       	cp	r8, r24
 3e6:	99 06       	cpc	r9, r25
 3e8:	b0 f4       	brcc	.+44     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ea:	b6 01       	movw	r22, r12
 3ec:	80 e2       	ldi	r24, 0x20	; 32
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 21 03 	call	0x642	; 0x642 <fputc>
 3f4:	2a 94       	dec	r2
 3f6:	f4 cf       	rjmp	.-24     	; 0x3e0 <vfprintf+0x18c>
 3f8:	f5 01       	movw	r30, r10
 3fa:	37 fc       	sbrc	r3, 7
 3fc:	85 91       	lpm	r24, Z+
 3fe:	37 fe       	sbrs	r3, 7
 400:	81 91       	ld	r24, Z+
 402:	5f 01       	movw	r10, r30
 404:	b6 01       	movw	r22, r12
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 21 03 	call	0x642	; 0x642 <fputc>
 40c:	21 10       	cpse	r2, r1
 40e:	2a 94       	dec	r2
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	82 1a       	sub	r8, r18
 414:	91 08       	sbc	r9, r1
 416:	81 14       	cp	r8, r1
 418:	91 04       	cpc	r9, r1
 41a:	71 f7       	brne	.-36     	; 0x3f8 <vfprintf+0x1a4>
 41c:	e8 c0       	rjmp	.+464    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 41e:	84 36       	cpi	r24, 0x64	; 100
 420:	11 f0       	breq	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	89 36       	cpi	r24, 0x69	; 105
 424:	41 f5       	brne	.+80     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 426:	f8 01       	movw	r30, r16
 428:	37 fe       	sbrs	r3, 7
 42a:	07 c0       	rjmp	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42c:	60 81       	ld	r22, Z
 42e:	71 81       	ldd	r23, Z+1	; 0x01
 430:	82 81       	ldd	r24, Z+2	; 0x02
 432:	93 81       	ldd	r25, Z+3	; 0x03
 434:	0c 5f       	subi	r16, 0xFC	; 252
 436:	1f 4f       	sbci	r17, 0xFF	; 255
 438:	08 c0       	rjmp	.+16     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 43a:	60 81       	ld	r22, Z
 43c:	71 81       	ldd	r23, Z+1	; 0x01
 43e:	07 2e       	mov	r0, r23
 440:	00 0c       	add	r0, r0
 442:	88 0b       	sbc	r24, r24
 444:	99 0b       	sbc	r25, r25
 446:	0e 5f       	subi	r16, 0xFE	; 254
 448:	1f 4f       	sbci	r17, 0xFF	; 255
 44a:	f3 2d       	mov	r31, r3
 44c:	ff 76       	andi	r31, 0x6F	; 111
 44e:	3f 2e       	mov	r3, r31
 450:	97 ff       	sbrs	r25, 7
 452:	09 c0       	rjmp	.+18     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 454:	90 95       	com	r25
 456:	80 95       	com	r24
 458:	70 95       	com	r23
 45a:	61 95       	neg	r22
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	f0 68       	ori	r31, 0x80	; 128
 464:	3f 2e       	mov	r3, r31
 466:	2a e0       	ldi	r18, 0x0A	; 10
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	a3 01       	movw	r20, r6
 46c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__ultoa_invert>
 470:	88 2e       	mov	r8, r24
 472:	86 18       	sub	r8, r6
 474:	45 c0       	rjmp	.+138    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 476:	85 37       	cpi	r24, 0x75	; 117
 478:	31 f4       	brne	.+12     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 47a:	23 2d       	mov	r18, r3
 47c:	2f 7e       	andi	r18, 0xEF	; 239
 47e:	b2 2e       	mov	r11, r18
 480:	2a e0       	ldi	r18, 0x0A	; 10
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	25 c0       	rjmp	.+74     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 486:	93 2d       	mov	r25, r3
 488:	99 7f       	andi	r25, 0xF9	; 249
 48a:	b9 2e       	mov	r11, r25
 48c:	8f 36       	cpi	r24, 0x6F	; 111
 48e:	c1 f0       	breq	.+48     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 490:	18 f4       	brcc	.+6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 492:	88 35       	cpi	r24, 0x58	; 88
 494:	79 f0       	breq	.+30     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 496:	b5 c0       	rjmp	.+362    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 498:	80 37       	cpi	r24, 0x70	; 112
 49a:	19 f0       	breq	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49c:	88 37       	cpi	r24, 0x78	; 120
 49e:	21 f0       	breq	.+8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a0:	b0 c0       	rjmp	.+352    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 4a2:	e9 2f       	mov	r30, r25
 4a4:	e0 61       	ori	r30, 0x10	; 16
 4a6:	be 2e       	mov	r11, r30
 4a8:	b4 fe       	sbrs	r11, 4
 4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ac:	fb 2d       	mov	r31, r11
 4ae:	f4 60       	ori	r31, 0x04	; 4
 4b0:	bf 2e       	mov	r11, r31
 4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4b4:	34 fe       	sbrs	r3, 4
 4b6:	0a c0       	rjmp	.+20     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4b8:	29 2f       	mov	r18, r25
 4ba:	26 60       	ori	r18, 0x06	; 6
 4bc:	b2 2e       	mov	r11, r18
 4be:	06 c0       	rjmp	.+12     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4c0:	28 e0       	ldi	r18, 0x08	; 8
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4c6:	20 e1       	ldi	r18, 0x10	; 16
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4cc:	20 e1       	ldi	r18, 0x10	; 16
 4ce:	32 e0       	ldi	r19, 0x02	; 2
 4d0:	f8 01       	movw	r30, r16
 4d2:	b7 fe       	sbrs	r11, 7
 4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4d6:	60 81       	ld	r22, Z
 4d8:	71 81       	ldd	r23, Z+1	; 0x01
 4da:	82 81       	ldd	r24, Z+2	; 0x02
 4dc:	93 81       	ldd	r25, Z+3	; 0x03
 4de:	0c 5f       	subi	r16, 0xFC	; 252
 4e0:	1f 4f       	sbci	r17, 0xFF	; 255
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4e4:	60 81       	ld	r22, Z
 4e6:	71 81       	ldd	r23, Z+1	; 0x01
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 5f       	subi	r16, 0xFE	; 254
 4ee:	1f 4f       	sbci	r17, 0xFF	; 255
 4f0:	a3 01       	movw	r20, r6
 4f2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__ultoa_invert>
 4f6:	88 2e       	mov	r8, r24
 4f8:	86 18       	sub	r8, r6
 4fa:	fb 2d       	mov	r31, r11
 4fc:	ff 77       	andi	r31, 0x7F	; 127
 4fe:	3f 2e       	mov	r3, r31
 500:	36 fe       	sbrs	r3, 6
 502:	0d c0       	rjmp	.+26     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 504:	23 2d       	mov	r18, r3
 506:	2e 7f       	andi	r18, 0xFE	; 254
 508:	a2 2e       	mov	r10, r18
 50a:	89 14       	cp	r8, r9
 50c:	58 f4       	brcc	.+22     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 50e:	34 fe       	sbrs	r3, 4
 510:	0b c0       	rjmp	.+22     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 512:	32 fc       	sbrc	r3, 2
 514:	09 c0       	rjmp	.+18     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 516:	83 2d       	mov	r24, r3
 518:	8e 7e       	andi	r24, 0xEE	; 238
 51a:	a8 2e       	mov	r10, r24
 51c:	05 c0       	rjmp	.+10     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 51e:	b8 2c       	mov	r11, r8
 520:	a3 2c       	mov	r10, r3
 522:	03 c0       	rjmp	.+6      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 524:	b8 2c       	mov	r11, r8
 526:	01 c0       	rjmp	.+2      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 528:	b9 2c       	mov	r11, r9
 52a:	a4 fe       	sbrs	r10, 4
 52c:	0f c0       	rjmp	.+30     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 52e:	fe 01       	movw	r30, r28
 530:	e8 0d       	add	r30, r8
 532:	f1 1d       	adc	r31, r1
 534:	80 81       	ld	r24, Z
 536:	80 33       	cpi	r24, 0x30	; 48
 538:	21 f4       	brne	.+8      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 53a:	9a 2d       	mov	r25, r10
 53c:	99 7e       	andi	r25, 0xE9	; 233
 53e:	a9 2e       	mov	r10, r25
 540:	09 c0       	rjmp	.+18     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 542:	a2 fe       	sbrs	r10, 2
 544:	06 c0       	rjmp	.+12     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 546:	b3 94       	inc	r11
 548:	b3 94       	inc	r11
 54a:	04 c0       	rjmp	.+8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 54c:	8a 2d       	mov	r24, r10
 54e:	86 78       	andi	r24, 0x86	; 134
 550:	09 f0       	breq	.+2      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 552:	b3 94       	inc	r11
 554:	a3 fc       	sbrc	r10, 3
 556:	11 c0       	rjmp	.+34     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 558:	a0 fe       	sbrs	r10, 0
 55a:	06 c0       	rjmp	.+12     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 55c:	b2 14       	cp	r11, r2
 55e:	88 f4       	brcc	.+34     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 560:	28 0c       	add	r2, r8
 562:	92 2c       	mov	r9, r2
 564:	9b 18       	sub	r9, r11
 566:	0e c0       	rjmp	.+28     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 568:	b2 14       	cp	r11, r2
 56a:	60 f4       	brcc	.+24     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 56c:	b6 01       	movw	r22, r12
 56e:	80 e2       	ldi	r24, 0x20	; 32
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 21 03 	call	0x642	; 0x642 <fputc>
 576:	b3 94       	inc	r11
 578:	f7 cf       	rjmp	.-18     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 57a:	b2 14       	cp	r11, r2
 57c:	18 f4       	brcc	.+6      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 57e:	2b 18       	sub	r2, r11
 580:	02 c0       	rjmp	.+4      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 582:	98 2c       	mov	r9, r8
 584:	21 2c       	mov	r2, r1
 586:	a4 fe       	sbrs	r10, 4
 588:	10 c0       	rjmp	.+32     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 58a:	b6 01       	movw	r22, r12
 58c:	80 e3       	ldi	r24, 0x30	; 48
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 21 03 	call	0x642	; 0x642 <fputc>
 594:	a2 fe       	sbrs	r10, 2
 596:	17 c0       	rjmp	.+46     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 598:	a1 fc       	sbrc	r10, 1
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 59c:	88 e7       	ldi	r24, 0x78	; 120
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5a2:	88 e5       	ldi	r24, 0x58	; 88
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	b6 01       	movw	r22, r12
 5a8:	0c c0       	rjmp	.+24     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5aa:	8a 2d       	mov	r24, r10
 5ac:	86 78       	andi	r24, 0x86	; 134
 5ae:	59 f0       	breq	.+22     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5b0:	a1 fe       	sbrs	r10, 1
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5b4:	8b e2       	ldi	r24, 0x2B	; 43
 5b6:	01 c0       	rjmp	.+2      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5b8:	80 e2       	ldi	r24, 0x20	; 32
 5ba:	a7 fc       	sbrc	r10, 7
 5bc:	8d e2       	ldi	r24, 0x2D	; 45
 5be:	b6 01       	movw	r22, r12
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 21 03 	call	0x642	; 0x642 <fputc>
 5c6:	89 14       	cp	r8, r9
 5c8:	38 f4       	brcc	.+14     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5ca:	b6 01       	movw	r22, r12
 5cc:	80 e3       	ldi	r24, 0x30	; 48
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 21 03 	call	0x642	; 0x642 <fputc>
 5d4:	9a 94       	dec	r9
 5d6:	f7 cf       	rjmp	.-18     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5d8:	8a 94       	dec	r8
 5da:	f3 01       	movw	r30, r6
 5dc:	e8 0d       	add	r30, r8
 5de:	f1 1d       	adc	r31, r1
 5e0:	80 81       	ld	r24, Z
 5e2:	b6 01       	movw	r22, r12
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 21 03 	call	0x642	; 0x642 <fputc>
 5ea:	81 10       	cpse	r8, r1
 5ec:	f5 cf       	rjmp	.-22     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5ee:	22 20       	and	r2, r2
 5f0:	09 f4       	brne	.+2      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5f2:	42 ce       	rjmp	.-892    	; 0x278 <vfprintf+0x24>
 5f4:	b6 01       	movw	r22, r12
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 21 03 	call	0x642	; 0x642 <fputc>
 5fe:	2a 94       	dec	r2
 600:	f6 cf       	rjmp	.-20     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 602:	f6 01       	movw	r30, r12
 604:	86 81       	ldd	r24, Z+6	; 0x06
 606:	97 81       	ldd	r25, Z+7	; 0x07
 608:	02 c0       	rjmp	.+4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	9f ef       	ldi	r25, 0xFF	; 255
 60e:	2b 96       	adiw	r28, 0x0b	; 11
 610:	e2 e1       	ldi	r30, 0x12	; 18
 612:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__epilogue_restores__>

00000616 <strnlen_P>:
 616:	fc 01       	movw	r30, r24
 618:	05 90       	lpm	r0, Z+
 61a:	61 50       	subi	r22, 0x01	; 1
 61c:	70 40       	sbci	r23, 0x00	; 0
 61e:	01 10       	cpse	r0, r1
 620:	d8 f7       	brcc	.-10     	; 0x618 <strnlen_P+0x2>
 622:	80 95       	com	r24
 624:	90 95       	com	r25
 626:	8e 0f       	add	r24, r30
 628:	9f 1f       	adc	r25, r31
 62a:	08 95       	ret

0000062c <strnlen>:
 62c:	fc 01       	movw	r30, r24
 62e:	61 50       	subi	r22, 0x01	; 1
 630:	70 40       	sbci	r23, 0x00	; 0
 632:	01 90       	ld	r0, Z+
 634:	01 10       	cpse	r0, r1
 636:	d8 f7       	brcc	.-10     	; 0x62e <strnlen+0x2>
 638:	80 95       	com	r24
 63a:	90 95       	com	r25
 63c:	8e 0f       	add	r24, r30
 63e:	9f 1f       	adc	r25, r31
 640:	08 95       	ret

00000642 <fputc>:
 642:	0f 93       	push	r16
 644:	1f 93       	push	r17
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	fb 01       	movw	r30, r22
 64c:	23 81       	ldd	r18, Z+3	; 0x03
 64e:	21 fd       	sbrc	r18, 1
 650:	03 c0       	rjmp	.+6      	; 0x658 <fputc+0x16>
 652:	8f ef       	ldi	r24, 0xFF	; 255
 654:	9f ef       	ldi	r25, 0xFF	; 255
 656:	2c c0       	rjmp	.+88     	; 0x6b0 <fputc+0x6e>
 658:	22 ff       	sbrs	r18, 2
 65a:	16 c0       	rjmp	.+44     	; 0x688 <fputc+0x46>
 65c:	46 81       	ldd	r20, Z+6	; 0x06
 65e:	57 81       	ldd	r21, Z+7	; 0x07
 660:	24 81       	ldd	r18, Z+4	; 0x04
 662:	35 81       	ldd	r19, Z+5	; 0x05
 664:	42 17       	cp	r20, r18
 666:	53 07       	cpc	r21, r19
 668:	44 f4       	brge	.+16     	; 0x67a <fputc+0x38>
 66a:	a0 81       	ld	r26, Z
 66c:	b1 81       	ldd	r27, Z+1	; 0x01
 66e:	9d 01       	movw	r18, r26
 670:	2f 5f       	subi	r18, 0xFF	; 255
 672:	3f 4f       	sbci	r19, 0xFF	; 255
 674:	31 83       	std	Z+1, r19	; 0x01
 676:	20 83       	st	Z, r18
 678:	8c 93       	st	X, r24
 67a:	26 81       	ldd	r18, Z+6	; 0x06
 67c:	37 81       	ldd	r19, Z+7	; 0x07
 67e:	2f 5f       	subi	r18, 0xFF	; 255
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	37 83       	std	Z+7, r19	; 0x07
 684:	26 83       	std	Z+6, r18	; 0x06
 686:	14 c0       	rjmp	.+40     	; 0x6b0 <fputc+0x6e>
 688:	8b 01       	movw	r16, r22
 68a:	ec 01       	movw	r28, r24
 68c:	fb 01       	movw	r30, r22
 68e:	00 84       	ldd	r0, Z+8	; 0x08
 690:	f1 85       	ldd	r31, Z+9	; 0x09
 692:	e0 2d       	mov	r30, r0
 694:	09 95       	icall
 696:	89 2b       	or	r24, r25
 698:	e1 f6       	brne	.-72     	; 0x652 <fputc+0x10>
 69a:	d8 01       	movw	r26, r16
 69c:	16 96       	adiw	r26, 0x06	; 6
 69e:	8d 91       	ld	r24, X+
 6a0:	9c 91       	ld	r25, X
 6a2:	17 97       	sbiw	r26, 0x07	; 7
 6a4:	01 96       	adiw	r24, 0x01	; 1
 6a6:	17 96       	adiw	r26, 0x07	; 7
 6a8:	9c 93       	st	X, r25
 6aa:	8e 93       	st	-X, r24
 6ac:	16 97       	sbiw	r26, 0x06	; 6
 6ae:	ce 01       	movw	r24, r28
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	08 95       	ret

000006ba <__ultoa_invert>:
 6ba:	fa 01       	movw	r30, r20
 6bc:	aa 27       	eor	r26, r26
 6be:	28 30       	cpi	r18, 0x08	; 8
 6c0:	51 f1       	breq	.+84     	; 0x716 <__ultoa_invert+0x5c>
 6c2:	20 31       	cpi	r18, 0x10	; 16
 6c4:	81 f1       	breq	.+96     	; 0x726 <__ultoa_invert+0x6c>
 6c6:	e8 94       	clt
 6c8:	6f 93       	push	r22
 6ca:	6e 7f       	andi	r22, 0xFE	; 254
 6cc:	6e 5f       	subi	r22, 0xFE	; 254
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	af 4f       	sbci	r26, 0xFF	; 255
 6d6:	b1 e0       	ldi	r27, 0x01	; 1
 6d8:	3e d0       	rcall	.+124    	; 0x756 <__ultoa_invert+0x9c>
 6da:	b4 e0       	ldi	r27, 0x04	; 4
 6dc:	3c d0       	rcall	.+120    	; 0x756 <__ultoa_invert+0x9c>
 6de:	67 0f       	add	r22, r23
 6e0:	78 1f       	adc	r23, r24
 6e2:	89 1f       	adc	r24, r25
 6e4:	9a 1f       	adc	r25, r26
 6e6:	a1 1d       	adc	r26, r1
 6e8:	68 0f       	add	r22, r24
 6ea:	79 1f       	adc	r23, r25
 6ec:	8a 1f       	adc	r24, r26
 6ee:	91 1d       	adc	r25, r1
 6f0:	a1 1d       	adc	r26, r1
 6f2:	6a 0f       	add	r22, r26
 6f4:	71 1d       	adc	r23, r1
 6f6:	81 1d       	adc	r24, r1
 6f8:	91 1d       	adc	r25, r1
 6fa:	a1 1d       	adc	r26, r1
 6fc:	20 d0       	rcall	.+64     	; 0x73e <__ultoa_invert+0x84>
 6fe:	09 f4       	brne	.+2      	; 0x702 <__ultoa_invert+0x48>
 700:	68 94       	set
 702:	3f 91       	pop	r19
 704:	2a e0       	ldi	r18, 0x0A	; 10
 706:	26 9f       	mul	r18, r22
 708:	11 24       	eor	r1, r1
 70a:	30 19       	sub	r19, r0
 70c:	30 5d       	subi	r19, 0xD0	; 208
 70e:	31 93       	st	Z+, r19
 710:	de f6       	brtc	.-74     	; 0x6c8 <__ultoa_invert+0xe>
 712:	cf 01       	movw	r24, r30
 714:	08 95       	ret
 716:	46 2f       	mov	r20, r22
 718:	47 70       	andi	r20, 0x07	; 7
 71a:	40 5d       	subi	r20, 0xD0	; 208
 71c:	41 93       	st	Z+, r20
 71e:	b3 e0       	ldi	r27, 0x03	; 3
 720:	0f d0       	rcall	.+30     	; 0x740 <__ultoa_invert+0x86>
 722:	c9 f7       	brne	.-14     	; 0x716 <__ultoa_invert+0x5c>
 724:	f6 cf       	rjmp	.-20     	; 0x712 <__ultoa_invert+0x58>
 726:	46 2f       	mov	r20, r22
 728:	4f 70       	andi	r20, 0x0F	; 15
 72a:	40 5d       	subi	r20, 0xD0	; 208
 72c:	4a 33       	cpi	r20, 0x3A	; 58
 72e:	18 f0       	brcs	.+6      	; 0x736 <__ultoa_invert+0x7c>
 730:	49 5d       	subi	r20, 0xD9	; 217
 732:	31 fd       	sbrc	r19, 1
 734:	40 52       	subi	r20, 0x20	; 32
 736:	41 93       	st	Z+, r20
 738:	02 d0       	rcall	.+4      	; 0x73e <__ultoa_invert+0x84>
 73a:	a9 f7       	brne	.-22     	; 0x726 <__ultoa_invert+0x6c>
 73c:	ea cf       	rjmp	.-44     	; 0x712 <__ultoa_invert+0x58>
 73e:	b4 e0       	ldi	r27, 0x04	; 4
 740:	a6 95       	lsr	r26
 742:	97 95       	ror	r25
 744:	87 95       	ror	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	ba 95       	dec	r27
 74c:	c9 f7       	brne	.-14     	; 0x740 <__ultoa_invert+0x86>
 74e:	00 97       	sbiw	r24, 0x00	; 0
 750:	61 05       	cpc	r22, r1
 752:	71 05       	cpc	r23, r1
 754:	08 95       	ret
 756:	9b 01       	movw	r18, r22
 758:	ac 01       	movw	r20, r24
 75a:	0a 2e       	mov	r0, r26
 75c:	06 94       	lsr	r0
 75e:	57 95       	ror	r21
 760:	47 95       	ror	r20
 762:	37 95       	ror	r19
 764:	27 95       	ror	r18
 766:	ba 95       	dec	r27
 768:	c9 f7       	brne	.-14     	; 0x75c <__ultoa_invert+0xa2>
 76a:	62 0f       	add	r22, r18
 76c:	73 1f       	adc	r23, r19
 76e:	84 1f       	adc	r24, r20
 770:	95 1f       	adc	r25, r21
 772:	a0 1d       	adc	r26, r0
 774:	08 95       	ret

00000776 <__prologue_saves__>:
 776:	2f 92       	push	r2
 778:	3f 92       	push	r3
 77a:	4f 92       	push	r4
 77c:	5f 92       	push	r5
 77e:	6f 92       	push	r6
 780:	7f 92       	push	r7
 782:	8f 92       	push	r8
 784:	9f 92       	push	r9
 786:	af 92       	push	r10
 788:	bf 92       	push	r11
 78a:	cf 92       	push	r12
 78c:	df 92       	push	r13
 78e:	ef 92       	push	r14
 790:	ff 92       	push	r15
 792:	0f 93       	push	r16
 794:	1f 93       	push	r17
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	ca 1b       	sub	r28, r26
 7a0:	db 0b       	sbc	r29, r27
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	f8 94       	cli
 7a6:	de bf       	out	0x3e, r29	; 62
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	cd bf       	out	0x3d, r28	; 61
 7ac:	09 94       	ijmp

000007ae <__epilogue_restores__>:
 7ae:	2a 88       	ldd	r2, Y+18	; 0x12
 7b0:	39 88       	ldd	r3, Y+17	; 0x11
 7b2:	48 88       	ldd	r4, Y+16	; 0x10
 7b4:	5f 84       	ldd	r5, Y+15	; 0x0f
 7b6:	6e 84       	ldd	r6, Y+14	; 0x0e
 7b8:	7d 84       	ldd	r7, Y+13	; 0x0d
 7ba:	8c 84       	ldd	r8, Y+12	; 0x0c
 7bc:	9b 84       	ldd	r9, Y+11	; 0x0b
 7be:	aa 84       	ldd	r10, Y+10	; 0x0a
 7c0:	b9 84       	ldd	r11, Y+9	; 0x09
 7c2:	c8 84       	ldd	r12, Y+8	; 0x08
 7c4:	df 80       	ldd	r13, Y+7	; 0x07
 7c6:	ee 80       	ldd	r14, Y+6	; 0x06
 7c8:	fd 80       	ldd	r15, Y+5	; 0x05
 7ca:	0c 81       	ldd	r16, Y+4	; 0x04
 7cc:	1b 81       	ldd	r17, Y+3	; 0x03
 7ce:	aa 81       	ldd	r26, Y+2	; 0x02
 7d0:	b9 81       	ldd	r27, Y+1	; 0x01
 7d2:	ce 0f       	add	r28, r30
 7d4:	d1 1d       	adc	r29, r1
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	de bf       	out	0x3e, r29	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	cd bf       	out	0x3d, r28	; 61
 7e0:	ed 01       	movw	r28, r26
 7e2:	08 95       	ret

000007e4 <_exit>:
 7e4:	f8 94       	cli

000007e6 <__stop_program>:
 7e6:	ff cf       	rjmp	.-2      	; 0x7e6 <__stop_program>
